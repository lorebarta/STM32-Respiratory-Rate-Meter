
Progetto_Finale_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013000  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d5c  08017d5c  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08017d5c  08017d5c  00027d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017d64  08017d64  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017d64  08017d64  00027d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017d68  08017d68  00027d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08017d6c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003264  20000070  08017ddc  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032d4  08017ddc  000332d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001669b  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c4e  00000000  00000000  000467f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00049448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a47  00000000  00000000  0004a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017761  00000000  00000000  0004acbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011efc  00000000  00000000  00062420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a8c1  00000000  00000000  0007431c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ea8  00000000  00000000  0010ebe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00112a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002f41  00000000  00000000  00112afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000b8  00000000  00000000  00115a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004d44 	.word	0x08004d44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08004d44 	.word	0x08004d44

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__gedf2>:
 8000970:	f04f 3cff 	mov.w	ip, #4294967295
 8000974:	e006      	b.n	8000984 <__cmpdf2+0x4>
 8000976:	bf00      	nop

08000978 <__ledf2>:
 8000978:	f04f 0c01 	mov.w	ip, #1
 800097c:	e002      	b.n	8000984 <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__cmpdf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099a:	d01b      	beq.n	80009d4 <__cmpdf2+0x54>
 800099c:	b001      	add	sp, #4
 800099e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a2:	bf0c      	ite	eq
 80009a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a8:	ea91 0f03 	teqne	r1, r3
 80009ac:	bf02      	ittt	eq
 80009ae:	ea90 0f02 	teqeq	r0, r2
 80009b2:	2000      	moveq	r0, #0
 80009b4:	4770      	bxeq	lr
 80009b6:	f110 0f00 	cmn.w	r0, #0
 80009ba:	ea91 0f03 	teq	r1, r3
 80009be:	bf58      	it	pl
 80009c0:	4299      	cmppl	r1, r3
 80009c2:	bf08      	it	eq
 80009c4:	4290      	cmpeq	r0, r2
 80009c6:	bf2c      	ite	cs
 80009c8:	17d8      	asrcs	r0, r3, #31
 80009ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ce:	f040 0001 	orr.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	d102      	bne.n	80009e4 <__cmpdf2+0x64>
 80009de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e2:	d107      	bne.n	80009f4 <__cmpdf2+0x74>
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d1d6      	bne.n	800099c <__cmpdf2+0x1c>
 80009ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f2:	d0d3      	beq.n	800099c <__cmpdf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cdrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4610      	mov	r0, r2
 8000a00:	4662      	mov	r2, ip
 8000a02:	468c      	mov	ip, r1
 8000a04:	4619      	mov	r1, r3
 8000a06:	4663      	mov	r3, ip
 8000a08:	e000      	b.n	8000a0c <__aeabi_cdcmpeq>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdcmpeq>:
 8000a0c:	b501      	push	{r0, lr}
 8000a0e:	f7ff ffb7 	bl	8000980 <__cmpdf2>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	bf48      	it	mi
 8000a16:	f110 0f00 	cmnmi.w	r0, #0
 8000a1a:	bd01      	pop	{r0, pc}

08000a1c <__aeabi_dcmpeq>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff fff4 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a24:	bf0c      	ite	eq
 8000a26:	2001      	moveq	r0, #1
 8000a28:	2000      	movne	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmplt>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffea 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a38:	bf34      	ite	cc
 8000a3a:	2001      	movcc	r0, #1
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmple>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffe0 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpge>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffce 	bl	80009fc <__aeabi_cdrcmple>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpgt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffc4 	bl	80009fc <__aeabi_cdrcmple>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpun>:
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__aeabi_dcmpun+0x10>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d10a      	bne.n	8000aa6 <__aeabi_dcmpun+0x26>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x20>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_dcmpun+0x26>
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0001 	mov.w	r0, #1
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b970 	b.w	8000e44 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9e08      	ldr	r6, [sp, #32]
 8000b82:	460d      	mov	r5, r1
 8000b84:	4604      	mov	r4, r0
 8000b86:	460f      	mov	r7, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14a      	bne.n	8000c22 <__udivmoddi4+0xa6>
 8000b8c:	428a      	cmp	r2, r1
 8000b8e:	4694      	mov	ip, r2
 8000b90:	d965      	bls.n	8000c5e <__udivmoddi4+0xe2>
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	b143      	cbz	r3, 8000baa <__udivmoddi4+0x2e>
 8000b98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ba0:	409f      	lsls	r7, r3
 8000ba2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba6:	4317      	orrs	r7, r2
 8000ba8:	409c      	lsls	r4, r3
 8000baa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bae:	fa1f f58c 	uxth.w	r5, ip
 8000bb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc0:	fb01 f005 	mul.w	r0, r1, r5
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x62>
 8000bc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bd0:	f080 811c 	bcs.w	8000e0c <__udivmoddi4+0x290>
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	f240 8119 	bls.w	8000e0c <__udivmoddi4+0x290>
 8000bda:	3902      	subs	r1, #2
 8000bdc:	4462      	add	r2, ip
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	b2a4      	uxth	r4, r4
 8000be2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bee:	fb00 f505 	mul.w	r5, r0, r5
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x90>
 8000bf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfe:	f080 8107 	bcs.w	8000e10 <__udivmoddi4+0x294>
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	f240 8104 	bls.w	8000e10 <__udivmoddi4+0x294>
 8000c08:	4464      	add	r4, ip
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c10:	1b64      	subs	r4, r4, r5
 8000c12:	2100      	movs	r1, #0
 8000c14:	b11e      	cbz	r6, 8000c1e <__udivmoddi4+0xa2>
 8000c16:	40dc      	lsrs	r4, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0xbc>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	f000 80ed 	beq.w	8000e06 <__udivmoddi4+0x28a>
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c32:	4608      	mov	r0, r1
 8000c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c38:	fab3 f183 	clz	r1, r3
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	d149      	bne.n	8000cd4 <__udivmoddi4+0x158>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	d302      	bcc.n	8000c4a <__udivmoddi4+0xce>
 8000c44:	4282      	cmp	r2, r0
 8000c46:	f200 80f8 	bhi.w	8000e3a <__udivmoddi4+0x2be>
 8000c4a:	1a84      	subs	r4, r0, r2
 8000c4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c50:	2001      	movs	r0, #1
 8000c52:	4617      	mov	r7, r2
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d0e2      	beq.n	8000c1e <__udivmoddi4+0xa2>
 8000c58:	e9c6 4700 	strd	r4, r7, [r6]
 8000c5c:	e7df      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xe6>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x210>
 8000c6c:	1a8a      	subs	r2, r1, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	2101      	movs	r1, #1
 8000c78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c80:	0c22      	lsrs	r2, r4, #16
 8000c82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c86:	fb0e f005 	mul.w	r0, lr, r5
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x124>
 8000c8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x122>
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	f200 80cb 	bhi.w	8000e34 <__udivmoddi4+0x2b8>
 8000c9e:	4645      	mov	r5, r8
 8000ca0:	1a12      	subs	r2, r2, r0
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x14e>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x14c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f200 80bb 	bhi.w	8000e3e <__udivmoddi4+0x2c2>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd2:	e79f      	b.n	8000c14 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0720 	rsb	r7, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	40fd      	lsrs	r5, r7
 8000cec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d04:	fb08 f50e 	mul.w	r5, r8, lr
 8000d08:	42a5      	cmp	r5, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b0>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d1c:	f080 8088 	bcs.w	8000e30 <__udivmoddi4+0x2b4>
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	f240 8085 	bls.w	8000e30 <__udivmoddi4+0x2b4>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	4464      	add	r4, ip
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	b29d      	uxth	r5, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1da>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d4c:	d26c      	bcs.n	8000e28 <__udivmoddi4+0x2ac>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	d96a      	bls.n	8000e28 <__udivmoddi4+0x2ac>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	4464      	add	r4, ip
 8000d56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	46c8      	mov	r8, r9
 8000d66:	46ae      	mov	lr, r5
 8000d68:	d356      	bcc.n	8000e18 <__udivmoddi4+0x29c>
 8000d6a:	d053      	beq.n	8000e14 <__udivmoddi4+0x298>
 8000d6c:	b156      	cbz	r6, 8000d84 <__udivmoddi4+0x208>
 8000d6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d72:	eb64 040e 	sbc.w	r4, r4, lr
 8000d76:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7a:	40ca      	lsrs	r2, r1
 8000d7c:	40cc      	lsrs	r4, r1
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	e9c6 7400 	strd	r7, r4, [r6]
 8000d84:	4618      	mov	r0, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	f1c3 0120 	rsb	r1, r3, #32
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	fa20 f201 	lsr.w	r2, r0, r1
 8000d98:	fa25 f101 	lsr.w	r1, r5, r1
 8000d9c:	409d      	lsls	r5, r3
 8000d9e:	432a      	orrs	r2, r5
 8000da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1510 	mls	r5, r7, r0, r1
 8000db0:	0c11      	lsrs	r1, r2, #16
 8000db2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dba:	428d      	cmp	r5, r1
 8000dbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x258>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dca:	d22f      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dcc:	428d      	cmp	r5, r1
 8000dce:	d92d      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1b49      	subs	r1, r1, r5
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ddc:	fb07 1115 	mls	r1, r7, r5, r1
 8000de0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de4:	fb05 f10e 	mul.w	r1, r5, lr
 8000de8:	4291      	cmp	r1, r2
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x282>
 8000dec:	eb1c 0202 	adds.w	r2, ip, r2
 8000df0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df4:	d216      	bcs.n	8000e24 <__udivmoddi4+0x2a8>
 8000df6:	4291      	cmp	r1, r2
 8000df8:	d914      	bls.n	8000e24 <__udivmoddi4+0x2a8>
 8000dfa:	3d02      	subs	r5, #2
 8000dfc:	4462      	add	r2, ip
 8000dfe:	1a52      	subs	r2, r2, r1
 8000e00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e04:	e738      	b.n	8000c78 <__udivmoddi4+0xfc>
 8000e06:	4631      	mov	r1, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000e0c:	4639      	mov	r1, r7
 8000e0e:	e6e6      	b.n	8000bde <__udivmoddi4+0x62>
 8000e10:	4610      	mov	r0, r2
 8000e12:	e6fb      	b.n	8000c0c <__udivmoddi4+0x90>
 8000e14:	4548      	cmp	r0, r9
 8000e16:	d2a9      	bcs.n	8000d6c <__udivmoddi4+0x1f0>
 8000e18:	ebb9 0802 	subs.w	r8, r9, r2
 8000e1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e20:	3b01      	subs	r3, #1
 8000e22:	e7a3      	b.n	8000d6c <__udivmoddi4+0x1f0>
 8000e24:	4645      	mov	r5, r8
 8000e26:	e7ea      	b.n	8000dfe <__udivmoddi4+0x282>
 8000e28:	462b      	mov	r3, r5
 8000e2a:	e794      	b.n	8000d56 <__udivmoddi4+0x1da>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	e7d1      	b.n	8000dd4 <__udivmoddi4+0x258>
 8000e30:	46d0      	mov	r8, sl
 8000e32:	e77b      	b.n	8000d2c <__udivmoddi4+0x1b0>
 8000e34:	3d02      	subs	r5, #2
 8000e36:	4462      	add	r2, ip
 8000e38:	e732      	b.n	8000ca0 <__udivmoddi4+0x124>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e70a      	b.n	8000c54 <__udivmoddi4+0xd8>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e742      	b.n	8000cca <__udivmoddi4+0x14e>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f000 fc6b 	bl	8001728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f891 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 f99b 	bl	8001190 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e5a:	f000 f96f 	bl	800113c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e5e:	f000 f8f7 	bl	8001050 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000e62:	f000 f947 	bl	80010f4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000e66:	4839      	ldr	r0, [pc, #228]	; (8000f4c <main+0x104>)
 8000e68:	f000 fd38 	bl	80018dc <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000e6c:	4838      	ldr	r0, [pc, #224]	; (8000f50 <main+0x108>)
 8000e6e:	f002 f8ff 	bl	8003070 <HAL_TIM_Base_Start_IT>
  arm_rfft_fast_init_f32(&fft_handler, BUFFER_SIZE);
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	4837      	ldr	r0, [pc, #220]	; (8000f54 <main+0x10c>)
 8000e78:	f002 feaa 	bl	8003bd0 <arm_rfft_fast_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Timer_Flag){
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <main+0x110>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0fb      	beq.n	8000e7c <main+0x34>
		  if (ADC_counter < BUFFER_SIZE){
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <main+0x114>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8c:	da12      	bge.n	8000eb4 <main+0x6c>
			  // AT THE START WE STORE IN THE BUFFER BUFFER_SIZE samples*10ms = 10s
			  ADC_buffer[ADC_counter] = ADC_Value;
 8000e8e:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <main+0x118>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <main+0x114>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	ee07 2a90 	vmov	s15, r2
 8000e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e9e:	4a31      	ldr	r2, [pc, #196]	; (8000f64 <main+0x11c>)
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	edc3 7a00 	vstr	s15, [r3]
			  ADC_counter++;
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <main+0x114>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a2b      	ldr	r2, [pc, #172]	; (8000f5c <main+0x114>)
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e043      	b.n	8000f3c <main+0xf4>
			  }
		  else{
			  // Shift the buffer and store the last ADC data
			  for(int i = 0; i < BUFFER_SIZE-1; i++){
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	e00d      	b.n	8000ed6 <main+0x8e>
				  ADC_buffer[i] = ADC_buffer[i+1];
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <main+0x11c>)
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4927      	ldr	r1, [pc, #156]	; (8000f64 <main+0x11c>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	601a      	str	r2, [r3, #0]
			  for(int i = 0; i < BUFFER_SIZE-1; i++){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000edc:	4293      	cmp	r3, r2
 8000ede:	ddec      	ble.n	8000eba <main+0x72>
			  }
			  ADC_buffer[BUFFER_SIZE-1] = ADC_Value;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <main+0x118>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <main+0x11c>)
 8000eee:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8000ef2:	edc3 7a00 	vstr	s15, [r3]
			  // Copy the ADC buffer into the FFT buffer, dofft() will modify it
			  for(int i = 0; i < BUFFER_SIZE; i++){
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	e00c      	b.n	8000f16 <main+0xce>
				  fft_buffer_in[i] = ADC_buffer[i];
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <main+0x11c>)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4918      	ldr	r1, [pc, #96]	; (8000f68 <main+0x120>)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	601a      	str	r2, [r3, #0]
			  for(int i = 0; i < BUFFER_SIZE; i++){
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1c:	dbee      	blt.n	8000efc <main+0xb4>
			  }
			  // DO FFT AND SET peak values
			  dofft();
 8000f1e:	f000 f9d9 	bl	80012d4 <dofft>
			  freqResp = peakHz*60;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <main+0x124>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000f70 <main+0x128>
 8000f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f34:	ee17 2a90 	vmov	r2, s15
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <main+0x12c>)
 8000f3a:	601a      	str	r2, [r3, #0]
			  // I2C LOG of the frequency
		  }
		  HAL_ADC_Start_IT(&hadc1);
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <main+0x104>)
 8000f3e:	f000 fccd 	bl	80018dc <HAL_ADC_Start_IT>
		  Timer_Flag = 0;
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <main+0x110>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
	  if (Timer_Flag){
 8000f48:	e798      	b.n	8000e7c <main+0x34>
 8000f4a:	bf00      	nop
 8000f4c:	200030ac 	.word	0x200030ac
 8000f50:	200030f4 	.word	0x200030f4
 8000f54:	20003180 	.word	0x20003180
 8000f58:	2000008c 	.word	0x2000008c
 8000f5c:	20000090 	.word	0x20000090
 8000f60:	20000094 	.word	0x20000094
 8000f64:	20000098 	.word	0x20000098
 8000f68:	200010a8 	.word	0x200010a8
 8000f6c:	2000109c 	.word	0x2000109c
 8000f70:	42700000 	.word	0x42700000
 8000f74:	200030a8 	.word	0x200030a8

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	2230      	movs	r2, #48	; 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 fda4 	bl	8004ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <SystemClock_Config+0xd0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a28      	ldr	r2, [pc, #160]	; (8001048 <SystemClock_Config+0xd0>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <SystemClock_Config+0xd0>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <SystemClock_Config+0xd4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <SystemClock_Config+0xd4>)
 8000fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <SystemClock_Config+0xd4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fec:	2310      	movs	r3, #16
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ff0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fb4c 	bl	80026a0 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800100e:	f000 fa1f 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2302      	movs	r3, #2
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2102      	movs	r1, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fdae 	bl	8002b90 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800103a:	f000 fa09 	bl	8001450 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3750      	adds	r7, #80	; 0x50
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <MX_ADC1_Init+0x9c>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_ADC1_Init+0x98>)
 800106a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <MX_ADC1_Init+0xa0>)
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_ADC1_Init+0x98>)
 800109e:	2201      	movs	r2, #1
 80010a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010b2:	f000 fbcf 	bl	8001854 <HAL_ADC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010bc:	f000 f9c8 	bl	8001450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_ADC1_Init+0x98>)
 80010d2:	f000 fdf3 	bl	8001cbc <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010dc:	f000 f9b8 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200030ac 	.word	0x200030ac
 80010ec:	40012000 	.word	0x40012000
 80010f0:	0f000001 	.word	0x0f000001

080010f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_TIM10_Init+0x40>)
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <MX_TIM10_Init+0x44>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_TIM10_Init+0x40>)
 8001100:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001104:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_TIM10_Init+0x40>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = SAMPLE_FREQ-1;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_TIM10_Init+0x40>)
 800110e:	2263      	movs	r2, #99	; 0x63
 8001110:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_TIM10_Init+0x40>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_TIM10_Init+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_TIM10_Init+0x40>)
 8001120:	f001 ff56 	bl	8002fd0 <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800112a:	f000 f991 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200030f4 	.word	0x200030f4
 8001138:	40014400 	.word	0x40014400

0800113c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_USART2_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USART2_UART_Init+0x4c>)
 8001174:	f002 f9a2 	bl	80034bc <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 f967 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000313c 	.word	0x2000313c
 800118c:	40004400 	.word	0x40004400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a25      	ldr	r2, [pc, #148]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_GPIO_Init+0xd0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <MX_GPIO_Init+0xd0>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <MX_GPIO_Init+0xd4>)
 800121c:	f001 fa0c 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001226:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <MX_GPIO_Init+0xd8>)
 8001238:	f001 f87a 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800123c:	2320      	movs	r3, #32
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_GPIO_Init+0xd4>)
 8001254:	f001 f86c 	bl	8002330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020800 	.word	0x40020800

0800126c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	Timer_Flag = 1;
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000008c 	.word	0x2000008c

0800128c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	ADC_Value = HAL_ADC_GetValue(&hadc1);
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <HAL_ADC_ConvCpltCallback+0x40>)
 8001296:	f000 fcef 	bl	8001c78 <HAL_ADC_GetValue>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80012a0:	601a      	str	r2, [r3, #0]
	if (ADC_Value > 4080) ADC_Value = 4095;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 80012aa:	dd03      	ble.n	80012b4 <HAL_ADC_ConvCpltCallback+0x28>
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80012ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012b2:	601a      	str	r2, [r3, #0]
	if (ADC_Value < 15) ADC_Value = 0;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b0e      	cmp	r3, #14
 80012ba:	dc02      	bgt.n	80012c2 <HAL_ADC_ConvCpltCallback+0x36>
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200030ac 	.word	0x200030ac
 80012d0:	20000094 	.word	0x20000094

080012d4 <dofft>:

void dofft(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	// I calculate the medium value of the buffer, to know if numbers are changing
	ADC_Buffer_Med = 0;
 80012da:	4b55      	ldr	r3, [pc, #340]	; (8001430 <dofft+0x15c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++) ADC_Buffer_Med += fft_buffer_in[i];
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	e016      	b.n	8001314 <dofft+0x40>
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <dofft+0x15c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f2:	4a50      	ldr	r2, [pc, #320]	; (8001434 <dofft+0x160>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001306:	ee17 2a90 	vmov	r2, s15
 800130a:	4b49      	ldr	r3, [pc, #292]	; (8001430 <dofft+0x15c>)
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131a:	dbe4      	blt.n	80012e6 <dofft+0x12>
	ADC_Buffer_Med = ADC_Buffer_Med/BUFFER_SIZE;
 800131c:	4b44      	ldr	r3, [pc, #272]	; (8001430 <dofft+0x15c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	da01      	bge.n	8001328 <dofft+0x54>
 8001324:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001328:	129b      	asrs	r3, r3, #10
 800132a:	461a      	mov	r2, r3
 800132c:	4b40      	ldr	r3, [pc, #256]	; (8001430 <dofft+0x15c>)
 800132e:	601a      	str	r2, [r3, #0]
	// this function return real and imaginary parts for each frequency
	arm_rfft_fast_f32(&fft_handler, fft_buffer_in, fft_buffer_out, 0);
 8001330:	2300      	movs	r3, #0
 8001332:	4a41      	ldr	r2, [pc, #260]	; (8001438 <dofft+0x164>)
 8001334:	493f      	ldr	r1, [pc, #252]	; (8001434 <dofft+0x160>)
 8001336:	4841      	ldr	r0, [pc, #260]	; (800143c <dofft+0x168>)
 8001338:	f002 fd2e 	bl	8003d98 <arm_rfft_fast_f32>
	// remove DC components, only if the signal is received
	if (ADC_Buffer_Med > 10 && ADC_Buffer_Med < 4085)	fft_buffer_out[0] = 0;
 800133c:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <dofft+0x15c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b0a      	cmp	r3, #10
 8001342:	dd09      	ble.n	8001358 <dofft+0x84>
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <dofft+0x15c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f640 72f4 	movw	r2, #4084	; 0xff4
 800134c:	4293      	cmp	r3, r2
 800134e:	dc03      	bgt.n	8001358 <dofft+0x84>
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <dofft+0x164>)
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
	// reset the peaks
	peakValue = 0;
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <dofft+0x16c>)
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
	peakHz = 0;
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <dofft+0x170>)
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
	// store new peaks
	for(int i = 0; i < BUFFER_SIZE; i += 2){
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	e057      	b.n	800141e <dofft+0x14a>
		curVal = sqrt((fft_buffer_out[i]*fft_buffer_out[i]) + (fft_buffer_out[i+1]*fft_buffer_out[i+1]));
 800136e:	4a32      	ldr	r2, [pc, #200]	; (8001438 <dofft+0x164>)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	ed93 7a00 	vldr	s14, [r3]
 800137a:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <dofft+0x164>)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a2a      	ldr	r2, [pc, #168]	; (8001438 <dofft+0x164>)
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	edd3 6a00 	vldr	s13, [r3]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <dofft+0x164>)
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	ee17 0a90 	vmov	r0, s15
 80013b2:	f7ff f873 	bl	800049c <__aeabi_f2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	ec43 2b10 	vmov	d0, r2, r3
 80013be:	f003 fbbb 	bl	8004b38 <sqrt>
 80013c2:	ec53 2b10 	vmov	r2, r3, d0
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fb6f 	bl	8000aac <__aeabi_d2f>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <dofft+0x174>)
 80013d2:	6013      	str	r3, [r2, #0]
		if (curVal > peakValue){
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <dofft+0x174>)
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <dofft+0x16c>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e8:	dd16      	ble.n	8001418 <dofft+0x144>
			peakValue = curVal;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <dofft+0x174>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a14      	ldr	r2, [pc, #80]	; (8001440 <dofft+0x16c>)
 80013f0:	6013      	str	r3, [r2, #0]
			peakHz = (float)(i/2*(SAMPLE_FREQ)) / ((float)BUFFER_SIZE);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	0fda      	lsrs	r2, r3, #31
 80013f6:	4413      	add	r3, r2
 80013f8:	105b      	asrs	r3, r3, #1
 80013fa:	461a      	mov	r2, r3
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140a:	eddf 6a10 	vldr	s13, [pc, #64]	; 800144c <dofft+0x178>
 800140e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <dofft+0x170>)
 8001414:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < BUFFER_SIZE; i += 2){
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3302      	adds	r3, #2
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001424:	dba3      	blt.n	800136e <dofft+0x9a>
		}
	}
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200010a4 	.word	0x200010a4
 8001434:	200010a8 	.word	0x200010a8
 8001438:	200020a8 	.word	0x200020a8
 800143c:	20003180 	.word	0x20003180
 8001440:	20001098 	.word	0x20001098
 8001444:	2000109c 	.word	0x2000109c
 8001448:	200010a0 	.word	0x200010a0
 800144c:	44800000 	.word	0x44800000

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001458:	2120      	movs	r1, #32
 800145a:	4803      	ldr	r0, [pc, #12]	; (8001468 <Error_Handler+0x18>)
 800145c:	f001 f905 	bl	800266a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001460:	2064      	movs	r0, #100	; 0x64
 8001462:	f000 f9d3 	bl	800180c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001466:	e7f7      	b.n	8001458 <Error_Handler+0x8>
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014aa:	2007      	movs	r0, #7
 80014ac:	f000 fefe 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_ADC_MspInit+0x8c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12f      	bne.n	800153e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_ADC_MspInit+0x90>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_ADC_MspInit+0x90>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_ADC_MspInit+0x90>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_ADC_MspInit+0x90>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_ADC_MspInit+0x90>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_ADC_MspInit+0x90>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001516:	2301      	movs	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151a:	2303      	movs	r3, #3
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <HAL_ADC_MspInit+0x94>)
 800152a:	f000 ff01 	bl	8002330 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2012      	movs	r0, #18
 8001534:	f000 fec5 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001538:	2012      	movs	r0, #18
 800153a:	f000 fede 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40012000 	.word	0x40012000
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_TIM_Base_MspInit+0x48>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d115      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_TIM_Base_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_TIM_Base_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2019      	movs	r0, #25
 8001588:	f000 fe9b 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800158c:	2019      	movs	r0, #25
 800158e:	f000 feb4 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40014400 	.word	0x40014400
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_UART_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_UART_MspInit+0x88>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_UART_MspInit+0x88>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015fe:	230c      	movs	r3, #12
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_UART_MspInit+0x8c>)
 800161a:	f000 fe89 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40004400 	.word	0x40004400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 f8a4 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <ADC_IRQHandler+0x10>)
 800168e:	f000 f9e3 	bl	8001a58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200030ac 	.word	0x200030ac

0800169c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016a2:	f001 fd47 	bl	8003134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200030f4 	.word	0x200030f4

080016b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800170c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016da:	490e      	ldr	r1, [pc, #56]	; (8001714 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016dc:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f0:	4c0b      	ldr	r4, [pc, #44]	; (8001720 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016fe:	f7ff ffd7 	bl	80016b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001702:	f003 f9f5 	bl	8004af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001706:	f7ff fb9f 	bl	8000e48 <main>
  bx  lr    
 800170a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800170c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001718:	08017d6c 	.word	0x08017d6c
  ldr r2, =_sbss
 800171c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001720:	200032d4 	.word	0x200032d4

08001724 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <DMA1_Stream0_IRQHandler>
	...

08001728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HAL_Init+0x40>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_Init+0x40>)
 800173e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_Init+0x40>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 fdab 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fe86 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fdc3 	bl	8002316 <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 fd8b 	bl	80022c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x20>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_IncTick+0x24>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20003198 	.word	0x20003198

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_GetTick+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20003198 	.word	0x20003198

0800180c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff ffee 	bl	80017f4 <HAL_GetTick>
 8001818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d005      	beq.n	8001832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_Delay+0x44>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001832:	bf00      	nop
 8001834:	f7ff ffde 	bl	80017f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	d8f7      	bhi.n	8001834 <HAL_Delay+0x28>
  {
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000008 	.word	0x20000008

08001854 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e033      	b.n	80018d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fe22 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800189a:	f023 0302 	bic.w	r3, r3, #2
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fb2a 	bl	8001f00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f023 0303 	bic.w	r3, r3, #3
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
 80018c2:	e001      	b.n	80018c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Start_IT+0x1a>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e0a1      	b.n	8001a3a <HAL_ADC_Start_IT+0x15e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d018      	beq.n	800193e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_ADC_Start_IT+0x16c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a4a      	ldr	r2, [pc, #296]	; (8001a4c <HAL_ADC_Start_IT+0x170>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0c9a      	lsrs	r2, r3, #18
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001930:	e002      	b.n	8001938 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	3b01      	subs	r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f9      	bne.n	8001932 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d169      	bne.n	8001a20 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001976:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198a:	d106      	bne.n	800199a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f023 0206 	bic.w	r2, r3, #6
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
 8001998:	e002      	b.n	80019a0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_ADC_Start_IT+0x174>)
 80019aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019b4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10f      	bne.n	80019f6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d129      	bne.n	8001a38 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	e020      	b.n	8001a38 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <HAL_ADC_Start_IT+0x178>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d11b      	bne.n	8001a38 <HAL_ADC_Start_IT+0x15c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d114      	bne.n	8001a38 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	e00b      	b.n	8001a38 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f043 0210 	orr.w	r2, r3, #16
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	40012300 	.word	0x40012300
 8001a54:	40012000 	.word	0x40012000

08001a58 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d049      	beq.n	8001b22 <HAL_ADC_IRQHandler+0xca>
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d046      	beq.n	8001b22 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d12b      	bne.n	8001b12 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d127      	bne.n	8001b12 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d119      	bne.n	8001b12 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0220 	bic.w	r2, r2, #32
 8001aec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d105      	bne.n	8001b12 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fbba 	bl	800128c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0212 	mvn.w	r2, #18
 8001b20:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b30:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d057      	beq.n	8001be8 <HAL_ADC_IRQHandler+0x190>
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d054      	beq.n	8001be8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d139      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d12b      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d124      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11d      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d119      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bb2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fa8d 	bl	80020f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 020c 	mvn.w	r2, #12
 8001be6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d017      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x1d6>
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d014      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10d      	bne.n	8001c2e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f837 	bl	8001c92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0201 	mvn.w	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c3c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d015      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x218>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d012      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f06f 0220 	mvn.w	r2, #32
 8001c5e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f820 	bl	8001ca6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f06f 0220 	mvn.w	r2, #32
 8001c6e:	601a      	str	r2, [r3, #0]
  }
}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1c>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e105      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x228>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d925      	bls.n	8001d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68d9      	ldr	r1, [r3, #12]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b1e      	subs	r3, #30
 8001cfe:	2207      	movs	r2, #7
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43da      	mvns	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68d9      	ldr	r1, [r3, #12]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4603      	mov	r3, r0
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4403      	add	r3, r0
 8001d26:	3b1e      	subs	r3, #30
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	e022      	b.n	8001d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6919      	ldr	r1, [r3, #16]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	2207      	movs	r2, #7
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6919      	ldr	r1, [r3, #16]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4403      	add	r3, r0
 8001d70:	409a      	lsls	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d824      	bhi.n	8001dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b05      	subs	r3, #5
 8001d94:	221f      	movs	r2, #31
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b05      	subs	r3, #5
 8001dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dca:	e04c      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	d824      	bhi.n	8001e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b23      	subs	r3, #35	; 0x23
 8001de6:	221f      	movs	r2, #31
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43da      	mvns	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	400a      	ands	r2, r1
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b23      	subs	r3, #35	; 0x23
 8001e10:	fa00 f203 	lsl.w	r2, r0, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1c:	e023      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b41      	subs	r3, #65	; 0x41
 8001e30:	221f      	movs	r2, #31
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b41      	subs	r3, #65	; 0x41
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_ADC_ConfigChannel+0x234>)
 8001e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_ADC_ConfigChannel+0x238>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1cc>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b12      	cmp	r3, #18
 8001e7a:	d105      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_ADC_ConfigChannel+0x238>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d123      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x21e>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d003      	beq.n	8001ea2 <HAL_ADC_ConfigChannel+0x1e6>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b11      	cmp	r3, #17
 8001ea0:	d11b      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d111      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_ADC_ConfigChannel+0x23c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_ADC_ConfigChannel+0x240>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	0c9a      	lsrs	r2, r3, #18
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ecc:	e002      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f9      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40012300 	.word	0x40012300
 8001ef4:	40012000 	.word	0x40012000
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f08:	4b79      	ldr	r3, [pc, #484]	; (80020f0 <ADC_Init+0x1f0>)
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	021a      	lsls	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <ADC_Init+0x1f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e00f      	b.n	8001ffe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0202 	bic.w	r2, r2, #2
 800200c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7e1b      	ldrb	r3, [r3, #24]
 8002018:	005a      	lsls	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800203a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800204a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	3b01      	subs	r3, #1
 8002058:	035a      	lsls	r2, r3, #13
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e007      	b.n	8002074 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	3b01      	subs	r3, #1
 8002090:	051a      	lsls	r2, r3, #20
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020b6:	025a      	lsls	r2, r3, #9
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	029a      	lsls	r2, r3, #10
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40012300 	.word	0x40012300
 80020f4:	0f000001 	.word	0x0f000001

080020f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db0b      	blt.n	800219a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <__NVIC_EnableIRQ+0x38>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d301      	bcc.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e00f      	b.n	800229e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <SysTick_Config+0x40>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	210f      	movs	r1, #15
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f7ff ff8e 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SysTick_Config+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <SysTick_Config+0x40>)
 8002298:	2207      	movs	r2, #7
 800229a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff29 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d4:	f7ff ff3e 	bl	8002154 <__NVIC_GetPriorityGrouping>
 80022d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7ff ff8e 	bl	8002200 <NVIC_EncodePriority>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff5d 	bl	80021ac <__NVIC_SetPriority>
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff31 	bl	8002170 <__NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffa2 	bl	8002268 <SysTick_Config>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e159      	b.n	8002600 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 8148 	bne.w	80025fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d005      	beq.n	8002382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	2b02      	cmp	r3, #2
 8002380:	d130      	bne.n	80023e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0201 	and.w	r2, r3, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d017      	beq.n	8002420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d123      	bne.n	8002474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	69b9      	ldr	r1, [r7, #24]
 8002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a2 	beq.w	80025fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b57      	ldr	r3, [pc, #348]	; (8002618 <HAL_GPIO_Init+0x2e8>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a56      	ldr	r2, [pc, #344]	; (8002618 <HAL_GPIO_Init+0x2e8>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b54      	ldr	r3, [pc, #336]	; (8002618 <HAL_GPIO_Init+0x2e8>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d2:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_GPIO_Init+0x2ec>)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a49      	ldr	r2, [pc, #292]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d019      	beq.n	8002532 <HAL_GPIO_Init+0x202>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a48      	ldr	r2, [pc, #288]	; (8002624 <HAL_GPIO_Init+0x2f4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <HAL_GPIO_Init+0x1fe>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a47      	ldr	r2, [pc, #284]	; (8002628 <HAL_GPIO_Init+0x2f8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00d      	beq.n	800252a <HAL_GPIO_Init+0x1fa>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a46      	ldr	r2, [pc, #280]	; (800262c <HAL_GPIO_Init+0x2fc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d007      	beq.n	8002526 <HAL_GPIO_Init+0x1f6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a45      	ldr	r2, [pc, #276]	; (8002630 <HAL_GPIO_Init+0x300>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_GPIO_Init+0x1f2>
 800251e:	2304      	movs	r3, #4
 8002520:	e008      	b.n	8002534 <HAL_GPIO_Init+0x204>
 8002522:	2307      	movs	r3, #7
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x204>
 8002526:	2303      	movs	r3, #3
 8002528:	e004      	b.n	8002534 <HAL_GPIO_Init+0x204>
 800252a:	2302      	movs	r3, #2
 800252c:	e002      	b.n	8002534 <HAL_GPIO_Init+0x204>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_GPIO_Init+0x204>
 8002532:	2300      	movs	r3, #0
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f002 0203 	and.w	r2, r2, #3
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	4093      	lsls	r3, r2
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002544:	4935      	ldr	r1, [pc, #212]	; (800261c <HAL_GPIO_Init+0x2ec>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <HAL_GPIO_Init+0x304>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002576:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <HAL_GPIO_Init+0x304>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_GPIO_Init+0x304>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a0:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_GPIO_Init+0x304>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_GPIO_Init+0x304>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_GPIO_Init+0x304>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_GPIO_Init+0x304>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f4:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <HAL_GPIO_Init+0x304>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	f67f aea2 	bls.w	800234c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	40013800 	.word	0x40013800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000
 8002634:	40013c00 	.word	0x40013c00

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800267c:	887a      	ldrh	r2, [r7, #2]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	041a      	lsls	r2, r3, #16
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43d9      	mvns	r1, r3
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	400b      	ands	r3, r1
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e267      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d075      	beq.n	80027aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026be:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ca:	4b85      	ldr	r3, [pc, #532]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d112      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e2:	d10b      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	4b7e      	ldr	r3, [pc, #504]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05b      	beq.n	80027a8 <HAL_RCC_OscConfig+0x108>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d157      	bne.n	80027a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e242      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d106      	bne.n	8002714 <HAL_RCC_OscConfig+0x74>
 8002706:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a75      	ldr	r2, [pc, #468]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x98>
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6f      	ldr	r2, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6c      	ldr	r2, [pc, #432]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002738:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a68      	ldr	r2, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a65      	ldr	r2, [pc, #404]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff f84c 	bl	80017f4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7ff f848 	bl	80017f4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e207      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b5b      	ldr	r3, [pc, #364]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xc0>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff f838 	bl	80017f4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff f834 	bl	80017f4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1f3      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b51      	ldr	r3, [pc, #324]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0xe8>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b6:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1c7      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4937      	ldr	r1, [pc, #220]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <HAL_RCC_OscConfig+0x244>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe ffed 	bl	80017f4 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe ffe9 	bl	80017f4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1a8      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4925      	ldr	r1, [pc, #148]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_RCC_OscConfig+0x244>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe ffcc 	bl	80017f4 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe ffc8 	bl	80017f4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e187      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d036      	beq.n	80028f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_RCC_OscConfig+0x248>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe ffac 	bl	80017f4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe ffa8 	bl	80017f4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e167      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x200>
 80028be:	e01b      	b.n	80028f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_OscConfig+0x248>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe ff95 	bl	80017f4 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	e00e      	b.n	80028ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7fe ff91 	bl	80017f4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d907      	bls.n	80028ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e150      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
 80028e0:	40023800 	.word	0x40023800
 80028e4:	42470000 	.word	0x42470000
 80028e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ea      	bne.n	80028ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8097 	beq.w	8002a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290a:	4b81      	ldr	r3, [pc, #516]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	4b7d      	ldr	r3, [pc, #500]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a7c      	ldr	r2, [pc, #496]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b7a      	ldr	r3, [pc, #488]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002932:	2301      	movs	r3, #1
 8002934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	4b77      	ldr	r3, [pc, #476]	; (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002942:	4b74      	ldr	r3, [pc, #464]	; (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a73      	ldr	r2, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7fe ff51 	bl	80017f4 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7fe ff4d 	bl	80017f4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e10c      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <HAL_RCC_OscConfig+0x474>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x2ea>
 800297c:	4b64      	ldr	r3, [pc, #400]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a63      	ldr	r2, [pc, #396]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
 8002988:	e01c      	b.n	80029c4 <HAL_RCC_OscConfig+0x324>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x30c>
 8002992:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	4a5e      	ldr	r2, [pc, #376]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6713      	str	r3, [r2, #112]	; 0x70
 800299e:	4b5c      	ldr	r3, [pc, #368]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a5b      	ldr	r2, [pc, #364]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0x324>
 80029ac:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
 80029b8:	4b55      	ldr	r3, [pc, #340]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a54      	ldr	r2, [pc, #336]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029be:	f023 0304 	bic.w	r3, r3, #4
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe ff12 	bl	80017f4 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe ff0e 	bl	80017f4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0cb      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ee      	beq.n	80029d4 <HAL_RCC_OscConfig+0x334>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f8:	f7fe fefc 	bl	80017f4 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe fef8 	bl	80017f4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0b5      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ee      	bne.n	8002a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80a1 	beq.w	8002b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a3e:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d05c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d141      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fecc 	bl	80017f4 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fec8 	bl	80017f4 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e087      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	3b01      	subs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	491b      	ldr	r1, [pc, #108]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fea1 	bl	80017f4 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe fe9d 	bl	80017f4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e05c      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x416>
 8002ad4:	e054      	b.n	8002b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe8a 	bl	80017f4 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fe86 	bl	80017f4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e045      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x444>
 8002b02:	e03d      	b.n	8002b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e038      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x4ec>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d028      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d121      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d11a      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d111      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	3b01      	subs	r3, #1
 8002b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800

08002b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0cc      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d90c      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b8      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be4:	4b59      	ldr	r3, [pc, #356]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	494d      	ldr	r1, [pc, #308]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d044      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d119      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e067      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4934      	ldr	r1, [pc, #208]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c80:	f7fe fdb8 	bl	80017f4 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fe fdb4 	bl	80017f4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d20c      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e032      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4916      	ldr	r1, [pc, #88]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	490e      	ldr	r1, [pc, #56]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d16:	f000 f821 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490a      	ldr	r1, [pc, #40]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1c8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fd18 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023c00 	.word	0x40023c00
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08004d5c 	.word	0x08004d5c
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000004 	.word	0x20000004

08002d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d60:	b094      	sub	sp, #80	; 0x50
 8002d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
 8002d68:	2300      	movs	r3, #0
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d74:	4b79      	ldr	r3, [pc, #484]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d00d      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x40>
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	f200 80e1 	bhi.w	8002f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x34>
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d8e:	e0db      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d90:	4b73      	ldr	r3, [pc, #460]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d94:	e0db      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d9a:	e0d8      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d9c:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da6:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db2:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	2200      	movs	r2, #0
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dce:	4622      	mov	r2, r4
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	f04f 0000 	mov.w	r0, #0
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	0159      	lsls	r1, r3, #5
 8002ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de0:	0150      	lsls	r0, r2, #5
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4621      	mov	r1, r4
 8002de8:	1a51      	subs	r1, r2, r1
 8002dea:	6139      	str	r1, [r7, #16]
 8002dec:	4629      	mov	r1, r5
 8002dee:	eb63 0301 	sbc.w	r3, r3, r1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e00:	4659      	mov	r1, fp
 8002e02:	018b      	lsls	r3, r1, #6
 8002e04:	4651      	mov	r1, sl
 8002e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	018a      	lsls	r2, r1, #6
 8002e0e:	4651      	mov	r1, sl
 8002e10:	ebb2 0801 	subs.w	r8, r2, r1
 8002e14:	4659      	mov	r1, fp
 8002e16:	eb63 0901 	sbc.w	r9, r3, r1
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e2e:	4690      	mov	r8, r2
 8002e30:	4699      	mov	r9, r3
 8002e32:	4623      	mov	r3, r4
 8002e34:	eb18 0303 	adds.w	r3, r8, r3
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	eb49 0303 	adc.w	r3, r9, r3
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e4e:	4629      	mov	r1, r5
 8002e50:	024b      	lsls	r3, r1, #9
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e58:	4621      	mov	r1, r4
 8002e5a:	024a      	lsls	r2, r1, #9
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e62:	2200      	movs	r2, #0
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e6c:	f7fd fe6e 	bl	8000b4c <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e78:	e058      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	2200      	movs	r2, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	4611      	mov	r1, r2
 8002e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e94:	4642      	mov	r2, r8
 8002e96:	464b      	mov	r3, r9
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	0159      	lsls	r1, r3, #5
 8002ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea6:	0150      	lsls	r0, r2, #5
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4641      	mov	r1, r8
 8002eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	00eb      	lsls	r3, r5, #3
 8002ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ee2:	00e2      	lsls	r2, r4, #3
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	4643      	mov	r3, r8
 8002eea:	18e3      	adds	r3, r4, r3
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	464b      	mov	r3, r9
 8002ef0:	eb45 0303 	adc.w	r3, r5, r3
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f02:	4629      	mov	r1, r5
 8002f04:	028b      	lsls	r3, r1, #10
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	028a      	lsls	r2, r1, #10
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f16:	2200      	movs	r2, #0
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	61fa      	str	r2, [r7, #28]
 8002f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f20:	f7fd fe14 	bl	8000b4c <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	3301      	adds	r3, #1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f46:	e002      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3750      	adds	r7, #80	; 0x50
 8002f54:	46bd      	mov	sp, r7
 8002f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	007a1200 	.word	0x007a1200

08002f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f84:	f7ff fff0 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	0a9b      	lsrs	r3, r3, #10
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	08004d6c 	.word	0x08004d6c

08002fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fac:	f7ff ffdc 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	0b5b      	lsrs	r3, r3, #13
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08004d6c 	.word	0x08004d6c

08002fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e041      	b.n	8003066 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe faac 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f000 f9c0 	bl	8003394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d001      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e044      	b.n	8003112 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <HAL_TIM_Base_Start_IT+0xb0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d018      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x6c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d013      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x6c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_TIM_Base_Start_IT+0xb4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00e      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x6c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_TIM_Base_Start_IT+0xb8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d009      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x6c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a17      	ldr	r2, [pc, #92]	; (800312c <HAL_TIM_Base_Start_IT+0xbc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x6c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a16      	ldr	r2, [pc, #88]	; (8003130 <HAL_TIM_Base_Start_IT+0xc0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d111      	bne.n	8003100 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d010      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fe:	e007      	b.n	8003110 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40014000 	.word	0x40014000

08003134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d122      	bne.n	8003190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d11b      	bne.n	8003190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0202 	mvn.w	r2, #2
 8003160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8ee 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8e0 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f8f1 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d122      	bne.n	80031e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d11b      	bne.n	80031e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0204 	mvn.w	r2, #4
 80031b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8c4 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 80031d0:	e005      	b.n	80031de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8b6 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8c7 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d122      	bne.n	8003238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d11b      	bne.n	8003238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0208 	mvn.w	r2, #8
 8003208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2204      	movs	r2, #4
 800320e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f89a 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 8003224:	e005      	b.n	8003232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f88c 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f89d 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b10      	cmp	r3, #16
 8003244:	d122      	bne.n	800328c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b10      	cmp	r3, #16
 8003252:	d11b      	bne.n	800328c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0210 	mvn.w	r2, #16
 800325c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2208      	movs	r2, #8
 8003262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f870 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 8003278:	e005      	b.n	8003286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f862 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f873 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0201 	mvn.w	r2, #1
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd ffda 	bl	800126c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b80      	cmp	r3, #128	; 0x80
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8e2 	bl	80034a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d10e      	bne.n	8003310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d107      	bne.n	8003310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f838 	bl	8003380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b20      	cmp	r3, #32
 800331c:	d10e      	bne.n	800333c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b20      	cmp	r3, #32
 800332a:	d107      	bne.n	800333c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0220 	mvn.w	r2, #32
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8ac 	bl	8003494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a34      	ldr	r2, [pc, #208]	; (8003478 <TIM_Base_SetConfig+0xe4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a31      	ldr	r2, [pc, #196]	; (800347c <TIM_Base_SetConfig+0xe8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a30      	ldr	r2, [pc, #192]	; (8003480 <TIM_Base_SetConfig+0xec>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a2f      	ldr	r2, [pc, #188]	; (8003484 <TIM_Base_SetConfig+0xf0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a25      	ldr	r2, [pc, #148]	; (8003478 <TIM_Base_SetConfig+0xe4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01b      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d017      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a22      	ldr	r2, [pc, #136]	; (800347c <TIM_Base_SetConfig+0xe8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a21      	ldr	r2, [pc, #132]	; (8003480 <TIM_Base_SetConfig+0xec>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00f      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a20      	ldr	r2, [pc, #128]	; (8003484 <TIM_Base_SetConfig+0xf0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00b      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <TIM_Base_SetConfig+0xf4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1e      	ldr	r2, [pc, #120]	; (800348c <TIM_Base_SetConfig+0xf8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d003      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <TIM_Base_SetConfig+0xfc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d108      	bne.n	8003430 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <TIM_Base_SetConfig+0xe4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d103      	bne.n	8003464 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	615a      	str	r2, [r3, #20]
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40010000 	.word	0x40010000
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800
 8003484:	40000c00 	.word	0x40000c00
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800

08003494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e03f      	b.n	800354e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe f85e 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2224      	movs	r2, #36	; 0x24
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f829 	bl	8003558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800355c:	b0c0      	sub	sp, #256	; 0x100
 800355e:	af00      	add	r7, sp, #0
 8003560:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	68d9      	ldr	r1, [r3, #12]
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	ea40 0301 	orr.w	r3, r0, r1
 8003580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	431a      	orrs	r2, r3
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035b0:	f021 010c 	bic.w	r1, r1, #12
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035be:	430b      	orrs	r3, r1
 80035c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d2:	6999      	ldr	r1, [r3, #24]
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	ea40 0301 	orr.w	r3, r0, r1
 80035de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b8f      	ldr	r3, [pc, #572]	; (8003824 <UART_SetConfig+0x2cc>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d005      	beq.n	80035f8 <UART_SetConfig+0xa0>
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b8d      	ldr	r3, [pc, #564]	; (8003828 <UART_SetConfig+0x2d0>)
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d104      	bne.n	8003602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035f8:	f7ff fcd6 	bl	8002fa8 <HAL_RCC_GetPCLK2Freq>
 80035fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003600:	e003      	b.n	800360a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003602:	f7ff fcbd 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8003606:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003614:	f040 810c 	bne.w	8003830 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361c:	2200      	movs	r2, #0
 800361e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003622:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800362a:	4622      	mov	r2, r4
 800362c:	462b      	mov	r3, r5
 800362e:	1891      	adds	r1, r2, r2
 8003630:	65b9      	str	r1, [r7, #88]	; 0x58
 8003632:	415b      	adcs	r3, r3
 8003634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800363a:	4621      	mov	r1, r4
 800363c:	eb12 0801 	adds.w	r8, r2, r1
 8003640:	4629      	mov	r1, r5
 8003642:	eb43 0901 	adc.w	r9, r3, r1
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800365a:	4690      	mov	r8, r2
 800365c:	4699      	mov	r9, r3
 800365e:	4623      	mov	r3, r4
 8003660:	eb18 0303 	adds.w	r3, r8, r3
 8003664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003668:	462b      	mov	r3, r5
 800366a:	eb49 0303 	adc.w	r3, r9, r3
 800366e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800367e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003686:	460b      	mov	r3, r1
 8003688:	18db      	adds	r3, r3, r3
 800368a:	653b      	str	r3, [r7, #80]	; 0x50
 800368c:	4613      	mov	r3, r2
 800368e:	eb42 0303 	adc.w	r3, r2, r3
 8003692:	657b      	str	r3, [r7, #84]	; 0x54
 8003694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003698:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800369c:	f7fd fa56 	bl	8000b4c <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4b61      	ldr	r3, [pc, #388]	; (800382c <UART_SetConfig+0x2d4>)
 80036a6:	fba3 2302 	umull	r2, r3, r3, r2
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	011c      	lsls	r4, r3, #4
 80036ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036c0:	4642      	mov	r2, r8
 80036c2:	464b      	mov	r3, r9
 80036c4:	1891      	adds	r1, r2, r2
 80036c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80036c8:	415b      	adcs	r3, r3
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036d0:	4641      	mov	r1, r8
 80036d2:	eb12 0a01 	adds.w	sl, r2, r1
 80036d6:	4649      	mov	r1, r9
 80036d8:	eb43 0b01 	adc.w	fp, r3, r1
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f0:	4692      	mov	sl, r2
 80036f2:	469b      	mov	fp, r3
 80036f4:	4643      	mov	r3, r8
 80036f6:	eb1a 0303 	adds.w	r3, sl, r3
 80036fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036fe:	464b      	mov	r3, r9
 8003700:	eb4b 0303 	adc.w	r3, fp, r3
 8003704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003714:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003718:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800371c:	460b      	mov	r3, r1
 800371e:	18db      	adds	r3, r3, r3
 8003720:	643b      	str	r3, [r7, #64]	; 0x40
 8003722:	4613      	mov	r3, r2
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
 800372a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800372e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003732:	f7fd fa0b 	bl	8000b4c <__aeabi_uldivmod>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4611      	mov	r1, r2
 800373c:	4b3b      	ldr	r3, [pc, #236]	; (800382c <UART_SetConfig+0x2d4>)
 800373e:	fba3 2301 	umull	r2, r3, r3, r1
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2264      	movs	r2, #100	; 0x64
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	1acb      	subs	r3, r1, r3
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003752:	4b36      	ldr	r3, [pc, #216]	; (800382c <UART_SetConfig+0x2d4>)
 8003754:	fba3 2302 	umull	r2, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003760:	441c      	add	r4, r3
 8003762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003766:	2200      	movs	r2, #0
 8003768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800376c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003770:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003774:	4642      	mov	r2, r8
 8003776:	464b      	mov	r3, r9
 8003778:	1891      	adds	r1, r2, r2
 800377a:	63b9      	str	r1, [r7, #56]	; 0x38
 800377c:	415b      	adcs	r3, r3
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003784:	4641      	mov	r1, r8
 8003786:	1851      	adds	r1, r2, r1
 8003788:	6339      	str	r1, [r7, #48]	; 0x30
 800378a:	4649      	mov	r1, r9
 800378c:	414b      	adcs	r3, r1
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800379c:	4659      	mov	r1, fp
 800379e:	00cb      	lsls	r3, r1, #3
 80037a0:	4651      	mov	r1, sl
 80037a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a6:	4651      	mov	r1, sl
 80037a8:	00ca      	lsls	r2, r1, #3
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	4642      	mov	r2, r8
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037b8:	464b      	mov	r3, r9
 80037ba:	460a      	mov	r2, r1
 80037bc:	eb42 0303 	adc.w	r3, r2, r3
 80037c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037d8:	460b      	mov	r3, r1
 80037da:	18db      	adds	r3, r3, r3
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037de:	4613      	mov	r3, r2
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037ee:	f7fd f9ad 	bl	8000b4c <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <UART_SetConfig+0x2d4>)
 80037f8:	fba3 1302 	umull	r1, r3, r3, r2
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	2164      	movs	r1, #100	; 0x64
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	3332      	adds	r3, #50	; 0x32
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <UART_SetConfig+0x2d4>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	f003 0207 	and.w	r2, r3, #7
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4422      	add	r2, r4
 800381e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003820:	e106      	b.n	8003a30 <UART_SetConfig+0x4d8>
 8003822:	bf00      	nop
 8003824:	40011000 	.word	0x40011000
 8003828:	40011400 	.word	0x40011400
 800382c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003834:	2200      	movs	r2, #0
 8003836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800383a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800383e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003842:	4642      	mov	r2, r8
 8003844:	464b      	mov	r3, r9
 8003846:	1891      	adds	r1, r2, r2
 8003848:	6239      	str	r1, [r7, #32]
 800384a:	415b      	adcs	r3, r3
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003852:	4641      	mov	r1, r8
 8003854:	1854      	adds	r4, r2, r1
 8003856:	4649      	mov	r1, r9
 8003858:	eb43 0501 	adc.w	r5, r3, r1
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	00eb      	lsls	r3, r5, #3
 8003866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800386a:	00e2      	lsls	r2, r4, #3
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
 8003870:	4643      	mov	r3, r8
 8003872:	18e3      	adds	r3, r4, r3
 8003874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003878:	464b      	mov	r3, r9
 800387a:	eb45 0303 	adc.w	r3, r5, r3
 800387e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800388e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800389e:	4629      	mov	r1, r5
 80038a0:	008b      	lsls	r3, r1, #2
 80038a2:	4621      	mov	r1, r4
 80038a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a8:	4621      	mov	r1, r4
 80038aa:	008a      	lsls	r2, r1, #2
 80038ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038b0:	f7fd f94c 	bl	8000b4c <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <UART_SetConfig+0x4e4>)
 80038ba:	fba3 2302 	umull	r2, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	011c      	lsls	r4, r3, #4
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	1891      	adds	r1, r2, r2
 80038da:	61b9      	str	r1, [r7, #24]
 80038dc:	415b      	adcs	r3, r3
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e4:	4641      	mov	r1, r8
 80038e6:	1851      	adds	r1, r2, r1
 80038e8:	6139      	str	r1, [r7, #16]
 80038ea:	4649      	mov	r1, r9
 80038ec:	414b      	adcs	r3, r1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038fc:	4659      	mov	r1, fp
 80038fe:	00cb      	lsls	r3, r1, #3
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003906:	4651      	mov	r1, sl
 8003908:	00ca      	lsls	r2, r1, #3
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	4603      	mov	r3, r0
 8003910:	4642      	mov	r2, r8
 8003912:	189b      	adds	r3, r3, r2
 8003914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003918:	464b      	mov	r3, r9
 800391a:	460a      	mov	r2, r1
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	67bb      	str	r3, [r7, #120]	; 0x78
 800392e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800393c:	4649      	mov	r1, r9
 800393e:	008b      	lsls	r3, r1, #2
 8003940:	4641      	mov	r1, r8
 8003942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003946:	4641      	mov	r1, r8
 8003948:	008a      	lsls	r2, r1, #2
 800394a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800394e:	f7fd f8fd 	bl	8000b4c <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4611      	mov	r1, r2
 8003958:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <UART_SetConfig+0x4e4>)
 800395a:	fba3 2301 	umull	r2, r3, r3, r1
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2264      	movs	r2, #100	; 0x64
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	1acb      	subs	r3, r1, r3
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	3332      	adds	r3, #50	; 0x32
 800396c:	4a33      	ldr	r2, [pc, #204]	; (8003a3c <UART_SetConfig+0x4e4>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003978:	441c      	add	r4, r3
 800397a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397e:	2200      	movs	r2, #0
 8003980:	673b      	str	r3, [r7, #112]	; 0x70
 8003982:	677a      	str	r2, [r7, #116]	; 0x74
 8003984:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	1891      	adds	r1, r2, r2
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	415b      	adcs	r3, r3
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003998:	4641      	mov	r1, r8
 800399a:	1851      	adds	r1, r2, r1
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	4649      	mov	r1, r9
 80039a0:	414b      	adcs	r3, r1
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039b0:	4659      	mov	r1, fp
 80039b2:	00cb      	lsls	r3, r1, #3
 80039b4:	4651      	mov	r1, sl
 80039b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ba:	4651      	mov	r1, sl
 80039bc:	00ca      	lsls	r2, r1, #3
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	4642      	mov	r2, r8
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ca:	464b      	mov	r3, r9
 80039cc:	460a      	mov	r2, r1
 80039ce:	eb42 0303 	adc.w	r3, r2, r3
 80039d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	663b      	str	r3, [r7, #96]	; 0x60
 80039de:	667a      	str	r2, [r7, #100]	; 0x64
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039ec:	4649      	mov	r1, r9
 80039ee:	008b      	lsls	r3, r1, #2
 80039f0:	4641      	mov	r1, r8
 80039f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f6:	4641      	mov	r1, r8
 80039f8:	008a      	lsls	r2, r1, #2
 80039fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039fe:	f7fd f8a5 	bl	8000b4c <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <UART_SetConfig+0x4e4>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <UART_SetConfig+0x4e4>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	f003 020f 	and.w	r2, r3, #15
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4422      	add	r2, r4
 8003a2e:	609a      	str	r2, [r3, #8]
}
 8003a30:	bf00      	nop
 8003a32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a36:	46bd      	mov	sp, r7
 8003a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3c:	51eb851f 	.word	0x51eb851f

08003a40 <arm_rfft_32_fast_init_f32>:
 8003a40:	b178      	cbz	r0, 8003a62 <arm_rfft_32_fast_init_f32+0x22>
 8003a42:	b430      	push	{r4, r5}
 8003a44:	4908      	ldr	r1, [pc, #32]	; (8003a68 <arm_rfft_32_fast_init_f32+0x28>)
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <arm_rfft_32_fast_init_f32+0x2c>)
 8003a48:	2310      	movs	r3, #16
 8003a4a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003a4e:	8003      	strh	r3, [r0, #0]
 8003a50:	2520      	movs	r5, #32
 8003a52:	2414      	movs	r4, #20
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <arm_rfft_32_fast_init_f32+0x30>)
 8003a56:	8205      	strh	r5, [r0, #16]
 8003a58:	8184      	strh	r4, [r0, #12]
 8003a5a:	6143      	str	r3, [r0, #20]
 8003a5c:	bc30      	pop	{r4, r5}
 8003a5e:	2000      	movs	r0, #0
 8003a60:	4770      	bx	lr
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	4770      	bx	lr
 8003a68:	08005d24 	.word	0x08005d24
 8003a6c:	0800a65c 	.word	0x0800a65c
 8003a70:	080133dc 	.word	0x080133dc

08003a74 <arm_rfft_64_fast_init_f32>:
 8003a74:	b178      	cbz	r0, 8003a96 <arm_rfft_64_fast_init_f32+0x22>
 8003a76:	b430      	push	{r4, r5}
 8003a78:	4908      	ldr	r1, [pc, #32]	; (8003a9c <arm_rfft_64_fast_init_f32+0x28>)
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <arm_rfft_64_fast_init_f32+0x2c>)
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003a82:	8003      	strh	r3, [r0, #0]
 8003a84:	2540      	movs	r5, #64	; 0x40
 8003a86:	2430      	movs	r4, #48	; 0x30
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <arm_rfft_64_fast_init_f32+0x30>)
 8003a8a:	8205      	strh	r5, [r0, #16]
 8003a8c:	8184      	strh	r4, [r0, #12]
 8003a8e:	6143      	str	r3, [r0, #20]
 8003a90:	bc30      	pop	{r4, r5}
 8003a92:	2000      	movs	r0, #0
 8003a94:	4770      	bx	lr
 8003a96:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9a:	4770      	bx	lr
 8003a9c:	08007e7c 	.word	0x08007e7c
 8003aa0:	0800eedc 	.word	0x0800eedc
 8003aa4:	08017c5c 	.word	0x08017c5c

08003aa8 <arm_rfft_256_fast_init_f32>:
 8003aa8:	b180      	cbz	r0, 8003acc <arm_rfft_256_fast_init_f32+0x24>
 8003aaa:	b430      	push	{r4, r5}
 8003aac:	4909      	ldr	r1, [pc, #36]	; (8003ad4 <arm_rfft_256_fast_init_f32+0x2c>)
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <arm_rfft_256_fast_init_f32+0x30>)
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003ab6:	8003      	strh	r3, [r0, #0]
 8003ab8:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003abc:	24d0      	movs	r4, #208	; 0xd0
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <arm_rfft_256_fast_init_f32+0x34>)
 8003ac0:	8205      	strh	r5, [r0, #16]
 8003ac2:	8184      	strh	r4, [r0, #12]
 8003ac4:	6143      	str	r3, [r0, #20]
 8003ac6:	bc30      	pop	{r4, r5}
 8003ac8:	2000      	movs	r0, #0
 8003aca:	4770      	bx	lr
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	08005b84 	.word	0x08005b84
 8003ad8:	0800a25c 	.word	0x0800a25c
 8003adc:	08012fdc 	.word	0x08012fdc

08003ae0 <arm_rfft_512_fast_init_f32>:
 8003ae0:	b190      	cbz	r0, 8003b08 <arm_rfft_512_fast_init_f32+0x28>
 8003ae2:	b430      	push	{r4, r5}
 8003ae4:	490a      	ldr	r1, [pc, #40]	; (8003b10 <arm_rfft_512_fast_init_f32+0x30>)
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <arm_rfft_512_fast_init_f32+0x34>)
 8003ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aec:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003af0:	8003      	strh	r3, [r0, #0]
 8003af2:	f44f 7500 	mov.w	r5, #512	; 0x200
 8003af6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <arm_rfft_512_fast_init_f32+0x38>)
 8003afc:	8205      	strh	r5, [r0, #16]
 8003afe:	8184      	strh	r4, [r0, #12]
 8003b00:	6143      	str	r3, [r0, #20]
 8003b02:	bc30      	pop	{r4, r5}
 8003b04:	2000      	movs	r0, #0
 8003b06:	4770      	bx	lr
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	08007b0c 	.word	0x08007b0c
 8003b14:	0800e6dc 	.word	0x0800e6dc
 8003b18:	0801745c 	.word	0x0801745c

08003b1c <arm_rfft_1024_fast_init_f32>:
 8003b1c:	b190      	cbz	r0, 8003b44 <arm_rfft_1024_fast_init_f32+0x28>
 8003b1e:	b430      	push	{r4, r5}
 8003b20:	490a      	ldr	r1, [pc, #40]	; (8003b4c <arm_rfft_1024_fast_init_f32+0x30>)
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <arm_rfft_1024_fast_init_f32+0x34>)
 8003b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b28:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003b2c:	8003      	strh	r3, [r0, #0]
 8003b2e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003b32:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <arm_rfft_1024_fast_init_f32+0x38>)
 8003b38:	8205      	strh	r5, [r0, #16]
 8003b3a:	8184      	strh	r4, [r0, #12]
 8003b3c:	6143      	str	r3, [r0, #20]
 8003b3e:	bc30      	pop	{r4, r5}
 8003b40:	2000      	movs	r0, #0
 8003b42:	4770      	bx	lr
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	08007edc 	.word	0x08007edc
 8003b50:	0800efdc 	.word	0x0800efdc
 8003b54:	0800ffdc 	.word	0x0800ffdc

08003b58 <arm_rfft_2048_fast_init_f32>:
 8003b58:	b190      	cbz	r0, 8003b80 <arm_rfft_2048_fast_init_f32+0x28>
 8003b5a:	b430      	push	{r4, r5}
 8003b5c:	490a      	ldr	r1, [pc, #40]	; (8003b88 <arm_rfft_2048_fast_init_f32+0x30>)
 8003b5e:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <arm_rfft_2048_fast_init_f32+0x34>)
 8003b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b64:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003b68:	8003      	strh	r3, [r0, #0]
 8003b6a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003b6e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8003b72:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <arm_rfft_2048_fast_init_f32+0x38>)
 8003b74:	8205      	strh	r5, [r0, #16]
 8003b76:	8184      	strh	r4, [r0, #12]
 8003b78:	6143      	str	r3, [r0, #20]
 8003b7a:	bc30      	pop	{r4, r5}
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	4770      	bx	lr
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	08004d74 	.word	0x08004d74
 8003b8c:	0800825c 	.word	0x0800825c
 8003b90:	08010fdc 	.word	0x08010fdc

08003b94 <arm_rfft_4096_fast_init_f32>:
 8003b94:	b190      	cbz	r0, 8003bbc <arm_rfft_4096_fast_init_f32+0x28>
 8003b96:	b430      	push	{r4, r5}
 8003b98:	490a      	ldr	r1, [pc, #40]	; (8003bc4 <arm_rfft_4096_fast_init_f32+0x30>)
 8003b9a:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <arm_rfft_4096_fast_init_f32+0x34>)
 8003b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ba0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003ba4:	8003      	strh	r3, [r0, #0]
 8003ba6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8003baa:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <arm_rfft_4096_fast_init_f32+0x38>)
 8003bb0:	8205      	strh	r5, [r0, #16]
 8003bb2:	8184      	strh	r4, [r0, #12]
 8003bb4:	6143      	str	r3, [r0, #20]
 8003bb6:	bc30      	pop	{r4, r5}
 8003bb8:	2000      	movs	r0, #0
 8003bba:	4770      	bx	lr
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	08005d4c 	.word	0x08005d4c
 8003bc8:	0800a6dc 	.word	0x0800a6dc
 8003bcc:	0801345c 	.word	0x0801345c

08003bd0 <arm_rfft_fast_init_f32>:
 8003bd0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003bd4:	d01f      	beq.n	8003c16 <arm_rfft_fast_init_f32+0x46>
 8003bd6:	d90b      	bls.n	8003bf0 <arm_rfft_fast_init_f32+0x20>
 8003bd8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003bdc:	d019      	beq.n	8003c12 <arm_rfft_fast_init_f32+0x42>
 8003bde:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003be2:	d012      	beq.n	8003c0a <arm_rfft_fast_init_f32+0x3a>
 8003be4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003be8:	d00d      	beq.n	8003c06 <arm_rfft_fast_init_f32+0x36>
 8003bea:	f04f 30ff 	mov.w	r0, #4294967295
 8003bee:	4770      	bx	lr
 8003bf0:	2940      	cmp	r1, #64	; 0x40
 8003bf2:	d00c      	beq.n	8003c0e <arm_rfft_fast_init_f32+0x3e>
 8003bf4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003bf8:	d003      	beq.n	8003c02 <arm_rfft_fast_init_f32+0x32>
 8003bfa:	2920      	cmp	r1, #32
 8003bfc:	d1f5      	bne.n	8003bea <arm_rfft_fast_init_f32+0x1a>
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <arm_rfft_fast_init_f32+0x4c>)
 8003c00:	4718      	bx	r3
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <arm_rfft_fast_init_f32+0x50>)
 8003c04:	4718      	bx	r3
 8003c06:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <arm_rfft_fast_init_f32+0x54>)
 8003c08:	4718      	bx	r3
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <arm_rfft_fast_init_f32+0x58>)
 8003c0c:	4718      	bx	r3
 8003c0e:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <arm_rfft_fast_init_f32+0x5c>)
 8003c10:	e7f6      	b.n	8003c00 <arm_rfft_fast_init_f32+0x30>
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <arm_rfft_fast_init_f32+0x60>)
 8003c14:	e7f4      	b.n	8003c00 <arm_rfft_fast_init_f32+0x30>
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <arm_rfft_fast_init_f32+0x64>)
 8003c18:	e7f2      	b.n	8003c00 <arm_rfft_fast_init_f32+0x30>
 8003c1a:	bf00      	nop
 8003c1c:	08003a41 	.word	0x08003a41
 8003c20:	08003aa9 	.word	0x08003aa9
 8003c24:	08003b1d 	.word	0x08003b1d
 8003c28:	08003b95 	.word	0x08003b95
 8003c2c:	08003a75 	.word	0x08003a75
 8003c30:	08003b59 	.word	0x08003b59
 8003c34:	08003ae1 	.word	0x08003ae1

08003c38 <stage_rfft_f32>:
 8003c38:	b410      	push	{r4}
 8003c3a:	edd1 7a00 	vldr	s15, [r1]
 8003c3e:	ed91 7a01 	vldr	s14, [r1, #4]
 8003c42:	8804      	ldrh	r4, [r0, #0]
 8003c44:	6940      	ldr	r0, [r0, #20]
 8003c46:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003c4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c4e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8003c52:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c5a:	3c01      	subs	r4, #1
 8003c5c:	ee26 7a84 	vmul.f32	s14, s13, s8
 8003c60:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003c64:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8003c68:	ed82 7a00 	vstr	s14, [r2]
 8003c6c:	edc2 7a01 	vstr	s15, [r2, #4]
 8003c70:	3010      	adds	r0, #16
 8003c72:	3210      	adds	r2, #16
 8003c74:	3b08      	subs	r3, #8
 8003c76:	3110      	adds	r1, #16
 8003c78:	ed11 5a02 	vldr	s10, [r1, #-8]
 8003c7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c80:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003c84:	edd3 4a03 	vldr	s9, [r3, #12]
 8003c88:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003c8c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8003c90:	ee77 5a45 	vsub.f32	s11, s14, s10
 8003c94:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003c98:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8003c9c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8003ca0:	ee66 5a25 	vmul.f32	s11, s12, s11
 8003ca4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003ca8:	ee37 7a23 	vadd.f32	s14, s14, s7
 8003cac:	ee66 6a85 	vmul.f32	s13, s13, s10
 8003cb0:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003cb4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003cb8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003cbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003cc0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003cc4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003cc8:	3c01      	subs	r4, #1
 8003cca:	ed02 7a02 	vstr	s14, [r2, #-8]
 8003cce:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003cd2:	f1a3 0308 	sub.w	r3, r3, #8
 8003cd6:	f101 0108 	add.w	r1, r1, #8
 8003cda:	f100 0008 	add.w	r0, r0, #8
 8003cde:	f102 0208 	add.w	r2, r2, #8
 8003ce2:	d1c9      	bne.n	8003c78 <stage_rfft_f32+0x40>
 8003ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop

08003cec <merge_rfft_f32>:
 8003cec:	b410      	push	{r4}
 8003cee:	edd1 7a00 	vldr	s15, [r1]
 8003cf2:	edd1 6a01 	vldr	s13, [r1, #4]
 8003cf6:	8804      	ldrh	r4, [r0, #0]
 8003cf8:	6940      	ldr	r0, [r0, #20]
 8003cfa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003cfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d02:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8003d06:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003d0a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003d0e:	3c01      	subs	r4, #1
 8003d10:	ed82 7a00 	vstr	s14, [r2]
 8003d14:	edc2 7a01 	vstr	s15, [r2, #4]
 8003d18:	b3dc      	cbz	r4, 8003d92 <merge_rfft_f32+0xa6>
 8003d1a:	00e3      	lsls	r3, r4, #3
 8003d1c:	3b08      	subs	r3, #8
 8003d1e:	440b      	add	r3, r1
 8003d20:	3010      	adds	r0, #16
 8003d22:	3210      	adds	r2, #16
 8003d24:	3110      	adds	r1, #16
 8003d26:	ed11 5a02 	vldr	s10, [r1, #-8]
 8003d2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d2e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003d32:	edd3 4a03 	vldr	s9, [r3, #12]
 8003d36:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003d3a:	ed10 6a01 	vldr	s12, [r0, #-4]
 8003d3e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8003d42:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003d46:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8003d4a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8003d4e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8003d52:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003d56:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003d5a:	ee66 6a85 	vmul.f32	s13, s13, s10
 8003d5e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003d62:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003d66:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003d6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003d72:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003d76:	3c01      	subs	r4, #1
 8003d78:	ed02 7a02 	vstr	s14, [r2, #-8]
 8003d7c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003d80:	f1a3 0308 	sub.w	r3, r3, #8
 8003d84:	f101 0108 	add.w	r1, r1, #8
 8003d88:	f100 0008 	add.w	r0, r0, #8
 8003d8c:	f102 0208 	add.w	r2, r2, #8
 8003d90:	d1c9      	bne.n	8003d26 <merge_rfft_f32+0x3a>
 8003d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <arm_rfft_fast_f32>:
 8003d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9c:	8a05      	ldrh	r5, [r0, #16]
 8003d9e:	086d      	lsrs	r5, r5, #1
 8003da0:	8005      	strh	r5, [r0, #0]
 8003da2:	4604      	mov	r4, r0
 8003da4:	4616      	mov	r6, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	b14b      	cbz	r3, 8003dbe <arm_rfft_fast_f32+0x26>
 8003daa:	f7ff ff9f 	bl	8003cec <merge_rfft_f32>
 8003dae:	462a      	mov	r2, r5
 8003db0:	4631      	mov	r1, r6
 8003db2:	4620      	mov	r0, r4
 8003db4:	2301      	movs	r3, #1
 8003db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	f000 bb33 	b.w	8004424 <arm_cfft_f32>
 8003dbe:	460f      	mov	r7, r1
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f000 fb2e 	bl	8004424 <arm_cfft_f32>
 8003dc8:	4632      	mov	r2, r6
 8003dca:	4639      	mov	r1, r7
 8003dcc:	4620      	mov	r0, r4
 8003dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd2:	f7ff bf31 	b.w	8003c38 <stage_rfft_f32>
 8003dd6:	bf00      	nop

08003dd8 <arm_cfft_radix8by2_f32>:
 8003dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ddc:	ed2d 8b08 	vpush	{d8-d11}
 8003de0:	4607      	mov	r7, r0
 8003de2:	4608      	mov	r0, r1
 8003de4:	f8b7 c000 	ldrh.w	ip, [r7]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8003dee:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8003df2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003df6:	f000 80b0 	beq.w	8003f5a <arm_cfft_radix8by2_f32+0x182>
 8003dfa:	008c      	lsls	r4, r1, #2
 8003dfc:	3410      	adds	r4, #16
 8003dfe:	f100 0310 	add.w	r3, r0, #16
 8003e02:	1906      	adds	r6, r0, r4
 8003e04:	3210      	adds	r2, #16
 8003e06:	4444      	add	r4, r8
 8003e08:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8003e0c:	f108 0510 	add.w	r5, r8, #16
 8003e10:	ed15 2a04 	vldr	s4, [r5, #-16]
 8003e14:	ed55 2a03 	vldr	s5, [r5, #-12]
 8003e18:	ed54 4a04 	vldr	s9, [r4, #-16]
 8003e1c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003e20:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003e24:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003e28:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003e2c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003e30:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003e34:	ed56 6a04 	vldr	s13, [r6, #-16]
 8003e38:	ed16 3a03 	vldr	s6, [r6, #-12]
 8003e3c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003e40:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003e44:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003e48:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003e4c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003e50:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003e54:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003e58:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003e5c:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003e60:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003e64:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003e68:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003e6c:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003e70:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003e74:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003e78:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003e7c:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003e80:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003e84:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003e88:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003e8c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003e90:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003e94:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003e98:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003e9c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003ea0:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003ea4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003ea8:	ee27 8a26 	vmul.f32	s16, s14, s13
 8003eac:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8003eb0:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003eb4:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003eb8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8003ebc:	ee27 7a03 	vmul.f32	s14, s14, s6
 8003ec0:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003ec4:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003ec8:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003ecc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003ed0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003ed4:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003ed8:	ed05 7a03 	vstr	s14, [r5, #-12]
 8003edc:	ed05 3a04 	vstr	s6, [r5, #-16]
 8003ee0:	ed04 4a04 	vstr	s8, [r4, #-16]
 8003ee4:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003ee8:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003eec:	ee76 6a41 	vsub.f32	s13, s12, s2
 8003ef0:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003ef4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003ef8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003efc:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003f00:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003f04:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003f08:	ee25 4a25 	vmul.f32	s8, s10, s11
 8003f0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003f10:	ee25 5a07 	vmul.f32	s10, s10, s14
 8003f14:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003f18:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003f1c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003f20:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003f24:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003f28:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8003f2c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003f30:	3310      	adds	r3, #16
 8003f32:	4563      	cmp	r3, ip
 8003f34:	ed45 5a02 	vstr	s11, [r5, #-8]
 8003f38:	f106 0610 	add.w	r6, r6, #16
 8003f3c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003f40:	f102 0210 	add.w	r2, r2, #16
 8003f44:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003f48:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003f4c:	f105 0510 	add.w	r5, r5, #16
 8003f50:	f104 0410 	add.w	r4, r4, #16
 8003f54:	f47f af5c 	bne.w	8003e10 <arm_cfft_radix8by2_f32+0x38>
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	b28c      	uxth	r4, r1
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f000 faf8 	bl	8004554 <arm_radix8_butterfly_f32>
 8003f64:	ecbd 8b08 	vpop	{d8-d11}
 8003f68:	4621      	mov	r1, r4
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f74:	f000 baee 	b.w	8004554 <arm_radix8_butterfly_f32>

08003f78 <arm_cfft_radix8by4_f32>:
 8003f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7c:	ed2d 8b0a 	vpush	{d8-d12}
 8003f80:	b08d      	sub	sp, #52	; 0x34
 8003f82:	460d      	mov	r5, r1
 8003f84:	910b      	str	r1, [sp, #44]	; 0x2c
 8003f86:	8801      	ldrh	r1, [r0, #0]
 8003f88:	6842      	ldr	r2, [r0, #4]
 8003f8a:	900a      	str	r0, [sp, #40]	; 0x28
 8003f8c:	0849      	lsrs	r1, r1, #1
 8003f8e:	008b      	lsls	r3, r1, #2
 8003f90:	18ee      	adds	r6, r5, r3
 8003f92:	18f0      	adds	r0, r6, r3
 8003f94:	edd0 5a00 	vldr	s11, [r0]
 8003f98:	edd5 7a00 	vldr	s15, [r5]
 8003f9c:	ed96 7a00 	vldr	s14, [r6]
 8003fa0:	edd0 3a01 	vldr	s7, [r0, #4]
 8003fa4:	ed96 4a01 	vldr	s8, [r6, #4]
 8003fa8:	ed95 5a01 	vldr	s10, [r5, #4]
 8003fac:	9008      	str	r0, [sp, #32]
 8003fae:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003fb2:	18c7      	adds	r7, r0, r3
 8003fb4:	edd7 4a00 	vldr	s9, [r7]
 8003fb8:	ed97 3a01 	vldr	s6, [r7, #4]
 8003fbc:	9701      	str	r7, [sp, #4]
 8003fbe:	ee77 6a06 	vadd.f32	s13, s14, s12
 8003fc2:	462c      	mov	r4, r5
 8003fc4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003fc8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003fcc:	ee16 ca90 	vmov	ip, s13
 8003fd0:	f844 cb08 	str.w	ip, [r4], #8
 8003fd4:	ee75 6a23 	vadd.f32	s13, s10, s7
 8003fd8:	edd6 5a01 	vldr	s11, [r6, #4]
 8003fdc:	edd7 2a01 	vldr	s5, [r7, #4]
 8003fe0:	9404      	str	r4, [sp, #16]
 8003fe2:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003fe6:	ee74 3a27 	vadd.f32	s7, s8, s15
 8003fea:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003fee:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8003ff2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003ff6:	0849      	lsrs	r1, r1, #1
 8003ff8:	f102 0e08 	add.w	lr, r2, #8
 8003ffc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8004000:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8004004:	9109      	str	r1, [sp, #36]	; 0x24
 8004006:	ee35 4a47 	vsub.f32	s8, s10, s14
 800400a:	f1a1 0902 	sub.w	r9, r1, #2
 800400e:	f8cd e00c 	str.w	lr, [sp, #12]
 8004012:	4631      	mov	r1, r6
 8004014:	ee13 ea90 	vmov	lr, s7
 8004018:	ee36 6a64 	vsub.f32	s12, s12, s9
 800401c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8004020:	4604      	mov	r4, r0
 8004022:	edc5 5a01 	vstr	s11, [r5, #4]
 8004026:	ee37 7a05 	vadd.f32	s14, s14, s10
 800402a:	f841 eb08 	str.w	lr, [r1], #8
 800402e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8004032:	ee16 ea10 	vmov	lr, s12
 8004036:	ed86 5a01 	vstr	s10, [r6, #4]
 800403a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800403e:	f844 eb08 	str.w	lr, [r4], #8
 8004042:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004046:	edc0 6a01 	vstr	s13, [r0, #4]
 800404a:	9405      	str	r4, [sp, #20]
 800404c:	4604      	mov	r4, r0
 800404e:	ee17 0a90 	vmov	r0, s15
 8004052:	9106      	str	r1, [sp, #24]
 8004054:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004058:	f102 0110 	add.w	r1, r2, #16
 800405c:	46bc      	mov	ip, r7
 800405e:	9100      	str	r1, [sp, #0]
 8004060:	f847 0b08 	str.w	r0, [r7], #8
 8004064:	f102 0118 	add.w	r1, r2, #24
 8004068:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800406c:	9102      	str	r1, [sp, #8]
 800406e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8004072:	9007      	str	r0, [sp, #28]
 8004074:	f000 8134 	beq.w	80042e0 <arm_cfft_radix8by4_f32+0x368>
 8004078:	f102 0920 	add.w	r9, r2, #32
 800407c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8004080:	9a01      	ldr	r2, [sp, #4]
 8004082:	f8dd a000 	ldr.w	sl, [sp]
 8004086:	3b0c      	subs	r3, #12
 8004088:	4683      	mov	fp, r0
 800408a:	4463      	add	r3, ip
 800408c:	f105 0e10 	add.w	lr, r5, #16
 8004090:	f1a4 010c 	sub.w	r1, r4, #12
 8004094:	f104 0510 	add.w	r5, r4, #16
 8004098:	f1a6 0c0c 	sub.w	ip, r6, #12
 800409c:	f1a2 040c 	sub.w	r4, r2, #12
 80040a0:	f106 0010 	add.w	r0, r6, #16
 80040a4:	3210      	adds	r2, #16
 80040a6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80040aa:	ed55 5a02 	vldr	s11, [r5, #-8]
 80040ae:	ed50 7a02 	vldr	s15, [r0, #-8]
 80040b2:	ed52 1a02 	vldr	s3, [r2, #-8]
 80040b6:	ed55 6a01 	vldr	s13, [r5, #-4]
 80040ba:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80040be:	ed12 1a01 	vldr	s2, [r2, #-4]
 80040c2:	ed10 8a01 	vldr	s16, [r0, #-4]
 80040c6:	ee35 4a25 	vadd.f32	s8, s10, s11
 80040ca:	ee30 6a26 	vadd.f32	s12, s0, s13
 80040ce:	ee37 7a84 	vadd.f32	s14, s15, s8
 80040d2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80040d6:	ee37 7a21 	vadd.f32	s14, s14, s3
 80040da:	ee75 5a65 	vsub.f32	s11, s10, s11
 80040de:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80040e2:	ed10 7a01 	vldr	s14, [r0, #-4]
 80040e6:	ed52 6a01 	vldr	s13, [r2, #-4]
 80040ea:	ee36 7a07 	vadd.f32	s14, s12, s14
 80040ee:	ee78 aa25 	vadd.f32	s21, s16, s11
 80040f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80040f6:	ee70 3a67 	vsub.f32	s7, s0, s15
 80040fa:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80040fe:	ed94 7a02 	vldr	s14, [r4, #8]
 8004102:	ed9c 2a02 	vldr	s4, [ip, #8]
 8004106:	ed91 ba02 	vldr	s22, [r1, #8]
 800410a:	edd3 9a02 	vldr	s19, [r3, #8]
 800410e:	edd4 2a01 	vldr	s5, [r4, #4]
 8004112:	ed9c 9a01 	vldr	s18, [ip, #4]
 8004116:	ed93 5a01 	vldr	s10, [r3, #4]
 800411a:	edd1 0a01 	vldr	s1, [r1, #4]
 800411e:	ee72 6a07 	vadd.f32	s13, s4, s14
 8004122:	ee32 2a47 	vsub.f32	s4, s4, s14
 8004126:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800412a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800412e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8004132:	ee79 2a62 	vsub.f32	s5, s18, s5
 8004136:	ed8c 7a02 	vstr	s14, [ip, #8]
 800413a:	ed91 7a01 	vldr	s14, [r1, #4]
 800413e:	edd3 8a01 	vldr	s17, [r3, #4]
 8004142:	ee34 7a87 	vadd.f32	s14, s9, s14
 8004146:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800414a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800414e:	ee32 9a60 	vsub.f32	s18, s4, s1
 8004152:	ed8c 7a01 	vstr	s14, [ip, #4]
 8004156:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800415a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800415e:	ee73 8a22 	vadd.f32	s17, s6, s5
 8004162:	ee39 9a05 	vadd.f32	s18, s18, s10
 8004166:	ee7a aac1 	vsub.f32	s21, s21, s2
 800416a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800416e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8004172:	ee69 ba07 	vmul.f32	s23, s18, s14
 8004176:	ee6a aa87 	vmul.f32	s21, s21, s14
 800417a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800417e:	ee63 ca87 	vmul.f32	s25, s7, s14
 8004182:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8004186:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800418a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800418e:	ee73 3aea 	vsub.f32	s7, s7, s21
 8004192:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004196:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800419a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800419e:	ee34 4a67 	vsub.f32	s8, s8, s15
 80041a2:	ee76 6acb 	vsub.f32	s13, s13, s22
 80041a6:	ee36 6a48 	vsub.f32	s12, s12, s16
 80041aa:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80041ae:	ed00 7a02 	vstr	s14, [r0, #-8]
 80041b2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80041b6:	edc1 8a01 	vstr	s17, [r1, #4]
 80041ba:	ed81 aa02 	vstr	s20, [r1, #8]
 80041be:	ed59 3a04 	vldr	s7, [r9, #-16]
 80041c2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80041c6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80041ca:	ed59 6a03 	vldr	s13, [r9, #-12]
 80041ce:	ee34 4a61 	vsub.f32	s8, s8, s3
 80041d2:	ee36 6a41 	vsub.f32	s12, s12, s2
 80041d6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80041da:	ee66 9a26 	vmul.f32	s19, s12, s13
 80041de:	ee24 9a23 	vmul.f32	s18, s8, s7
 80041e2:	ee26 6a23 	vmul.f32	s12, s12, s7
 80041e6:	ee24 4a26 	vmul.f32	s8, s8, s13
 80041ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 80041ee:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80041f2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80041f6:	ee36 6a44 	vsub.f32	s12, s12, s8
 80041fa:	ee37 7a64 	vsub.f32	s14, s14, s9
 80041fe:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8004202:	ee79 3a29 	vadd.f32	s7, s18, s19
 8004206:	ee75 6a60 	vsub.f32	s13, s10, s1
 800420a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800420e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004212:	ed45 3a02 	vstr	s7, [r5, #-8]
 8004216:	ed05 6a01 	vstr	s12, [r5, #-4]
 800421a:	ed84 7a01 	vstr	s14, [r4, #4]
 800421e:	ed84 4a02 	vstr	s8, [r4, #8]
 8004222:	ee35 6a81 	vadd.f32	s12, s11, s2
 8004226:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800422a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800422e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8004232:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004236:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800423a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800423e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8004242:	ee26 5a25 	vmul.f32	s10, s12, s11
 8004246:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800424a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800424e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004252:	ee63 6a26 	vmul.f32	s13, s6, s13
 8004256:	ee23 3a25 	vmul.f32	s6, s6, s11
 800425a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800425e:	ee75 5a24 	vadd.f32	s11, s10, s9
 8004262:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8004266:	ee36 7a87 	vadd.f32	s14, s13, s14
 800426a:	f1bb 0b01 	subs.w	fp, fp, #1
 800426e:	ed42 5a02 	vstr	s11, [r2, #-8]
 8004272:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004276:	f10e 0e08 	add.w	lr, lr, #8
 800427a:	ed83 3a02 	vstr	s6, [r3, #8]
 800427e:	ed83 7a01 	vstr	s14, [r3, #4]
 8004282:	f1ac 0c08 	sub.w	ip, ip, #8
 8004286:	f10a 0a08 	add.w	sl, sl, #8
 800428a:	f100 0008 	add.w	r0, r0, #8
 800428e:	f1a1 0108 	sub.w	r1, r1, #8
 8004292:	f109 0910 	add.w	r9, r9, #16
 8004296:	f105 0508 	add.w	r5, r5, #8
 800429a:	f1a4 0408 	sub.w	r4, r4, #8
 800429e:	f108 0818 	add.w	r8, r8, #24
 80042a2:	f102 0208 	add.w	r2, r2, #8
 80042a6:	f1a3 0308 	sub.w	r3, r3, #8
 80042aa:	f47f aefc 	bne.w	80040a6 <arm_cfft_radix8by4_f32+0x12e>
 80042ae:	9907      	ldr	r1, [sp, #28]
 80042b0:	9800      	ldr	r0, [sp, #0]
 80042b2:	00cb      	lsls	r3, r1, #3
 80042b4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80042b8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80042bc:	9100      	str	r1, [sp, #0]
 80042be:	9904      	ldr	r1, [sp, #16]
 80042c0:	4419      	add	r1, r3
 80042c2:	9104      	str	r1, [sp, #16]
 80042c4:	9903      	ldr	r1, [sp, #12]
 80042c6:	4419      	add	r1, r3
 80042c8:	9103      	str	r1, [sp, #12]
 80042ca:	9906      	ldr	r1, [sp, #24]
 80042cc:	4419      	add	r1, r3
 80042ce:	9106      	str	r1, [sp, #24]
 80042d0:	9905      	ldr	r1, [sp, #20]
 80042d2:	441f      	add	r7, r3
 80042d4:	4419      	add	r1, r3
 80042d6:	9b02      	ldr	r3, [sp, #8]
 80042d8:	9105      	str	r1, [sp, #20]
 80042da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042de:	9302      	str	r3, [sp, #8]
 80042e0:	9904      	ldr	r1, [sp, #16]
 80042e2:	9805      	ldr	r0, [sp, #20]
 80042e4:	ed91 4a00 	vldr	s8, [r1]
 80042e8:	edd0 6a00 	vldr	s13, [r0]
 80042ec:	9b06      	ldr	r3, [sp, #24]
 80042ee:	ed97 3a00 	vldr	s6, [r7]
 80042f2:	edd3 7a00 	vldr	s15, [r3]
 80042f6:	edd0 4a01 	vldr	s9, [r0, #4]
 80042fa:	edd1 3a01 	vldr	s7, [r1, #4]
 80042fe:	ed97 2a01 	vldr	s4, [r7, #4]
 8004302:	ed93 7a01 	vldr	s14, [r3, #4]
 8004306:	9a03      	ldr	r2, [sp, #12]
 8004308:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800430c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8004310:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8004314:	ee37 5a86 	vadd.f32	s10, s15, s12
 8004318:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800431c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004320:	ee74 6a66 	vsub.f32	s13, s8, s13
 8004324:	ed81 5a00 	vstr	s10, [r1]
 8004328:	ed93 5a01 	vldr	s10, [r3, #4]
 800432c:	edd7 4a01 	vldr	s9, [r7, #4]
 8004330:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004334:	ee37 4a26 	vadd.f32	s8, s14, s13
 8004338:	ee35 5a24 	vadd.f32	s10, s10, s9
 800433c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8004340:	ed81 5a01 	vstr	s10, [r1, #4]
 8004344:	edd2 1a00 	vldr	s3, [r2]
 8004348:	edd2 2a01 	vldr	s5, [r2, #4]
 800434c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004350:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004354:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004358:	ee64 4a21 	vmul.f32	s9, s8, s3
 800435c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004360:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004364:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004368:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800436c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004370:	edc3 2a00 	vstr	s5, [r3]
 8004374:	ed83 5a01 	vstr	s10, [r3, #4]
 8004378:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800437c:	9b00      	ldr	r3, [sp, #0]
 800437e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004382:	ed93 4a01 	vldr	s8, [r3, #4]
 8004386:	ed93 5a00 	vldr	s10, [r3]
 800438a:	9b02      	ldr	r3, [sp, #8]
 800438c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004390:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004394:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004398:	ee26 6a04 	vmul.f32	s12, s12, s8
 800439c:	ee65 5a84 	vmul.f32	s11, s11, s8
 80043a0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80043a4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80043a8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80043ac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80043b0:	ed80 6a01 	vstr	s12, [r0, #4]
 80043b4:	edc0 5a00 	vstr	s11, [r0]
 80043b8:	edd3 5a01 	vldr	s11, [r3, #4]
 80043bc:	edd3 6a00 	vldr	s13, [r3]
 80043c0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80043c4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80043c8:	ee27 6a26 	vmul.f32	s12, s14, s13
 80043cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80043d0:	ee27 7a25 	vmul.f32	s14, s14, s11
 80043d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80043d8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80043dc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80043e0:	ed87 7a01 	vstr	s14, [r7, #4]
 80043e4:	edc7 7a00 	vstr	s15, [r7]
 80043e8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 80043ec:	4621      	mov	r1, r4
 80043ee:	686a      	ldr	r2, [r5, #4]
 80043f0:	2304      	movs	r3, #4
 80043f2:	f000 f8af 	bl	8004554 <arm_radix8_butterfly_f32>
 80043f6:	4630      	mov	r0, r6
 80043f8:	4621      	mov	r1, r4
 80043fa:	686a      	ldr	r2, [r5, #4]
 80043fc:	2304      	movs	r3, #4
 80043fe:	f000 f8a9 	bl	8004554 <arm_radix8_butterfly_f32>
 8004402:	9808      	ldr	r0, [sp, #32]
 8004404:	686a      	ldr	r2, [r5, #4]
 8004406:	4621      	mov	r1, r4
 8004408:	2304      	movs	r3, #4
 800440a:	f000 f8a3 	bl	8004554 <arm_radix8_butterfly_f32>
 800440e:	686a      	ldr	r2, [r5, #4]
 8004410:	9801      	ldr	r0, [sp, #4]
 8004412:	4621      	mov	r1, r4
 8004414:	2304      	movs	r3, #4
 8004416:	b00d      	add	sp, #52	; 0x34
 8004418:	ecbd 8b0a 	vpop	{d8-d12}
 800441c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	f000 b898 	b.w	8004554 <arm_radix8_butterfly_f32>

08004424 <arm_cfft_f32>:
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004428:	2a01      	cmp	r2, #1
 800442a:	4606      	mov	r6, r0
 800442c:	4617      	mov	r7, r2
 800442e:	460c      	mov	r4, r1
 8004430:	4698      	mov	r8, r3
 8004432:	8805      	ldrh	r5, [r0, #0]
 8004434:	d056      	beq.n	80044e4 <arm_cfft_f32+0xc0>
 8004436:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800443a:	d063      	beq.n	8004504 <arm_cfft_f32+0xe0>
 800443c:	d916      	bls.n	800446c <arm_cfft_f32+0x48>
 800443e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004442:	d01a      	beq.n	800447a <arm_cfft_f32+0x56>
 8004444:	d947      	bls.n	80044d6 <arm_cfft_f32+0xb2>
 8004446:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800444a:	d05b      	beq.n	8004504 <arm_cfft_f32+0xe0>
 800444c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004450:	d105      	bne.n	800445e <arm_cfft_f32+0x3a>
 8004452:	2301      	movs	r3, #1
 8004454:	6872      	ldr	r2, [r6, #4]
 8004456:	4629      	mov	r1, r5
 8004458:	4620      	mov	r0, r4
 800445a:	f000 f87b 	bl	8004554 <arm_radix8_butterfly_f32>
 800445e:	f1b8 0f00 	cmp.w	r8, #0
 8004462:	d111      	bne.n	8004488 <arm_cfft_f32+0x64>
 8004464:	2f01      	cmp	r7, #1
 8004466:	d016      	beq.n	8004496 <arm_cfft_f32+0x72>
 8004468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800446c:	2d20      	cmp	r5, #32
 800446e:	d049      	beq.n	8004504 <arm_cfft_f32+0xe0>
 8004470:	d935      	bls.n	80044de <arm_cfft_f32+0xba>
 8004472:	2d40      	cmp	r5, #64	; 0x40
 8004474:	d0ed      	beq.n	8004452 <arm_cfft_f32+0x2e>
 8004476:	2d80      	cmp	r5, #128	; 0x80
 8004478:	d1f1      	bne.n	800445e <arm_cfft_f32+0x3a>
 800447a:	4621      	mov	r1, r4
 800447c:	4630      	mov	r0, r6
 800447e:	f7ff fcab 	bl	8003dd8 <arm_cfft_radix8by2_f32>
 8004482:	f1b8 0f00 	cmp.w	r8, #0
 8004486:	d0ed      	beq.n	8004464 <arm_cfft_f32+0x40>
 8004488:	68b2      	ldr	r2, [r6, #8]
 800448a:	89b1      	ldrh	r1, [r6, #12]
 800448c:	4620      	mov	r0, r4
 800448e:	f000 f841 	bl	8004514 <arm_bitreversal_32>
 8004492:	2f01      	cmp	r7, #1
 8004494:	d1e8      	bne.n	8004468 <arm_cfft_f32+0x44>
 8004496:	ee07 5a90 	vmov	s15, r5
 800449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044a6:	2d00      	cmp	r5, #0
 80044a8:	d0de      	beq.n	8004468 <arm_cfft_f32+0x44>
 80044aa:	f104 0108 	add.w	r1, r4, #8
 80044ae:	2300      	movs	r3, #0
 80044b0:	3301      	adds	r3, #1
 80044b2:	429d      	cmp	r5, r3
 80044b4:	f101 0108 	add.w	r1, r1, #8
 80044b8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80044bc:	ed51 7a03 	vldr	s15, [r1, #-12]
 80044c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80044c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80044c8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80044cc:	ed41 7a03 	vstr	s15, [r1, #-12]
 80044d0:	d1ee      	bne.n	80044b0 <arm_cfft_f32+0x8c>
 80044d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80044da:	d0ba      	beq.n	8004452 <arm_cfft_f32+0x2e>
 80044dc:	e7bf      	b.n	800445e <arm_cfft_f32+0x3a>
 80044de:	2d10      	cmp	r5, #16
 80044e0:	d0cb      	beq.n	800447a <arm_cfft_f32+0x56>
 80044e2:	e7bc      	b.n	800445e <arm_cfft_f32+0x3a>
 80044e4:	b19d      	cbz	r5, 800450e <arm_cfft_f32+0xea>
 80044e6:	f101 030c 	add.w	r3, r1, #12
 80044ea:	2200      	movs	r2, #0
 80044ec:	ed53 7a02 	vldr	s15, [r3, #-8]
 80044f0:	3201      	adds	r2, #1
 80044f2:	eef1 7a67 	vneg.f32	s15, s15
 80044f6:	4295      	cmp	r5, r2
 80044f8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80044fc:	f103 0308 	add.w	r3, r3, #8
 8004500:	d1f4      	bne.n	80044ec <arm_cfft_f32+0xc8>
 8004502:	e798      	b.n	8004436 <arm_cfft_f32+0x12>
 8004504:	4621      	mov	r1, r4
 8004506:	4630      	mov	r0, r6
 8004508:	f7ff fd36 	bl	8003f78 <arm_cfft_radix8by4_f32>
 800450c:	e7a7      	b.n	800445e <arm_cfft_f32+0x3a>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0aa      	beq.n	8004468 <arm_cfft_f32+0x44>
 8004512:	e7b9      	b.n	8004488 <arm_cfft_f32+0x64>

08004514 <arm_bitreversal_32>:
 8004514:	b1e9      	cbz	r1, 8004552 <arm_bitreversal_32+0x3e>
 8004516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004518:	2500      	movs	r5, #0
 800451a:	f102 0e02 	add.w	lr, r2, #2
 800451e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8004522:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8004526:	08a4      	lsrs	r4, r4, #2
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800452e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8004532:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8004536:	00a6      	lsls	r6, r4, #2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800453e:	3304      	adds	r3, #4
 8004540:	1d34      	adds	r4, r6, #4
 8004542:	3502      	adds	r5, #2
 8004544:	58c6      	ldr	r6, [r0, r3]
 8004546:	5907      	ldr	r7, [r0, r4]
 8004548:	50c7      	str	r7, [r0, r3]
 800454a:	428d      	cmp	r5, r1
 800454c:	5106      	str	r6, [r0, r4]
 800454e:	d3e6      	bcc.n	800451e <arm_bitreversal_32+0xa>
 8004550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004552:	4770      	bx	lr

08004554 <arm_radix8_butterfly_f32>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	ed2d 8b10 	vpush	{d8-d15}
 800455c:	b095      	sub	sp, #84	; 0x54
 800455e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8004562:	4603      	mov	r3, r0
 8004564:	3304      	adds	r3, #4
 8004566:	ed9f bab9 	vldr	s22, [pc, #740]	; 800484c <arm_radix8_butterfly_f32+0x2f8>
 800456a:	9012      	str	r0, [sp, #72]	; 0x48
 800456c:	468b      	mov	fp, r1
 800456e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004570:	4689      	mov	r9, r1
 8004572:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8004576:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004578:	960f      	str	r6, [sp, #60]	; 0x3c
 800457a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800457e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8004582:	eb03 0508 	add.w	r5, r3, r8
 8004586:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800458a:	eb05 040e 	add.w	r4, r5, lr
 800458e:	0137      	lsls	r7, r6, #4
 8004590:	eba6 030a 	sub.w	r3, r6, sl
 8004594:	eb04 000e 	add.w	r0, r4, lr
 8004598:	44b2      	add	sl, r6
 800459a:	1d3a      	adds	r2, r7, #4
 800459c:	9702      	str	r7, [sp, #8]
 800459e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80045a2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80045a6:	ebae 0c06 	sub.w	ip, lr, r6
 80045aa:	9703      	str	r7, [sp, #12]
 80045ac:	eb03 0708 	add.w	r7, r3, r8
 80045b0:	9701      	str	r7, [sp, #4]
 80045b2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80045b6:	9706      	str	r7, [sp, #24]
 80045b8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80045ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80045be:	f10e 0104 	add.w	r1, lr, #4
 80045c2:	4439      	add	r1, r7
 80045c4:	443a      	add	r2, r7
 80045c6:	0137      	lsls	r7, r6, #4
 80045c8:	00f6      	lsls	r6, r6, #3
 80045ca:	9704      	str	r7, [sp, #16]
 80045cc:	9605      	str	r6, [sp, #20]
 80045ce:	9f01      	ldr	r7, [sp, #4]
 80045d0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80045d2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80045d6:	f04f 0c00 	mov.w	ip, #0
 80045da:	edd4 6a00 	vldr	s13, [r4]
 80045de:	edd7 1a00 	vldr	s3, [r7]
 80045e2:	ed16 aa01 	vldr	s20, [r6, #-4]
 80045e6:	edd5 5a00 	vldr	s11, [r5]
 80045ea:	ed52 9a01 	vldr	s19, [r2, #-4]
 80045ee:	ed90 6a00 	vldr	s12, [r0]
 80045f2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80045f6:	ed93 3a00 	vldr	s6, [r3]
 80045fa:	ee39 0a86 	vadd.f32	s0, s19, s12
 80045fe:	ee33 2a21 	vadd.f32	s4, s6, s3
 8004602:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8004606:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800460a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800460e:	ee34 4a80 	vadd.f32	s8, s9, s0
 8004612:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004616:	ee74 6a07 	vadd.f32	s13, s8, s14
 800461a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800461e:	ed46 6a01 	vstr	s13, [r6, #-4]
 8004622:	ed85 4a00 	vstr	s8, [r5]
 8004626:	edd1 6a00 	vldr	s13, [r1]
 800462a:	ed94 9a01 	vldr	s18, [r4, #4]
 800462e:	edd3 2a01 	vldr	s5, [r3, #4]
 8004632:	edd7 8a01 	vldr	s17, [r7, #4]
 8004636:	edd6 0a00 	vldr	s1, [r6]
 800463a:	edd5 3a01 	vldr	s7, [r5, #4]
 800463e:	ed90 8a01 	vldr	s16, [r0, #4]
 8004642:	ed92 7a00 	vldr	s14, [r2]
 8004646:	ee33 3a61 	vsub.f32	s6, s6, s3
 800464a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800464e:	ee72 aae8 	vsub.f32	s21, s5, s17
 8004652:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8004656:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800465a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800465e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8004662:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8004666:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800466a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800466e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8004672:	ee77 0a08 	vadd.f32	s1, s14, s16
 8004676:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800467a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800467e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8004682:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8004686:	ee76 6a89 	vadd.f32	s13, s13, s18
 800468a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800468e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004692:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004696:	ee35 5a42 	vsub.f32	s10, s10, s4
 800469a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800469e:	ee33 2a20 	vadd.f32	s4, s6, s1
 80046a2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80046a6:	ee33 3a60 	vsub.f32	s6, s6, s1
 80046aa:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80046ae:	ee77 0a01 	vadd.f32	s1, s14, s2
 80046b2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80046b6:	ee37 7a41 	vsub.f32	s14, s14, s2
 80046ba:	ee73 1a84 	vadd.f32	s3, s7, s8
 80046be:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80046c2:	ee76 3a27 	vadd.f32	s7, s12, s15
 80046c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80046ca:	ee32 8a00 	vadd.f32	s16, s4, s0
 80046ce:	ee33 1a45 	vsub.f32	s2, s6, s10
 80046d2:	ee32 2a40 	vsub.f32	s4, s4, s0
 80046d6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80046da:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80046de:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80046e2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80046e6:	ee34 6a67 	vsub.f32	s12, s8, s15
 80046ea:	ee75 4a87 	vadd.f32	s9, s11, s14
 80046ee:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80046f2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80046f6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80046fa:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80046fe:	44dc      	add	ip, fp
 8004700:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004704:	45e1      	cmp	r9, ip
 8004706:	ed86 8a00 	vstr	s16, [r6]
 800470a:	ed85 2a01 	vstr	s4, [r5, #4]
 800470e:	4456      	add	r6, sl
 8004710:	ed02 0a01 	vstr	s0, [r2, #-4]
 8004714:	4455      	add	r5, sl
 8004716:	edc0 6a00 	vstr	s13, [r0]
 800471a:	ed82 1a00 	vstr	s2, [r2]
 800471e:	ed80 5a01 	vstr	s10, [r0, #4]
 8004722:	4452      	add	r2, sl
 8004724:	ed01 3a01 	vstr	s6, [r1, #-4]
 8004728:	4450      	add	r0, sl
 800472a:	edc7 2a00 	vstr	s5, [r7]
 800472e:	edc4 4a00 	vstr	s9, [r4]
 8004732:	ed83 7a00 	vstr	s14, [r3]
 8004736:	edc1 5a00 	vstr	s11, [r1]
 800473a:	edc7 3a01 	vstr	s7, [r7, #4]
 800473e:	4451      	add	r1, sl
 8004740:	ed84 6a01 	vstr	s12, [r4, #4]
 8004744:	4457      	add	r7, sl
 8004746:	edc3 7a01 	vstr	s15, [r3, #4]
 800474a:	4454      	add	r4, sl
 800474c:	4453      	add	r3, sl
 800474e:	f63f af44 	bhi.w	80045da <arm_radix8_butterfly_f32+0x86>
 8004752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004754:	2b07      	cmp	r3, #7
 8004756:	f240 81b7 	bls.w	8004ac8 <arm_radix8_butterfly_f32+0x574>
 800475a:	9b06      	ldr	r3, [sp, #24]
 800475c:	9903      	ldr	r1, [sp, #12]
 800475e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004760:	9e05      	ldr	r6, [sp, #20]
 8004762:	9a04      	ldr	r2, [sp, #16]
 8004764:	f103 0c08 	add.w	ip, r3, #8
 8004768:	9b02      	ldr	r3, [sp, #8]
 800476a:	3108      	adds	r1, #8
 800476c:	f108 0808 	add.w	r8, r8, #8
 8004770:	1841      	adds	r1, r0, r1
 8004772:	3608      	adds	r6, #8
 8004774:	330c      	adds	r3, #12
 8004776:	4604      	mov	r4, r0
 8004778:	4444      	add	r4, r8
 800477a:	18c3      	adds	r3, r0, r3
 800477c:	9109      	str	r1, [sp, #36]	; 0x24
 800477e:	1981      	adds	r1, r0, r6
 8004780:	f10e 0e08 	add.w	lr, lr, #8
 8004784:	3208      	adds	r2, #8
 8004786:	940b      	str	r4, [sp, #44]	; 0x2c
 8004788:	9107      	str	r1, [sp, #28]
 800478a:	4604      	mov	r4, r0
 800478c:	4601      	mov	r1, r0
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	f100 030c 	add.w	r3, r0, #12
 8004794:	4474      	add	r4, lr
 8004796:	f04f 0801 	mov.w	r8, #1
 800479a:	1882      	adds	r2, r0, r2
 800479c:	4461      	add	r1, ip
 800479e:	9305      	str	r3, [sp, #20]
 80047a0:	464b      	mov	r3, r9
 80047a2:	940a      	str	r4, [sp, #40]	; 0x28
 80047a4:	46c1      	mov	r9, r8
 80047a6:	9208      	str	r2, [sp, #32]
 80047a8:	46d8      	mov	r8, fp
 80047aa:	9106      	str	r1, [sp, #24]
 80047ac:	f04f 0e00 	mov.w	lr, #0
 80047b0:	469b      	mov	fp, r3
 80047b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80047b6:	449e      	add	lr, r3
 80047b8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80047bc:	441a      	add	r2, r3
 80047be:	920e      	str	r2, [sp, #56]	; 0x38
 80047c0:	441a      	add	r2, r3
 80047c2:	18d4      	adds	r4, r2, r3
 80047c4:	18e5      	adds	r5, r4, r3
 80047c6:	18ee      	adds	r6, r5, r3
 80047c8:	18f7      	adds	r7, r6, r3
 80047ca:	eb07 0c03 	add.w	ip, r7, r3
 80047ce:	920d      	str	r2, [sp, #52]	; 0x34
 80047d0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80047d4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80047d8:	910c      	str	r1, [sp, #48]	; 0x30
 80047da:	4419      	add	r1, r3
 80047dc:	9103      	str	r1, [sp, #12]
 80047de:	4419      	add	r1, r3
 80047e0:	18ca      	adds	r2, r1, r3
 80047e2:	9202      	str	r2, [sp, #8]
 80047e4:	441a      	add	r2, r3
 80047e6:	18d0      	adds	r0, r2, r3
 80047e8:	ed92 ea01 	vldr	s28, [r2, #4]
 80047ec:	9a02      	ldr	r2, [sp, #8]
 80047ee:	edd4 7a00 	vldr	s15, [r4]
 80047f2:	edd2 da01 	vldr	s27, [r2, #4]
 80047f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047f8:	ed91 da01 	vldr	s26, [r1, #4]
 80047fc:	ed92 ca01 	vldr	s24, [r2, #4]
 8004800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004802:	9903      	ldr	r1, [sp, #12]
 8004804:	edcd 7a03 	vstr	s15, [sp, #12]
 8004808:	edd2 7a00 	vldr	s15, [r2]
 800480c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800480e:	edcd 7a02 	vstr	s15, [sp, #8]
 8004812:	edd2 7a00 	vldr	s15, [r2]
 8004816:	edd0 ea01 	vldr	s29, [r0, #4]
 800481a:	edd1 ca01 	vldr	s25, [r1, #4]
 800481e:	eddc ba00 	vldr	s23, [ip]
 8004822:	edd7 aa00 	vldr	s21, [r7]
 8004826:	ed96 aa00 	vldr	s20, [r6]
 800482a:	edd5 9a00 	vldr	s19, [r5]
 800482e:	edcd 7a01 	vstr	s15, [sp, #4]
 8004832:	4403      	add	r3, r0
 8004834:	ed93 fa01 	vldr	s30, [r3, #4]
 8004838:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800483c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8004840:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004848:	46cc      	mov	ip, r9
 800484a:	e001      	b.n	8004850 <arm_radix8_butterfly_f32+0x2fc>
 800484c:	3f3504f3 	.word	0x3f3504f3
 8004850:	ed91 6a00 	vldr	s12, [r1]
 8004854:	ed93 5a00 	vldr	s10, [r3]
 8004858:	edd0 fa00 	vldr	s31, [r0]
 800485c:	edd4 7a00 	vldr	s15, [r4]
 8004860:	ed95 7a00 	vldr	s14, [r5]
 8004864:	ed56 3a01 	vldr	s7, [r6, #-4]
 8004868:	ed17 3a01 	vldr	s6, [r7, #-4]
 800486c:	ed92 2a00 	vldr	s4, [r2]
 8004870:	ed96 0a00 	vldr	s0, [r6]
 8004874:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004878:	ee32 1a06 	vadd.f32	s2, s4, s12
 800487c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8004880:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004884:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004888:	ee71 6a24 	vadd.f32	s13, s2, s9
 800488c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004890:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004898:	ed06 6a01 	vstr	s12, [r6, #-4]
 800489c:	edd4 8a01 	vldr	s17, [r4, #4]
 80048a0:	ed92 9a01 	vldr	s18, [r2, #4]
 80048a4:	edd7 0a00 	vldr	s1, [r7]
 80048a8:	edd1 2a01 	vldr	s5, [r1, #4]
 80048ac:	ed95 7a01 	vldr	s14, [r5, #4]
 80048b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80048b4:	edd0 5a01 	vldr	s11, [r0, #4]
 80048b8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80048bc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80048c0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80048c4:	ee78 fac7 	vsub.f32	s31, s17, s14
 80048c8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80048cc:	ee38 7a87 	vadd.f32	s14, s17, s14
 80048d0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80048d4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80048d8:	ee32 9a27 	vadd.f32	s18, s4, s15
 80048dc:	ee72 7a67 	vsub.f32	s15, s4, s15
 80048e0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80048e4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80048e8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80048ec:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80048f0:	ee32 1a08 	vadd.f32	s2, s4, s16
 80048f4:	ee72 fa87 	vadd.f32	s31, s5, s14
 80048f8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80048fc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004900:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004904:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004908:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800490c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004910:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8004914:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8004918:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800491c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004920:	ee74 0a22 	vadd.f32	s1, s8, s5
 8004924:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004928:	ee74 2a62 	vsub.f32	s5, s8, s5
 800492c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004930:	ee32 4a64 	vsub.f32	s8, s4, s9
 8004934:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004938:	ee74 4a82 	vadd.f32	s9, s9, s4
 800493c:	ee33 9a49 	vsub.f32	s18, s6, s18
 8004940:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8004944:	ee35 3a85 	vadd.f32	s6, s11, s10
 8004948:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800494c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004950:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004954:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8004958:	ee30 7a68 	vsub.f32	s14, s0, s17
 800495c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8004960:	ee38 0a80 	vadd.f32	s0, s17, s0
 8004964:	ee73 3a82 	vadd.f32	s7, s7, s4
 8004968:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800496c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8004970:	eddd 1a02 	vldr	s3, [sp, #8]
 8004974:	ee35 5a43 	vsub.f32	s10, s10, s6
 8004978:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800497c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8004980:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8004984:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004988:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800498c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8004990:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8004994:	ee39 6a06 	vadd.f32	s12, s18, s12
 8004998:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800499c:	ee21 4a84 	vmul.f32	s8, s3, s8
 80049a0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80049a4:	ee22 7a07 	vmul.f32	s14, s4, s14
 80049a8:	ee22 2a08 	vmul.f32	s4, s4, s16
 80049ac:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80049b0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80049b4:	ee31 1a09 	vadd.f32	s2, s2, s18
 80049b8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80049bc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80049c0:	ee74 0a60 	vsub.f32	s1, s8, s1
 80049c4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80049c8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80049cc:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80049d0:	ee72 1a21 	vadd.f32	s3, s4, s3
 80049d4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80049d8:	ee38 2a89 	vadd.f32	s4, s17, s18
 80049dc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80049e0:	ee38 8a04 	vadd.f32	s16, s16, s8
 80049e4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80049e8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80049ec:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80049f0:	eddd 5a03 	vldr	s11, [sp, #12]
 80049f4:	edc6 fa00 	vstr	s31, [r6]
 80049f8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80049fc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004a00:	ee30 0a45 	vsub.f32	s0, s0, s10
 8004a04:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8004a08:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8004a0c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8004a10:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8004a14:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8004a18:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004a1c:	ee74 4a89 	vadd.f32	s9, s9, s18
 8004a20:	ee34 3a43 	vsub.f32	s6, s8, s6
 8004a24:	ee78 8a85 	vadd.f32	s17, s17, s10
 8004a28:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004a2c:	44c4      	add	ip, r8
 8004a2e:	45e3      	cmp	fp, ip
 8004a30:	edc3 3a00 	vstr	s7, [r3]
 8004a34:	edc3 6a01 	vstr	s13, [r3, #4]
 8004a38:	4456      	add	r6, sl
 8004a3a:	ed07 1a01 	vstr	s2, [r7, #-4]
 8004a3e:	edc7 0a00 	vstr	s1, [r7]
 8004a42:	4453      	add	r3, sl
 8004a44:	ed80 2a00 	vstr	s4, [r0]
 8004a48:	edc0 2a01 	vstr	s5, [r0, #4]
 8004a4c:	4457      	add	r7, sl
 8004a4e:	edc2 1a00 	vstr	s3, [r2]
 8004a52:	ed82 7a01 	vstr	s14, [r2, #4]
 8004a56:	4450      	add	r0, sl
 8004a58:	ed85 8a00 	vstr	s16, [r5]
 8004a5c:	ed85 0a01 	vstr	s0, [r5, #4]
 8004a60:	4452      	add	r2, sl
 8004a62:	edc1 4a00 	vstr	s9, [r1]
 8004a66:	4455      	add	r5, sl
 8004a68:	ed81 3a01 	vstr	s6, [r1, #4]
 8004a6c:	edc4 8a00 	vstr	s17, [r4]
 8004a70:	ed84 6a01 	vstr	s12, [r4, #4]
 8004a74:	4451      	add	r1, sl
 8004a76:	4454      	add	r4, sl
 8004a78:	f63f aeea 	bhi.w	8004850 <arm_radix8_butterfly_f32+0x2fc>
 8004a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a7e:	3308      	adds	r3, #8
 8004a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a84:	3308      	adds	r3, #8
 8004a86:	930a      	str	r3, [sp, #40]	; 0x28
 8004a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8e:	9b08      	ldr	r3, [sp, #32]
 8004a90:	3308      	adds	r3, #8
 8004a92:	9308      	str	r3, [sp, #32]
 8004a94:	9b07      	ldr	r3, [sp, #28]
 8004a96:	3308      	adds	r3, #8
 8004a98:	9307      	str	r3, [sp, #28]
 8004a9a:	9b06      	ldr	r3, [sp, #24]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	9306      	str	r3, [sp, #24]
 8004aa0:	9b05      	ldr	r3, [sp, #20]
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	9305      	str	r3, [sp, #20]
 8004aa6:	9b04      	ldr	r3, [sp, #16]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	9304      	str	r3, [sp, #16]
 8004aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004aae:	f109 0901 	add.w	r9, r9, #1
 8004ab2:	454b      	cmp	r3, r9
 8004ab4:	f47f ae7d 	bne.w	80047b2 <arm_radix8_butterfly_f32+0x25e>
 8004ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	46d9      	mov	r9, fp
 8004ac0:	9310      	str	r3, [sp, #64]	; 0x40
 8004ac2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8004ac6:	e554      	b.n	8004572 <arm_radix8_butterfly_f32+0x1e>
 8004ac8:	b015      	add	sp, #84	; 0x54
 8004aca:	ecbd 8b10 	vpop	{d8-d15}
 8004ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad2:	bf00      	nop

08004ad4 <memset>:
 8004ad4:	4402      	add	r2, r0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d100      	bne.n	8004ade <memset+0xa>
 8004adc:	4770      	bx	lr
 8004ade:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae2:	e7f9      	b.n	8004ad8 <memset+0x4>

08004ae4 <__errno>:
 8004ae4:	4b01      	ldr	r3, [pc, #4]	; (8004aec <__errno+0x8>)
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000058 	.word	0x20000058

08004af0 <__libc_init_array>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	4d0d      	ldr	r5, [pc, #52]	; (8004b28 <__libc_init_array+0x38>)
 8004af4:	4c0d      	ldr	r4, [pc, #52]	; (8004b2c <__libc_init_array+0x3c>)
 8004af6:	1b64      	subs	r4, r4, r5
 8004af8:	10a4      	asrs	r4, r4, #2
 8004afa:	2600      	movs	r6, #0
 8004afc:	42a6      	cmp	r6, r4
 8004afe:	d109      	bne.n	8004b14 <__libc_init_array+0x24>
 8004b00:	4d0b      	ldr	r5, [pc, #44]	; (8004b30 <__libc_init_array+0x40>)
 8004b02:	4c0c      	ldr	r4, [pc, #48]	; (8004b34 <__libc_init_array+0x44>)
 8004b04:	f000 f91e 	bl	8004d44 <_init>
 8004b08:	1b64      	subs	r4, r4, r5
 8004b0a:	10a4      	asrs	r4, r4, #2
 8004b0c:	2600      	movs	r6, #0
 8004b0e:	42a6      	cmp	r6, r4
 8004b10:	d105      	bne.n	8004b1e <__libc_init_array+0x2e>
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b18:	4798      	blx	r3
 8004b1a:	3601      	adds	r6, #1
 8004b1c:	e7ee      	b.n	8004afc <__libc_init_array+0xc>
 8004b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b22:	4798      	blx	r3
 8004b24:	3601      	adds	r6, #1
 8004b26:	e7f2      	b.n	8004b0e <__libc_init_array+0x1e>
 8004b28:	08017d64 	.word	0x08017d64
 8004b2c:	08017d64 	.word	0x08017d64
 8004b30:	08017d64 	.word	0x08017d64
 8004b34:	08017d68 	.word	0x08017d68

08004b38 <sqrt>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	ed2d 8b02 	vpush	{d8}
 8004b3e:	ec55 4b10 	vmov	r4, r5, d0
 8004b42:	f000 f825 	bl	8004b90 <__ieee754_sqrt>
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8004b52:	eef0 8a60 	vmov.f32	s17, s1
 8004b56:	f7fb ff93 	bl	8000a80 <__aeabi_dcmpun>
 8004b5a:	b990      	cbnz	r0, 8004b82 <sqrt+0x4a>
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4620      	mov	r0, r4
 8004b62:	4629      	mov	r1, r5
 8004b64:	f7fb ff64 	bl	8000a30 <__aeabi_dcmplt>
 8004b68:	b158      	cbz	r0, 8004b82 <sqrt+0x4a>
 8004b6a:	f7ff ffbb 	bl	8004ae4 <__errno>
 8004b6e:	2321      	movs	r3, #33	; 0x21
 8004b70:	6003      	str	r3, [r0, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	2300      	movs	r3, #0
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f7fb fe11 	bl	80007a0 <__aeabi_ddiv>
 8004b7e:	ec41 0b18 	vmov	d8, r0, r1
 8004b82:	eeb0 0a48 	vmov.f32	s0, s16
 8004b86:	eef0 0a68 	vmov.f32	s1, s17
 8004b8a:	ecbd 8b02 	vpop	{d8}
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}

08004b90 <__ieee754_sqrt>:
 8004b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	ec55 4b10 	vmov	r4, r5, d0
 8004b98:	4e67      	ldr	r6, [pc, #412]	; (8004d38 <__ieee754_sqrt+0x1a8>)
 8004b9a:	43ae      	bics	r6, r5
 8004b9c:	ee10 0a10 	vmov	r0, s0
 8004ba0:	ee10 2a10 	vmov	r2, s0
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	d10d      	bne.n	8004bc6 <__ieee754_sqrt+0x36>
 8004baa:	f7fb fccf 	bl	800054c <__aeabi_dmul>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	f7fb fb13 	bl	80001e0 <__adddf3>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	460d      	mov	r5, r1
 8004bbe:	ec45 4b10 	vmov	d0, r4, r5
 8004bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc6:	2d00      	cmp	r5, #0
 8004bc8:	dc0b      	bgt.n	8004be2 <__ieee754_sqrt+0x52>
 8004bca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004bce:	4326      	orrs	r6, r4
 8004bd0:	d0f5      	beq.n	8004bbe <__ieee754_sqrt+0x2e>
 8004bd2:	b135      	cbz	r5, 8004be2 <__ieee754_sqrt+0x52>
 8004bd4:	f7fb fb02 	bl	80001dc <__aeabi_dsub>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	f7fb fde0 	bl	80007a0 <__aeabi_ddiv>
 8004be0:	e7eb      	b.n	8004bba <__ieee754_sqrt+0x2a>
 8004be2:	1509      	asrs	r1, r1, #20
 8004be4:	f000 808d 	beq.w	8004d02 <__ieee754_sqrt+0x172>
 8004be8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bec:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf4:	07c9      	lsls	r1, r1, #31
 8004bf6:	bf5c      	itt	pl
 8004bf8:	005b      	lslpl	r3, r3, #1
 8004bfa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004bfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004c02:	bf58      	it	pl
 8004c04:	0052      	lslpl	r2, r2, #1
 8004c06:	2500      	movs	r5, #0
 8004c08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004c0c:	1076      	asrs	r6, r6, #1
 8004c0e:	0052      	lsls	r2, r2, #1
 8004c10:	f04f 0e16 	mov.w	lr, #22
 8004c14:	46ac      	mov	ip, r5
 8004c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c1a:	eb0c 0001 	add.w	r0, ip, r1
 8004c1e:	4298      	cmp	r0, r3
 8004c20:	bfde      	ittt	le
 8004c22:	1a1b      	suble	r3, r3, r0
 8004c24:	eb00 0c01 	addle.w	ip, r0, r1
 8004c28:	186d      	addle	r5, r5, r1
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	f1be 0e01 	subs.w	lr, lr, #1
 8004c30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004c34:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004c38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004c3c:	d1ed      	bne.n	8004c1a <__ieee754_sqrt+0x8a>
 8004c3e:	4674      	mov	r4, lr
 8004c40:	2720      	movs	r7, #32
 8004c42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004c46:	4563      	cmp	r3, ip
 8004c48:	eb01 000e 	add.w	r0, r1, lr
 8004c4c:	dc02      	bgt.n	8004c54 <__ieee754_sqrt+0xc4>
 8004c4e:	d113      	bne.n	8004c78 <__ieee754_sqrt+0xe8>
 8004c50:	4290      	cmp	r0, r2
 8004c52:	d811      	bhi.n	8004c78 <__ieee754_sqrt+0xe8>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	eb00 0e01 	add.w	lr, r0, r1
 8004c5a:	da57      	bge.n	8004d0c <__ieee754_sqrt+0x17c>
 8004c5c:	f1be 0f00 	cmp.w	lr, #0
 8004c60:	db54      	blt.n	8004d0c <__ieee754_sqrt+0x17c>
 8004c62:	f10c 0801 	add.w	r8, ip, #1
 8004c66:	eba3 030c 	sub.w	r3, r3, ip
 8004c6a:	4290      	cmp	r0, r2
 8004c6c:	bf88      	it	hi
 8004c6e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004c72:	1a12      	subs	r2, r2, r0
 8004c74:	440c      	add	r4, r1
 8004c76:	46c4      	mov	ip, r8
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	3f01      	subs	r7, #1
 8004c7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004c80:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004c84:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004c88:	d1dd      	bne.n	8004c46 <__ieee754_sqrt+0xb6>
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	d01b      	beq.n	8004cc6 <__ieee754_sqrt+0x136>
 8004c8e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004d3c <__ieee754_sqrt+0x1ac>
 8004c92:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004d40 <__ieee754_sqrt+0x1b0>
 8004c96:	e9da 0100 	ldrd	r0, r1, [sl]
 8004c9a:	e9db 2300 	ldrd	r2, r3, [fp]
 8004c9e:	f7fb fa9d 	bl	80001dc <__aeabi_dsub>
 8004ca2:	e9da 8900 	ldrd	r8, r9, [sl]
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4640      	mov	r0, r8
 8004cac:	4649      	mov	r1, r9
 8004cae:	f7fb fec9 	bl	8000a44 <__aeabi_dcmple>
 8004cb2:	b140      	cbz	r0, 8004cc6 <__ieee754_sqrt+0x136>
 8004cb4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004cb8:	e9da 0100 	ldrd	r0, r1, [sl]
 8004cbc:	e9db 2300 	ldrd	r2, r3, [fp]
 8004cc0:	d126      	bne.n	8004d10 <__ieee754_sqrt+0x180>
 8004cc2:	3501      	adds	r5, #1
 8004cc4:	463c      	mov	r4, r7
 8004cc6:	106a      	asrs	r2, r5, #1
 8004cc8:	0863      	lsrs	r3, r4, #1
 8004cca:	07e9      	lsls	r1, r5, #31
 8004ccc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004cd0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004cd4:	bf48      	it	mi
 8004cd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004cda:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004cde:	461c      	mov	r4, r3
 8004ce0:	e76d      	b.n	8004bbe <__ieee754_sqrt+0x2e>
 8004ce2:	0ad3      	lsrs	r3, r2, #11
 8004ce4:	3815      	subs	r0, #21
 8004ce6:	0552      	lsls	r2, r2, #21
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0fa      	beq.n	8004ce2 <__ieee754_sqrt+0x152>
 8004cec:	02dc      	lsls	r4, r3, #11
 8004cee:	d50a      	bpl.n	8004d06 <__ieee754_sqrt+0x176>
 8004cf0:	f1c1 0420 	rsb	r4, r1, #32
 8004cf4:	fa22 f404 	lsr.w	r4, r2, r4
 8004cf8:	1e4d      	subs	r5, r1, #1
 8004cfa:	408a      	lsls	r2, r1
 8004cfc:	4323      	orrs	r3, r4
 8004cfe:	1b41      	subs	r1, r0, r5
 8004d00:	e772      	b.n	8004be8 <__ieee754_sqrt+0x58>
 8004d02:	4608      	mov	r0, r1
 8004d04:	e7f0      	b.n	8004ce8 <__ieee754_sqrt+0x158>
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	3101      	adds	r1, #1
 8004d0a:	e7ef      	b.n	8004cec <__ieee754_sqrt+0x15c>
 8004d0c:	46e0      	mov	r8, ip
 8004d0e:	e7aa      	b.n	8004c66 <__ieee754_sqrt+0xd6>
 8004d10:	f7fb fa66 	bl	80001e0 <__adddf3>
 8004d14:	e9da 8900 	ldrd	r8, r9, [sl]
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4649      	mov	r1, r9
 8004d20:	f7fb fe86 	bl	8000a30 <__aeabi_dcmplt>
 8004d24:	b120      	cbz	r0, 8004d30 <__ieee754_sqrt+0x1a0>
 8004d26:	1ca0      	adds	r0, r4, #2
 8004d28:	bf08      	it	eq
 8004d2a:	3501      	addeq	r5, #1
 8004d2c:	3402      	adds	r4, #2
 8004d2e:	e7ca      	b.n	8004cc6 <__ieee754_sqrt+0x136>
 8004d30:	3401      	adds	r4, #1
 8004d32:	f024 0401 	bic.w	r4, r4, #1
 8004d36:	e7c6      	b.n	8004cc6 <__ieee754_sqrt+0x136>
 8004d38:	7ff00000 	.word	0x7ff00000
 8004d3c:	20000060 	.word	0x20000060
 8004d40:	20000068 	.word	0x20000068

08004d44 <_init>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr

08004d50 <_fini>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr
