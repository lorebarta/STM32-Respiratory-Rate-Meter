
DSP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013488  0800606c  0800606c  0001606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080194f4  080194f4  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  080194f4  080194f4  000294f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080194fc  080194fc  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080194fc  080194fc  000294fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019500  08019500  00029500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08019504  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000141f4  20000074  08019578  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014268  08019578  00034268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6f8  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f89  00000000  00000000  0003b79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0003d728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  0003e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000204c3  00000000  00000000  0003e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c08  00000000  00000000  0005ed8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3efc  00000000  00000000  00068993  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0012c88f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000270c  00000000  00000000  0012c97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002a79  00000000  00000000  0012f088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006054 	.word	0x08006054

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08006054 	.word	0x08006054

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c6:	f1a4 0401 	sub.w	r4, r4, #1
 80003ca:	d1e9      	bne.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2f>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a2c:	bf24      	itt	cs
 8000a2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a36:	d90d      	bls.n	8000a54 <__aeabi_d2f+0x30>
 8000a38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a58:	d121      	bne.n	8000a9e <__aeabi_d2f+0x7a>
 8000a5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a5e:	bfbc      	itt	lt
 8000a60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	4770      	bxlt	lr
 8000a66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6e:	f1c2 0218 	rsb	r2, r2, #24
 8000a72:	f1c2 0c20 	rsb	ip, r2, #32
 8000a76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	bf18      	it	ne
 8000a80:	f040 0001 	orrne.w	r0, r0, #1
 8000a84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a90:	ea40 000c 	orr.w	r0, r0, ip
 8000a94:	fa23 f302 	lsr.w	r3, r3, r2
 8000a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a9c:	e7cc      	b.n	8000a38 <__aeabi_d2f+0x14>
 8000a9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa2:	d107      	bne.n	8000ab4 <__aeabi_d2f+0x90>
 8000aa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa8:	bf1e      	ittt	ne
 8000aaa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab2:	4770      	bxne	lr
 8000ab4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000abc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b972 	b.w	8000dc0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	4688      	mov	r8, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14b      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4615      	mov	r5, r2
 8000b06:	d967      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0720 	rsb	r7, r2, #32
 8000b12:	fa01 f302 	lsl.w	r3, r1, r2
 8000b16:	fa20 f707 	lsr.w	r7, r0, r7
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	ea47 0803 	orr.w	r8, r7, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b2c:	fa1f fc85 	uxth.w	ip, r5
 8000b30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b38:	fb07 f10c 	mul.w	r1, r7, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b46:	f080 811b 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8118 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b50:	3f02      	subs	r7, #2
 8000b52:	442b      	add	r3, r5
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b68:	45a4      	cmp	ip, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b72:	f080 8107 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	f240 8104 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	442c      	add	r4, r5
 8000b80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b84:	eba4 040c 	sub.w	r4, r4, ip
 8000b88:	2700      	movs	r7, #0
 8000b8a:	b11e      	cbz	r6, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c6 4300 	strd	r4, r3, [r6]
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0xbe>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80eb 	beq.w	8000d7a <__udivmoddi4+0x286>
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	e9c6 0100 	strd	r0, r1, [r6]
 8000baa:	4638      	mov	r0, r7
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f783 	clz	r7, r3
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d147      	bne.n	8000c4a <__udivmoddi4+0x156>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xd0>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80fa 	bhi.w	8000db8 <__udivmoddi4+0x2c4>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d0e0      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000bd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd6:	e7dd      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000bd8:	b902      	cbnz	r2, 8000bdc <__udivmoddi4+0xe8>
 8000bda:	deff      	udf	#255	; 0xff
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f040 808f 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be6:	1b49      	subs	r1, r1, r5
 8000be8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bec:	fa1f f885 	uxth.w	r8, r5
 8000bf0:	2701      	movs	r7, #1
 8000bf2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb08 f10c 	mul.w	r1, r8, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4299      	cmp	r1, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x14c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x14a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80b6 	bhi.w	8000daa <__udivmoddi4+0x2b6>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e79f      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c4e:	40bb      	lsls	r3, r7
 8000c50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c58:	fa01 f407 	lsl.w	r4, r1, r7
 8000c5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c68:	4325      	orrs	r5, r4
 8000c6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c6e:	0c2c      	lsrs	r4, r5, #16
 8000c70:	fb08 3319 	mls	r3, r8, r9, r3
 8000c74:	fa1f fa8e 	uxth.w	sl, lr
 8000c78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c80:	429c      	cmp	r4, r3
 8000c82:	fa02 f207 	lsl.w	r2, r2, r7
 8000c86:	fa00 f107 	lsl.w	r1, r0, r7
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c94:	f080 8087 	bcs.w	8000da6 <__udivmoddi4+0x2b2>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f240 8084 	bls.w	8000da6 <__udivmoddi4+0x2b2>
 8000c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca2:	4473      	add	r3, lr
 8000ca4:	1b1b      	subs	r3, r3, r4
 8000ca6:	b2ad      	uxth	r5, r5
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb8:	45a2      	cmp	sl, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	d26b      	bcs.n	8000d9e <__udivmoddi4+0x2aa>
 8000cc6:	45a2      	cmp	sl, r4
 8000cc8:	d969      	bls.n	8000d9e <__udivmoddi4+0x2aa>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4474      	add	r4, lr
 8000cce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd6:	eba4 040a 	sub.w	r4, r4, sl
 8000cda:	454c      	cmp	r4, r9
 8000cdc:	46c2      	mov	sl, r8
 8000cde:	464b      	mov	r3, r9
 8000ce0:	d354      	bcc.n	8000d8c <__udivmoddi4+0x298>
 8000ce2:	d051      	beq.n	8000d88 <__udivmoddi4+0x294>
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d069      	beq.n	8000dbc <__udivmoddi4+0x2c8>
 8000ce8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cec:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cf4:	40fd      	lsrs	r5, r7
 8000cf6:	40fc      	lsrs	r4, r7
 8000cf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000d00:	2700      	movs	r7, #0
 8000d02:	e747      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f703 	lsr.w	r7, r0, r3
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	fa21 f303 	lsr.w	r3, r1, r3
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	4338      	orrs	r0, r7
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d22:	fa1f f885 	uxth.w	r8, r5
 8000d26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2e:	fb07 f308 	mul.w	r3, r7, r8
 8000d32:	428b      	cmp	r3, r1
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x256>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d40:	d22f      	bcs.n	8000da2 <__udivmoddi4+0x2ae>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d92d      	bls.n	8000da2 <__udivmoddi4+0x2ae>
 8000d46:	3f02      	subs	r7, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	b281      	uxth	r1, r0
 8000d4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb00 f308 	mul.w	r3, r0, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x27e>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d68:	d217      	bcs.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d915      	bls.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1ac9      	subs	r1, r1, r3
 8000d74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d78:	e73b      	b.n	8000bf2 <__udivmoddi4+0xfe>
 8000d7a:	4637      	mov	r7, r6
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e709      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d80:	4607      	mov	r7, r0
 8000d82:	e6e7      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d84:	4618      	mov	r0, r3
 8000d86:	e6fb      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d88:	4541      	cmp	r1, r8
 8000d8a:	d2ab      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d90:	eb69 020e 	sbc.w	r2, r9, lr
 8000d94:	3801      	subs	r0, #1
 8000d96:	4613      	mov	r3, r2
 8000d98:	e7a4      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9a:	4660      	mov	r0, ip
 8000d9c:	e7e9      	b.n	8000d72 <__udivmoddi4+0x27e>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	e795      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da2:	4667      	mov	r7, ip
 8000da4:	e7d1      	b.n	8000d4a <__udivmoddi4+0x256>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e77c      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000daa:	3802      	subs	r0, #2
 8000dac:	442c      	add	r4, r5
 8000dae:	e747      	b.n	8000c40 <__udivmoddi4+0x14c>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	442b      	add	r3, r5
 8000db6:	e72f      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db8:	4638      	mov	r0, r7
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xda>
 8000dbc:	4637      	mov	r7, r6
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0xa0>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f92b 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f003 fcdc 	bl	80047b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f943 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f90b 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004
 8000e64:	20000000 	.word	0x20000000

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000094 	.word	0x20000094

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000094 	.word	0x20000094

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff29 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff3e 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff31 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff feda 	bl	8000e90 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e099      	b.n	800121c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001108:	e00f      	b.n	800112a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800110a:	f7ff fec1 	bl	8000e90 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b05      	cmp	r3, #5
 8001116:	d908      	bls.n	800112a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2220      	movs	r2, #32
 800111c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e078      	b.n	800121c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e8      	bne.n	800110a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <HAL_DMA_Init+0x158>)
 8001144:	4013      	ands	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4313      	orrs	r3, r2
 800117a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	2b04      	cmp	r3, #4
 8001182:	d107      	bne.n	8001194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4313      	orrs	r3, r2
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4313      	orrs	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f023 0307 	bic.w	r3, r3, #7
 80011aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d117      	bne.n	80011ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00e      	beq.n	80011ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fa6f 	bl	80016b4 <DMA_CheckFifoParam>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2240      	movs	r2, #64	; 0x40
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ea:	2301      	movs	r3, #1
 80011ec:	e016      	b.n	800121c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fa26 	bl	8001648 <DMA_CalcBaseAndBitshift>
 80011fc:	4603      	mov	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001204:	223f      	movs	r2, #63	; 0x3f
 8001206:	409a      	lsls	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	f010803f 	.word	0xf010803f

08001228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001246:	2b01      	cmp	r3, #1
 8001248:	d101      	bne.n	800124e <HAL_DMA_Start_IT+0x26>
 800124a:	2302      	movs	r3, #2
 800124c:	e040      	b.n	80012d0 <HAL_DMA_Start_IT+0xa8>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d12f      	bne.n	80012c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2202      	movs	r2, #2
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f9b8 	bl	80015ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	223f      	movs	r2, #63	; 0x3f
 8001282:	409a      	lsls	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0216 	orr.w	r2, r2, #22
 8001296:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0208 	orr.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e005      	b.n	80012ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012ca:	2302      	movs	r3, #2
 80012cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012e4:	4b92      	ldr	r3, [pc, #584]	; (8001530 <HAL_DMA_IRQHandler+0x258>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a92      	ldr	r2, [pc, #584]	; (8001534 <HAL_DMA_IRQHandler+0x25c>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0a9b      	lsrs	r3, r3, #10
 80012f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2208      	movs	r2, #8
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d01a      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2208      	movs	r2, #8
 8001332:	409a      	lsls	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	2201      	movs	r2, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2201      	movs	r2, #1
 8001368:	409a      	lsls	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	f043 0202 	orr.w	r2, r3, #2
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	2204      	movs	r2, #4
 8001380:	409a      	lsls	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2204      	movs	r2, #4
 800139e:	409a      	lsls	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a8:	f043 0204 	orr.w	r2, r3, #4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	2210      	movs	r2, #16
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d043      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d03c      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d2:	2210      	movs	r2, #16
 80013d4:	409a      	lsls	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d018      	beq.n	800141a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d108      	bne.n	8001408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d024      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4798      	blx	r3
 8001406:	e01f      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140c:	2b00      	cmp	r3, #0
 800140e:	d01b      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
 8001418:	e016      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0208 	bic.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2220      	movs	r2, #32
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 808e 	beq.w	8001576 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8086 	beq.w	8001576 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	2220      	movs	r2, #32
 8001470:	409a      	lsls	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b05      	cmp	r3, #5
 8001480:	d136      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0216 	bic.w	r2, r2, #22
 8001490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <HAL_DMA_IRQHandler+0x1da>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0208 	bic.w	r2, r2, #8
 80014c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	223f      	movs	r2, #63	; 0x3f
 80014c8:	409a      	lsls	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d07d      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
        }
        return;
 80014ee:	e078      	b.n	80015e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01c      	beq.n	8001538 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	2b00      	cmp	r3, #0
 8001512:	d030      	beq.n	8001576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
 800151c:	e02b      	b.n	8001576 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d027      	beq.n	8001576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
 800152e:	e022      	b.n	8001576 <HAL_DMA_IRQHandler+0x29e>
 8001530:	20000008 	.word	0x20000008
 8001534:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0210 	bic.w	r2, r2, #16
 8001554:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	2b00      	cmp	r3, #0
 800157c:	d032      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d022      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2205      	movs	r2, #5
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	3301      	adds	r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d307      	bcc.n	80015be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f2      	bne.n	80015a2 <HAL_DMA_IRQHandler+0x2ca>
 80015bc:	e000      	b.n	80015c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
 80015e0:	e000      	b.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015e2:	bf00      	nop
    }
  }
}
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop

080015ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001608:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b40      	cmp	r3, #64	; 0x40
 8001618:	d108      	bne.n	800162c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800162a:	e007      	b.n	800163c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3b10      	subs	r3, #16
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <DMA_CalcBaseAndBitshift+0x64>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <DMA_CalcBaseAndBitshift+0x68>)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d909      	bls.n	800168a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	1d1a      	adds	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	659a      	str	r2, [r3, #88]	; 0x58
 8001688:	e007      	b.n	800169a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	aaaaaaab 	.word	0xaaaaaaab
 80016b0:	0800606c 	.word	0x0800606c

080016b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11f      	bne.n	800170e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d855      	bhi.n	8001780 <DMA_CheckFifoParam+0xcc>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <DMA_CheckFifoParam+0x28>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	080016ed 	.word	0x080016ed
 80016e0:	080016ff 	.word	0x080016ff
 80016e4:	080016ed 	.word	0x080016ed
 80016e8:	08001781 	.word	0x08001781
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d045      	beq.n	8001784 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016fc:	e042      	b.n	8001784 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001706:	d13f      	bne.n	8001788 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800170c:	e03c      	b.n	8001788 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001716:	d121      	bne.n	800175c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d836      	bhi.n	800178c <DMA_CheckFifoParam+0xd8>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <DMA_CheckFifoParam+0x70>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001735 	.word	0x08001735
 8001728:	0800173b 	.word	0x0800173b
 800172c:	08001735 	.word	0x08001735
 8001730:	0800174d 	.word	0x0800174d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
      break;
 8001738:	e02f      	b.n	800179a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d024      	beq.n	8001790 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174a:	e021      	b.n	8001790 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001754:	d11e      	bne.n	8001794 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800175a:	e01b      	b.n	8001794 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d902      	bls.n	8001768 <DMA_CheckFifoParam+0xb4>
 8001762:	2b03      	cmp	r3, #3
 8001764:	d003      	beq.n	800176e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001766:	e018      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      break;
 800176c:	e015      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00e      	beq.n	8001798 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
      break;
 800177e:	e00b      	b.n	8001798 <DMA_CheckFifoParam+0xe4>
      break;
 8001780:	bf00      	nop
 8001782:	e00a      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      break;
 8001784:	bf00      	nop
 8001786:	e008      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      break;
 8001788:	bf00      	nop
 800178a:	e006      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      break;
 800178c:	bf00      	nop
 800178e:	e004      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      break;
 8001790:	bf00      	nop
 8001792:	e002      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      break;   
 8001794:	bf00      	nop
 8001796:	e000      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      break;
 8001798:	bf00      	nop
    }
  } 
  
  return status; 
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e16b      	b.n	8001a9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 815a 	bne.w	8001a96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d00b      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f6:	2b11      	cmp	r3, #17
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0xfc>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80b4 	beq.w	8001a96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_GPIO_Init+0x308>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_GPIO_Init+0x308>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_GPIO_Init+0x308>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_GPIO_Init+0x310>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02b      	beq.n	80019ce <HAL_GPIO_Init+0x226>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a50      	ldr	r2, [pc, #320]	; (8001abc <HAL_GPIO_Init+0x314>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d025      	beq.n	80019ca <HAL_GPIO_Init+0x222>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4f      	ldr	r2, [pc, #316]	; (8001ac0 <HAL_GPIO_Init+0x318>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d01f      	beq.n	80019c6 <HAL_GPIO_Init+0x21e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4e      	ldr	r2, [pc, #312]	; (8001ac4 <HAL_GPIO_Init+0x31c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_Init+0x21a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4d      	ldr	r2, [pc, #308]	; (8001ac8 <HAL_GPIO_Init+0x320>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0x216>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4c      	ldr	r2, [pc, #304]	; (8001acc <HAL_GPIO_Init+0x324>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_Init+0x212>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <HAL_GPIO_Init+0x328>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4a      	ldr	r2, [pc, #296]	; (8001ad4 <HAL_GPIO_Init+0x32c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_Init+0x20a>
 80019ae:	2307      	movs	r3, #7
 80019b0:	e00e      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019b2:	2308      	movs	r3, #8
 80019b4:	e00c      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e00a      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e008      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019be:	2304      	movs	r3, #4
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e004      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x228>
 80019ce:	2300      	movs	r3, #0
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f002 0203 	and.w	r2, r2, #3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4093      	lsls	r3, r2
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e0:	4934      	ldr	r1, [pc, #208]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a18:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	f67f ae90 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3724      	adds	r7, #36	; 0x24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021c00 	.word	0x40021c00
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e128      	b.n	8001d74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a90      	ldr	r2, [pc, #576]	; (8001d7c <HAL_I2S_Init+0x26c>)
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f002 fe61 	bl	8004804 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b58:	f023 030f 	bic.w	r3, r3, #15
 8001b5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2202      	movs	r2, #2
 8001b64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d060      	beq.n	8001c30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b76:	2310      	movs	r3, #16
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e001      	b.n	8001b80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	d802      	bhi.n	8001b8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f001 fc0c 	bl	80033ac <HAL_RCCEx_GetPeriphCLKFreq>
 8001b94:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9e:	d125      	bne.n	8001bec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d010      	beq.n	8001bca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	3305      	adds	r3, #5
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e01f      	b.n	8001c0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	3305      	adds	r3, #5
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e00e      	b.n	8001c0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	3305      	adds	r3, #5
 8001c08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4a5c      	ldr	r2, [pc, #368]	; (8001d80 <HAL_I2S_Init+0x270>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	e003      	b.n	8001c38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d902      	bls.n	8001c44 <HAL_I2S_Init+0x134>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	2bff      	cmp	r3, #255	; 0xff
 8001c42:	d907      	bls.n	8001c54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e08f      	b.n	8001d74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	ea42 0103 	orr.w	r1, r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c72:	f023 030f 	bic.w	r3, r3, #15
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6851      	ldr	r1, [r2, #4]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6892      	ldr	r2, [r2, #8]
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	68d2      	ldr	r2, [r2, #12]
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6992      	ldr	r2, [r2, #24]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d161      	bne.n	8001d64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a38      	ldr	r2, [pc, #224]	; (8001d84 <HAL_I2S_Init+0x274>)
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a37      	ldr	r2, [pc, #220]	; (8001d88 <HAL_I2S_Init+0x278>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_I2S_Init+0x1a4>
 8001cb0:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_I2S_Init+0x27c>)
 8001cb2:	e001      	b.n	8001cb8 <HAL_I2S_Init+0x1a8>
 8001cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	4932      	ldr	r1, [pc, #200]	; (8001d88 <HAL_I2S_Init+0x278>)
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_I2S_Init+0x1b8>
 8001cc4:	4a31      	ldr	r2, [pc, #196]	; (8001d8c <HAL_I2S_Init+0x27c>)
 8001cc6:	e001      	b.n	8001ccc <HAL_I2S_Init+0x1bc>
 8001cc8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ccc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cd0:	f023 030f 	bic.w	r3, r3, #15
 8001cd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2b      	ldr	r2, [pc, #172]	; (8001d88 <HAL_I2S_Init+0x278>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2S_Init+0x1d4>
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_I2S_Init+0x27c>)
 8001ce2:	e001      	b.n	8001ce8 <HAL_I2S_Init+0x1d8>
 8001ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ce8:	2202      	movs	r2, #2
 8001cea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_I2S_Init+0x278>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_I2S_Init+0x1ea>
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_I2S_Init+0x27c>)
 8001cf8:	e001      	b.n	8001cfe <HAL_I2S_Init+0x1ee>
 8001cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0a:	d003      	beq.n	8001d14 <HAL_I2S_Init+0x204>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d103      	bne.n	8001d1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e001      	b.n	8001d20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001d36:	4303      	orrs	r3, r0
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <HAL_I2S_Init+0x278>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_I2S_Init+0x24c>
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_I2S_Init+0x27c>)
 8001d5a:	e001      	b.n	8001d60 <HAL_I2S_Init+0x250>
 8001d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d60:	897a      	ldrh	r2, [r7, #10]
 8001d62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	08001e87 	.word	0x08001e87
 8001d80:	cccccccd 	.word	0xcccccccd
 8001d84:	080022b1 	.word	0x080022b1
 8001d88:	40003800 	.word	0x40003800
 8001d8c:	40003400 	.word	0x40003400

08001d90 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	881a      	ldrh	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	1c9a      	adds	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10e      	bne.n	8001e20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffb8 	bl	8001d90 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	1c9a      	adds	r2, r3, #2
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10e      	bne.n	8001e7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff93 	bl	8001da4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d13a      	bne.n	8001f18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d109      	bne.n	8001ec0 <I2S_IRQHandler+0x3a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d102      	bne.n	8001ec0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffb4 	bl	8001e28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b40      	cmp	r3, #64	; 0x40
 8001ec8:	d126      	bne.n	8001f18 <I2S_IRQHandler+0x92>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d11f      	bne.n	8001f18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f043 0202 	orr.w	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff50 	bl	8001db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d136      	bne.n	8001f92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d109      	bne.n	8001f42 <I2S_IRQHandler+0xbc>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d102      	bne.n	8001f42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff45 	bl	8001dcc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d122      	bne.n	8001f92 <I2S_IRQHandler+0x10c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d11b      	bne.n	8001f92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f043 0204 	orr.w	r2, r3, #4
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff13 	bl	8001db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d002      	beq.n	8001fc8 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fc6:	e160      	b.n	800228a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e15a      	b.n	8002294 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e152      	b.n	8002294 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d002      	beq.n	800201a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d114      	bne.n	8002044 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	865a      	strh	r2, [r3, #50]	; 0x32
 8002042:	e00b      	b.n	800205c <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	887a      	ldrh	r2, [r7, #2]
 800204e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	887a      	ldrh	r2, [r7, #2]
 800205a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	4a8b      	ldr	r2, [pc, #556]	; (800229c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	4a8a      	ldr	r2, [pc, #552]	; (80022a0 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	4a89      	ldr	r2, [pc, #548]	; (80022a4 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002080:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	4a85      	ldr	r2, [pc, #532]	; (800229c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	4a84      	ldr	r2, [pc, #528]	; (80022a0 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	4a83      	ldr	r2, [pc, #524]	; (80022a4 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002098:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a4:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ac:	d002      	beq.n	80020b4 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d16b      	bne.n	800218c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a79      	ldr	r2, [pc, #484]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80020c6:	4b79      	ldr	r3, [pc, #484]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80020c8:	e001      	b.n	80020ce <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80020ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ce:	330c      	adds	r3, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f7ff f8a4 	bl	8001228 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a70      	ldr	r2, [pc, #448]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80020ec:	e001      	b.n	80020f2 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80020ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	496b      	ldr	r1, [pc, #428]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80020fa:	428b      	cmp	r3, r1
 80020fc:	d101      	bne.n	8002102 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80020fe:	4b6b      	ldr	r3, [pc, #428]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002100:	e001      	b.n	8002106 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	330c      	adds	r3, #12
 8002120:	461a      	mov	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	b29b      	uxth	r3, r3
 8002128:	f7ff f87e 	bl	8001228 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0202 	orr.w	r2, r2, #2
 800213a:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	f000 809e 	beq.w	800228a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a55      	ldr	r2, [pc, #340]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002158:	4b54      	ldr	r3, [pc, #336]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800215a:	e001      	b.n	8002160 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 800215c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4950      	ldr	r1, [pc, #320]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002168:	428b      	cmp	r3, r1
 800216a:	d101      	bne.n	8002170 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 800216c:	4b4f      	ldr	r3, [pc, #316]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800216e:	e001      	b.n	8002174 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002170:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002178:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002188:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800218a:	e07e      	b.n	800228a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800219a:	d10a      	bne.n	80021b2 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a38      	ldr	r2, [pc, #224]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021cc:	e001      	b.n	80021d2 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80021ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021d2:	330c      	adds	r3, #12
 80021d4:	461a      	mov	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f7ff f824 	bl	8001228 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a30      	ldr	r2, [pc, #192]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021ec:	e001      	b.n	80021f2 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80021ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	492b      	ldr	r1, [pc, #172]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021fa:	428b      	cmp	r3, r1
 80021fc:	d101      	bne.n	8002202 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002200:	e001      	b.n	8002206 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002206:	f042 0202 	orr.w	r2, r2, #2
 800220a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	330c      	adds	r3, #12
 800221a:	4619      	mov	r1, r3
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002224:	b29b      	uxth	r3, r3
 8002226:	f7fe ffff 	bl	8001228 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	d01e      	beq.n	8002288 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002256:	e001      	b.n	800225c <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4911      	ldr	r1, [pc, #68]	; (80022a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002264:	428b      	cmp	r3, r1
 8002266:	d101      	bne.n	800226c <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800226a:	e001      	b.n	8002270 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 800226c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002270:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002274:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002284:	61da      	str	r2, [r3, #28]
 8002286:	e000      	b.n	800228a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002288:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002292:	7ffb      	ldrb	r3, [r7, #31]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	08002559 	.word	0x08002559
 80022a0:	08002575 	.word	0x08002575
 80022a4:	080026ad 	.word	0x080026ad
 80022a8:	40003800 	.word	0x40003800
 80022ac:	40003400 	.word	0x40003400

080022b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4aa2      	ldr	r2, [pc, #648]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80022ca:	4ba2      	ldr	r3, [pc, #648]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022cc:	e001      	b.n	80022d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80022ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a9b      	ldr	r2, [pc, #620]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80022e8:	4b9a      	ldr	r3, [pc, #616]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022ea:	e001      	b.n	80022f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80022ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022fc:	d004      	beq.n	8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 8099 	bne.w	800243a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d107      	bne.n	8002322 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fa05 	bl	800272c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 faa8 	bl	800288c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d13a      	bne.n	80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d035      	beq.n	80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a7e      	ldr	r2, [pc, #504]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800235a:	4b7e      	ldr	r3, [pc, #504]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800235c:	e001      	b.n	8002362 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800235e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4979      	ldr	r1, [pc, #484]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800236a:	428b      	cmp	r3, r1
 800236c:	d101      	bne.n	8002372 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800236e:	4b79      	ldr	r3, [pc, #484]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002370:	e001      	b.n	8002376 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002376:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800237a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800238a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f043 0202 	orr.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fcfe 	bl	8001db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	f040 80be 	bne.w	8002544 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80b8 	beq.w	8002544 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a59      	ldr	r2, [pc, #356]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80023ee:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023f0:	e001      	b.n	80023f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80023f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4954      	ldr	r1, [pc, #336]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023fe:	428b      	cmp	r3, r1
 8002400:	d101      	bne.n	8002406 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002404:	e001      	b.n	800240a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800240a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800240e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f043 0204 	orr.w	r2, r3, #4
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fcc0 	bl	8001db8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002438:	e084      	b.n	8002544 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b02      	cmp	r3, #2
 8002442:	d107      	bne.n	8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f99e 	bl	8002790 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f9dd 	bl	8002828 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002474:	2b40      	cmp	r3, #64	; 0x40
 8002476:	d12f      	bne.n	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d02a      	beq.n	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002490:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800249e:	e001      	b.n	80024a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80024a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4929      	ldr	r1, [pc, #164]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024ac:	428b      	cmp	r3, r1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024b2:	e001      	b.n	80024b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80024b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fc70 	bl	8001db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d131      	bne.n	8002546 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d02c      	beq.n	8002546 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024f8:	e001      	b.n	80024fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80024fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4912      	ldr	r1, [pc, #72]	; (8002550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002506:	428b      	cmp	r3, r1
 8002508:	d101      	bne.n	800250e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800250c:	e001      	b.n	8002512 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800250e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002512:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002516:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002526:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f043 0204 	orr.w	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fc3b 	bl	8001db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002542:	e000      	b.n	8002546 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002544:	bf00      	nop
}
 8002546:	bf00      	nop
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40003800 	.word	0x40003800
 8002554:	40003400 	.word	0x40003400

08002558 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f001 feb6 	bl	80042d8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8084 	bne.w	8002694 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	d13c      	bne.n	8002610 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a4:	d006      	beq.n	80025b4 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d116      	bne.n	80025e2 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <I2SEx_TxRxDMACplt+0x130>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <I2SEx_TxRxDMACplt+0x4e>
 80025be:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <I2SEx_TxRxDMACplt+0x134>)
 80025c0:	e001      	b.n	80025c6 <I2SEx_TxRxDMACplt+0x52>
 80025c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <I2SEx_TxRxDMACplt+0x130>)
 80025ce:	428b      	cmp	r3, r1
 80025d0:	d101      	bne.n	80025d6 <I2SEx_TxRxDMACplt+0x62>
 80025d2:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <I2SEx_TxRxDMACplt+0x134>)
 80025d4:	e001      	b.n	80025da <I2SEx_TxRxDMACplt+0x66>
 80025d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	e007      	b.n	80025f2 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f001 fe74 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	d13c      	bne.n	8002694 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002628:	d006      	beq.n	8002638 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002634:	2b00      	cmp	r3, #0
 8002636:	d108      	bne.n	800264a <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0202 	bic.w	r2, r2, #2
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	e015      	b.n	8002676 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <I2SEx_TxRxDMACplt+0x130>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <I2SEx_TxRxDMACplt+0xe4>
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <I2SEx_TxRxDMACplt+0x134>)
 8002656:	e001      	b.n	800265c <I2SEx_TxRxDMACplt+0xe8>
 8002658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4910      	ldr	r1, [pc, #64]	; (80026a4 <I2SEx_TxRxDMACplt+0x130>)
 8002664:	428b      	cmp	r3, r1
 8002666:	d101      	bne.n	800266c <I2SEx_TxRxDMACplt+0xf8>
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <I2SEx_TxRxDMACplt+0x134>)
 800266a:	e001      	b.n	8002670 <I2SEx_TxRxDMACplt+0xfc>
 800266c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002670:	f022 0202 	bic.w	r2, r2, #2
 8002674:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f001 fe32 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f001 fe2f 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40003800 	.word	0x40003800
 80026a8:	40003400 	.word	0x40003400

080026ac <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0203 	bic.w	r2, r2, #3
 80026c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <I2SEx_TxRxDMAError+0x78>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <I2SEx_TxRxDMAError+0x2c>
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <I2SEx_TxRxDMAError+0x7c>)
 80026d6:	e001      	b.n	80026dc <I2SEx_TxRxDMAError+0x30>
 80026d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4910      	ldr	r1, [pc, #64]	; (8002724 <I2SEx_TxRxDMAError+0x78>)
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d101      	bne.n	80026ec <I2SEx_TxRxDMAError+0x40>
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <I2SEx_TxRxDMAError+0x7c>)
 80026ea:	e001      	b.n	80026f0 <I2SEx_TxRxDMAError+0x44>
 80026ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f0:	f022 0203 	bic.w	r2, r2, #3
 80026f4:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f043 0208 	orr.w	r2, r3, #8
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fb4e 	bl	8001db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40003800 	.word	0x40003800
 8002728:	40003400 	.word	0x40003400

0800272c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c99      	adds	r1, r3, #2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6251      	str	r1, [r2, #36]	; 0x24
 800273e:	881a      	ldrh	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d113      	bne.n	8002786 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800276c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d106      	bne.n	8002786 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f001 fdb9 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	1c99      	adds	r1, r3, #2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6251      	str	r1, [r2, #36]	; 0x24
 80027a2:	8819      	ldrh	r1, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <I2SEx_TxISR_I2SExt+0x90>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <I2SEx_TxISR_I2SExt+0x22>
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <I2SEx_TxISR_I2SExt+0x94>)
 80027b0:	e001      	b.n	80027b6 <I2SEx_TxISR_I2SExt+0x26>
 80027b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b6:	460a      	mov	r2, r1
 80027b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d121      	bne.n	8002816 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <I2SEx_TxISR_I2SExt+0x90>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <I2SEx_TxISR_I2SExt+0x50>
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <I2SEx_TxISR_I2SExt+0x94>)
 80027de:	e001      	b.n	80027e4 <I2SEx_TxISR_I2SExt+0x54>
 80027e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	490d      	ldr	r1, [pc, #52]	; (8002820 <I2SEx_TxISR_I2SExt+0x90>)
 80027ec:	428b      	cmp	r3, r1
 80027ee:	d101      	bne.n	80027f4 <I2SEx_TxISR_I2SExt+0x64>
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <I2SEx_TxISR_I2SExt+0x94>)
 80027f2:	e001      	b.n	80027f8 <I2SEx_TxISR_I2SExt+0x68>
 80027f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f001 fd71 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40003800 	.word	0x40003800
 8002824:	40003400 	.word	0x40003400

08002828 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68d8      	ldr	r0, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	1c99      	adds	r1, r3, #2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002840:	b282      	uxth	r2, r0
 8002842:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d113      	bne.n	8002884 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800286a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f001 fd3a 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a20      	ldr	r2, [pc, #128]	; (800291c <I2SEx_RxISR_I2SExt+0x90>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <I2SEx_RxISR_I2SExt+0x16>
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <I2SEx_RxISR_I2SExt+0x94>)
 80028a0:	e001      	b.n	80028a6 <I2SEx_RxISR_I2SExt+0x1a>
 80028a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a6:	68d8      	ldr	r0, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	1c99      	adds	r1, r3, #2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80028b2:	b282      	uxth	r2, r0
 80028b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d121      	bne.n	8002912 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <I2SEx_RxISR_I2SExt+0x90>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <I2SEx_RxISR_I2SExt+0x50>
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <I2SEx_RxISR_I2SExt+0x94>)
 80028da:	e001      	b.n	80028e0 <I2SEx_RxISR_I2SExt+0x54>
 80028dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <I2SEx_RxISR_I2SExt+0x90>)
 80028e8:	428b      	cmp	r3, r1
 80028ea:	d101      	bne.n	80028f0 <I2SEx_RxISR_I2SExt+0x64>
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <I2SEx_RxISR_I2SExt+0x94>)
 80028ee:	e001      	b.n	80028f4 <I2SEx_RxISR_I2SExt+0x68>
 80028f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f001 fcf3 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40003800 	.word	0x40003800
 8002920:	40003400 	.word	0x40003400

08002924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e25b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d075      	beq.n	8002a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002942:	4ba3      	ldr	r3, [pc, #652]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b04      	cmp	r3, #4
 800294c:	d00c      	beq.n	8002968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294e:	4ba0      	ldr	r3, [pc, #640]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002956:	2b08      	cmp	r3, #8
 8002958:	d112      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295a:	4b9d      	ldr	r3, [pc, #628]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002966:	d10b      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	4b99      	ldr	r3, [pc, #612]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05b      	beq.n	8002a2c <HAL_RCC_OscConfig+0x108>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d157      	bne.n	8002a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e236      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d106      	bne.n	8002998 <HAL_RCC_OscConfig+0x74>
 800298a:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a90      	ldr	r2, [pc, #576]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e01d      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a8a      	ldr	r2, [pc, #552]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a87      	ldr	r2, [pc, #540]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 80029bc:	4b84      	ldr	r3, [pc, #528]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a83      	ldr	r2, [pc, #524]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a80      	ldr	r2, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe fa58 	bl	8000e90 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe fa54 	bl	8000e90 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1fb      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0xc0>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fa44 	bl	8000e90 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fa40 	bl	8000e90 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1e7      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0xe8>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3a:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a46:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d11c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a52:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1bb      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4952      	ldr	r1, [pc, #328]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	e03a      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <HAL_RCC_OscConfig+0x2b0>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe f9f9 	bl	8000e90 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe f9f5 	bl	8000e90 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e19c      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4940      	ldr	r1, [pc, #256]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <HAL_RCC_OscConfig+0x2b0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe f9d8 	bl	8000e90 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7fe f9d4 	bl	8000e90 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e17b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d030      	beq.n	8002b70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_OscConfig+0x2b4>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe f9b8 	bl	8000e90 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fe f9b4 	bl	8000e90 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e15b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x200>
 8002b42:	e015      	b.n	8002b70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_OscConfig+0x2b4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe f9a1 	bl	8000e90 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b52:	f7fe f99d 	bl	8000e90 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e144      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a0 	beq.w	8002cbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d121      	bne.n	8002bfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe f963 	bl	8000e90 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e011      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2ce>
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
 8002bd8:	42470e80 	.word	0x42470e80
 8002bdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be0:	f7fe f956 	bl	8000e90 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0fd      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
 8002c06:	4b7d      	ldr	r3, [pc, #500]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a7c      	ldr	r2, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e01c      	b.n	8002c4e <HAL_RCC_OscConfig+0x32a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x312>
 8002c1c:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a76      	ldr	r2, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	4b74      	ldr	r3, [pc, #464]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a73      	ldr	r2, [pc, #460]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	e00b      	b.n	8002c4e <HAL_RCC_OscConfig+0x32a>
 8002c36:	4b71      	ldr	r3, [pc, #452]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a70      	ldr	r2, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a6d      	ldr	r2, [pc, #436]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d015      	beq.n	8002c82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe f91b 	bl	8000e90 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe f917 	bl	8000e90 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0bc      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ee      	beq.n	8002c5e <HAL_RCC_OscConfig+0x33a>
 8002c80:	e014      	b.n	8002cac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fe f905 	bl	8000e90 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe f901 	bl	8000e90 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0a6      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca0:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ee      	bne.n	8002c8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a51      	ldr	r2, [pc, #324]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8092 	beq.w	8002dec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d05c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d141      	bne.n	8002d60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe f8d5 	bl	8000e90 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fe f8d1 	bl	8000e90 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e078      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	019b      	lsls	r3, r3, #6
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	4933      	ldr	r1, [pc, #204]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d32:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe f8aa 	bl	8000e90 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe f8a6 	bl	8000e90 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04d      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x41c>
 8002d5e:	e045      	b.n	8002dec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fe f893 	bl	8000e90 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fe f88f 	bl	8000e90 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e036      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x44a>
 8002d8c:	e02e      	b.n	8002dec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e029      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d115      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470060 	.word	0x42470060

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cc      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d90c      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4934      	ldr	r1, [pc, #208]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fd ffcc 	bl	8000e90 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fd ffc8 	bl	8000e90 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20c      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4601      	mov	r1, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	5cd3      	ldrb	r3, [r2, r3]
 8002f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd ff2c 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	08006074 	.word	0x08006074
 8002fc8:	20000008 	.word	0x20000008
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe6:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d007      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x32>
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d008      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x38>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 80b4 	bne.w	8003164 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ffe:	60bb      	str	r3, [r7, #8]
       break;
 8003000:	e0b3      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003002:	4b5e      	ldr	r3, [pc, #376]	; (800317c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003004:	60bb      	str	r3, [r7, #8]
      break;
 8003006:	e0b0      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003008:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003010:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003012:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d04a      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301e:	4b55      	ldr	r3, [pc, #340]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	099b      	lsrs	r3, r3, #6
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	f240 11ff 	movw	r1, #511	; 0x1ff
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	ea03 0501 	and.w	r5, r3, r1
 8003034:	ea04 0602 	and.w	r6, r4, r2
 8003038:	4629      	mov	r1, r5
 800303a:	4632      	mov	r2, r6
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f04f 0400 	mov.w	r4, #0
 8003044:	0154      	lsls	r4, r2, #5
 8003046:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800304a:	014b      	lsls	r3, r1, #5
 800304c:	4619      	mov	r1, r3
 800304e:	4622      	mov	r2, r4
 8003050:	1b49      	subs	r1, r1, r5
 8003052:	eb62 0206 	sbc.w	r2, r2, r6
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	f04f 0400 	mov.w	r4, #0
 800305e:	0194      	lsls	r4, r2, #6
 8003060:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003064:	018b      	lsls	r3, r1, #6
 8003066:	1a5b      	subs	r3, r3, r1
 8003068:	eb64 0402 	sbc.w	r4, r4, r2
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	00e2      	lsls	r2, r4, #3
 8003076:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800307a:	00d9      	lsls	r1, r3, #3
 800307c:	460b      	mov	r3, r1
 800307e:	4614      	mov	r4, r2
 8003080:	195b      	adds	r3, r3, r5
 8003082:	eb44 0406 	adc.w	r4, r4, r6
 8003086:	f04f 0100 	mov.w	r1, #0
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	0262      	lsls	r2, r4, #9
 8003090:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003094:	0259      	lsls	r1, r3, #9
 8003096:	460b      	mov	r3, r1
 8003098:	4614      	mov	r4, r2
 800309a:	4618      	mov	r0, r3
 800309c:	4621      	mov	r1, r4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f04f 0400 	mov.w	r4, #0
 80030a4:	461a      	mov	r2, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	f7fd fd0c 	bl	8000ac4 <__aeabi_uldivmod>
 80030ac:	4603      	mov	r3, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	e049      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b4:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	f04f 0400 	mov.w	r4, #0
 80030be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	ea03 0501 	and.w	r5, r3, r1
 80030ca:	ea04 0602 	and.w	r6, r4, r2
 80030ce:	4629      	mov	r1, r5
 80030d0:	4632      	mov	r2, r6
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f04f 0400 	mov.w	r4, #0
 80030da:	0154      	lsls	r4, r2, #5
 80030dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030e0:	014b      	lsls	r3, r1, #5
 80030e2:	4619      	mov	r1, r3
 80030e4:	4622      	mov	r2, r4
 80030e6:	1b49      	subs	r1, r1, r5
 80030e8:	eb62 0206 	sbc.w	r2, r2, r6
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	f04f 0400 	mov.w	r4, #0
 80030f4:	0194      	lsls	r4, r2, #6
 80030f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030fa:	018b      	lsls	r3, r1, #6
 80030fc:	1a5b      	subs	r3, r3, r1
 80030fe:	eb64 0402 	sbc.w	r4, r4, r2
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003110:	00d9      	lsls	r1, r3, #3
 8003112:	460b      	mov	r3, r1
 8003114:	4614      	mov	r4, r2
 8003116:	195b      	adds	r3, r3, r5
 8003118:	eb44 0406 	adc.w	r4, r4, r6
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	02a2      	lsls	r2, r4, #10
 8003126:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800312a:	0299      	lsls	r1, r3, #10
 800312c:	460b      	mov	r3, r1
 800312e:	4614      	mov	r4, r2
 8003130:	4618      	mov	r0, r3
 8003132:	4621      	mov	r1, r4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f04f 0400 	mov.w	r4, #0
 800313a:	461a      	mov	r2, r3
 800313c:	4623      	mov	r3, r4
 800313e:	f7fd fcc1 	bl	8000ac4 <__aeabi_uldivmod>
 8003142:	4603      	mov	r3, r0
 8003144:	460c      	mov	r4, r1
 8003146:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	3301      	adds	r3, #1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	60bb      	str	r3, [r7, #8]
      break;
 8003162:	e002      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003166:	60bb      	str	r3, [r7, #8]
      break;
 8003168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316a:	68bb      	ldr	r3, [r7, #8]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400
 800317c:	007a1200 	.word	0x007a1200

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000008 	.word	0x20000008

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4601      	mov	r1, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4a03      	ldr	r2, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08006084 	.word	0x08006084

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffdc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031c8:	4601      	mov	r1, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4a03      	ldr	r2, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08006084 	.word	0x08006084

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800320c:	2b00      	cmp	r3, #0
 800320e:	d035      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003210:	4b62      	ldr	r3, [pc, #392]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003216:	f7fd fe3b 	bl	8000e90 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800321e:	f7fd fe37 	bl	8000e90 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0b0      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003230:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f0      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	019a      	lsls	r2, r3, #6
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	071b      	lsls	r3, r3, #28
 8003248:	4955      	ldr	r1, [pc, #340]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003250:	4b52      	ldr	r3, [pc, #328]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003256:	f7fd fe1b 	bl	8000e90 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800325e:	f7fd fe17 	bl	8000e90 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e090      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8083 	beq.w	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a43      	ldr	r2, [pc, #268]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032a6:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a3e      	ldr	r2, [pc, #248]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032b2:	f7fd fded 	bl	8000e90 <HAL_GetTick>
 80032b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032ba:	f7fd fde9 	bl	8000e90 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e062      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032cc:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02f      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d028      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003300:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003306:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800330c:	4a24      	ldr	r2, [pc, #144]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003312:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d114      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800331e:	f7fd fdb7 	bl	8000e90 <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fd fdb3 	bl	8000e90 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e02a      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ee      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003354:	d10d      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336a:	490d      	ldr	r1, [pc, #52]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]
 8003370:	e005      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003378:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800337c:	6093      	str	r3, [r2, #8]
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338a:	4905      	ldr	r1, [pc, #20]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800338c:	4313      	orrs	r3, r2
 800338e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	42470068 	.word	0x42470068
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000
 80033a8:	42470e40 	.word	0x42470e40

080033ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d13d      	bne.n	8003446 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80033ca:	4b22      	ldr	r3, [pc, #136]	; (8003454 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033d2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d12f      	bne.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033e0:	617b      	str	r3, [r7, #20]
          break;
 80033e2:	e02f      	b.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f0:	d108      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033fa:	4a18      	ldr	r2, [pc, #96]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	e007      	b.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800342a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342e:	0f1b      	lsrs	r3, r3, #28
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]
          break;
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
          break;
 8003442:	bf00      	nop
        }
      }
      break;
 8003444:	bf00      	nop
    }
  }
  return frequency;
 8003446:	697b      	ldr	r3, [r7, #20]
}
 8003448:	4618      	mov	r0, r3
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40023800 	.word	0x40023800
 8003458:	00bb8000 	.word	0x00bb8000
 800345c:	007a1200 	.word	0x007a1200
 8003460:	00f42400 	.word	0x00f42400

08003464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e03f      	b.n	80034f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f001 fa9e 	bl	80049cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f95f 	bl	800376c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b20      	cmp	r3, #32
 8003518:	d153      	bne.n	80035c2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_UART_Transmit_DMA+0x26>
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e04c      	b.n	80035c4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_UART_Transmit_DMA+0x38>
 8003534:	2302      	movs	r3, #2
 8003536:	e045      	b.n	80035c4 <HAL_UART_Transmit_DMA+0xc4>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2221      	movs	r2, #33	; 0x21
 800355c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_UART_Transmit_DMA+0xcc>)
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_UART_Transmit_DMA+0xd0>)
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_UART_Transmit_DMA+0xd4>)
 8003576:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	2200      	movs	r2, #0
 800357e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3304      	adds	r3, #4
 8003594:	461a      	mov	r2, r3
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	f7fd fe46 	bl	8001228 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035bc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003653 	.word	0x08003653
 80035d4:	0800366f 	.word	0x0800366f

080035d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d113      	bne.n	8003644 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003630:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003640:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003642:	e002      	b.n	800364a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff ffc7 	bl	80035d8 <HAL_UART_TxCpltCallback>
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fe23 	bl	80042ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b80      	cmp	r3, #128	; 0x80
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b21      	cmp	r3, #33	; 0x21
 80036a0:	d108      	bne.n	80036b4 <UART_DMAError+0x46>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80036ae:	68b8      	ldr	r0, [r7, #8]
 80036b0:	f000 f827 	bl	8003702 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b22      	cmp	r3, #34	; 0x22
 80036d4:	d108      	bne.n	80036e8 <UART_DMAError+0x7a>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2200      	movs	r2, #0
 80036e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80036e2:	68b8      	ldr	r0, [r7, #8]
 80036e4:	f000 f823 	bl	800372e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	f043 0210 	orr.w	r2, r3, #16
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f4:	68b8      	ldr	r0, [r7, #8]
 80036f6:	f7ff ff79 	bl	80035ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003718:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003744:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037ae:	f023 030c 	bic.w	r3, r3, #12
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037da:	f040 818b 	bne.w	8003af4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4ac1      	ldr	r2, [pc, #772]	; (8003ae8 <UART_SetConfig+0x37c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d005      	beq.n	80037f4 <UART_SetConfig+0x88>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4abf      	ldr	r2, [pc, #764]	; (8003aec <UART_SetConfig+0x380>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f040 80bd 	bne.w	800396e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7ff fce4 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 80037f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	461d      	mov	r5, r3
 80037fe:	f04f 0600 	mov.w	r6, #0
 8003802:	46a8      	mov	r8, r5
 8003804:	46b1      	mov	r9, r6
 8003806:	eb18 0308 	adds.w	r3, r8, r8
 800380a:	eb49 0409 	adc.w	r4, r9, r9
 800380e:	4698      	mov	r8, r3
 8003810:	46a1      	mov	r9, r4
 8003812:	eb18 0805 	adds.w	r8, r8, r5
 8003816:	eb49 0906 	adc.w	r9, r9, r6
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003826:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800382a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800382e:	4688      	mov	r8, r1
 8003830:	4691      	mov	r9, r2
 8003832:	eb18 0005 	adds.w	r0, r8, r5
 8003836:	eb49 0106 	adc.w	r1, r9, r6
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	461d      	mov	r5, r3
 8003840:	f04f 0600 	mov.w	r6, #0
 8003844:	196b      	adds	r3, r5, r5
 8003846:	eb46 0406 	adc.w	r4, r6, r6
 800384a:	461a      	mov	r2, r3
 800384c:	4623      	mov	r3, r4
 800384e:	f7fd f939 	bl	8000ac4 <__aeabi_uldivmod>
 8003852:	4603      	mov	r3, r0
 8003854:	460c      	mov	r4, r1
 8003856:	461a      	mov	r2, r3
 8003858:	4ba5      	ldr	r3, [pc, #660]	; (8003af0 <UART_SetConfig+0x384>)
 800385a:	fba3 2302 	umull	r2, r3, r3, r2
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	461d      	mov	r5, r3
 8003868:	f04f 0600 	mov.w	r6, #0
 800386c:	46a9      	mov	r9, r5
 800386e:	46b2      	mov	sl, r6
 8003870:	eb19 0309 	adds.w	r3, r9, r9
 8003874:	eb4a 040a 	adc.w	r4, sl, sl
 8003878:	4699      	mov	r9, r3
 800387a:	46a2      	mov	sl, r4
 800387c:	eb19 0905 	adds.w	r9, r9, r5
 8003880:	eb4a 0a06 	adc.w	sl, sl, r6
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003898:	4689      	mov	r9, r1
 800389a:	4692      	mov	sl, r2
 800389c:	eb19 0005 	adds.w	r0, r9, r5
 80038a0:	eb4a 0106 	adc.w	r1, sl, r6
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	461d      	mov	r5, r3
 80038aa:	f04f 0600 	mov.w	r6, #0
 80038ae:	196b      	adds	r3, r5, r5
 80038b0:	eb46 0406 	adc.w	r4, r6, r6
 80038b4:	461a      	mov	r2, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	f7fd f904 	bl	8000ac4 <__aeabi_uldivmod>
 80038bc:	4603      	mov	r3, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b8b      	ldr	r3, [pc, #556]	; (8003af0 <UART_SetConfig+0x384>)
 80038c4:	fba3 1302 	umull	r1, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	2164      	movs	r1, #100	; 0x64
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	3332      	adds	r3, #50	; 0x32
 80038d6:	4a86      	ldr	r2, [pc, #536]	; (8003af0 <UART_SetConfig+0x384>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e4:	4498      	add	r8, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	461d      	mov	r5, r3
 80038ea:	f04f 0600 	mov.w	r6, #0
 80038ee:	46a9      	mov	r9, r5
 80038f0:	46b2      	mov	sl, r6
 80038f2:	eb19 0309 	adds.w	r3, r9, r9
 80038f6:	eb4a 040a 	adc.w	r4, sl, sl
 80038fa:	4699      	mov	r9, r3
 80038fc:	46a2      	mov	sl, r4
 80038fe:	eb19 0905 	adds.w	r9, r9, r5
 8003902:	eb4a 0a06 	adc.w	sl, sl, r6
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003912:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003916:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800391a:	4689      	mov	r9, r1
 800391c:	4692      	mov	sl, r2
 800391e:	eb19 0005 	adds.w	r0, r9, r5
 8003922:	eb4a 0106 	adc.w	r1, sl, r6
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	461d      	mov	r5, r3
 800392c:	f04f 0600 	mov.w	r6, #0
 8003930:	196b      	adds	r3, r5, r5
 8003932:	eb46 0406 	adc.w	r4, r6, r6
 8003936:	461a      	mov	r2, r3
 8003938:	4623      	mov	r3, r4
 800393a:	f7fd f8c3 	bl	8000ac4 <__aeabi_uldivmod>
 800393e:	4603      	mov	r3, r0
 8003940:	460c      	mov	r4, r1
 8003942:	461a      	mov	r2, r3
 8003944:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <UART_SetConfig+0x384>)
 8003946:	fba3 1302 	umull	r1, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2164      	movs	r1, #100	; 0x64
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a65      	ldr	r2, [pc, #404]	; (8003af0 <UART_SetConfig+0x384>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 0207 	and.w	r2, r3, #7
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4442      	add	r2, r8
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	e26f      	b.n	8003e4e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800396e:	f7ff fc13 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8003972:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	461d      	mov	r5, r3
 8003978:	f04f 0600 	mov.w	r6, #0
 800397c:	46a8      	mov	r8, r5
 800397e:	46b1      	mov	r9, r6
 8003980:	eb18 0308 	adds.w	r3, r8, r8
 8003984:	eb49 0409 	adc.w	r4, r9, r9
 8003988:	4698      	mov	r8, r3
 800398a:	46a1      	mov	r9, r4
 800398c:	eb18 0805 	adds.w	r8, r8, r5
 8003990:	eb49 0906 	adc.w	r9, r9, r6
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039a8:	4688      	mov	r8, r1
 80039aa:	4691      	mov	r9, r2
 80039ac:	eb18 0005 	adds.w	r0, r8, r5
 80039b0:	eb49 0106 	adc.w	r1, r9, r6
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	461d      	mov	r5, r3
 80039ba:	f04f 0600 	mov.w	r6, #0
 80039be:	196b      	adds	r3, r5, r5
 80039c0:	eb46 0406 	adc.w	r4, r6, r6
 80039c4:	461a      	mov	r2, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	f7fd f87c 	bl	8000ac4 <__aeabi_uldivmod>
 80039cc:	4603      	mov	r3, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <UART_SetConfig+0x384>)
 80039d4:	fba3 2302 	umull	r2, r3, r3, r2
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	461d      	mov	r5, r3
 80039e2:	f04f 0600 	mov.w	r6, #0
 80039e6:	46a9      	mov	r9, r5
 80039e8:	46b2      	mov	sl, r6
 80039ea:	eb19 0309 	adds.w	r3, r9, r9
 80039ee:	eb4a 040a 	adc.w	r4, sl, sl
 80039f2:	4699      	mov	r9, r3
 80039f4:	46a2      	mov	sl, r4
 80039f6:	eb19 0905 	adds.w	r9, r9, r5
 80039fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a12:	4689      	mov	r9, r1
 8003a14:	4692      	mov	sl, r2
 8003a16:	eb19 0005 	adds.w	r0, r9, r5
 8003a1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	461d      	mov	r5, r3
 8003a24:	f04f 0600 	mov.w	r6, #0
 8003a28:	196b      	adds	r3, r5, r5
 8003a2a:	eb46 0406 	adc.w	r4, r6, r6
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4623      	mov	r3, r4
 8003a32:	f7fd f847 	bl	8000ac4 <__aeabi_uldivmod>
 8003a36:	4603      	mov	r3, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <UART_SetConfig+0x384>)
 8003a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2164      	movs	r1, #100	; 0x64
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	3332      	adds	r3, #50	; 0x32
 8003a50:	4a27      	ldr	r2, [pc, #156]	; (8003af0 <UART_SetConfig+0x384>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a5e:	4498      	add	r8, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	461d      	mov	r5, r3
 8003a64:	f04f 0600 	mov.w	r6, #0
 8003a68:	46a9      	mov	r9, r5
 8003a6a:	46b2      	mov	sl, r6
 8003a6c:	eb19 0309 	adds.w	r3, r9, r9
 8003a70:	eb4a 040a 	adc.w	r4, sl, sl
 8003a74:	4699      	mov	r9, r3
 8003a76:	46a2      	mov	sl, r4
 8003a78:	eb19 0905 	adds.w	r9, r9, r5
 8003a7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a94:	4689      	mov	r9, r1
 8003a96:	4692      	mov	sl, r2
 8003a98:	eb19 0005 	adds.w	r0, r9, r5
 8003a9c:	eb4a 0106 	adc.w	r1, sl, r6
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	f04f 0600 	mov.w	r6, #0
 8003aaa:	196b      	adds	r3, r5, r5
 8003aac:	eb46 0406 	adc.w	r4, r6, r6
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	f7fd f806 	bl	8000ac4 <__aeabi_uldivmod>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <UART_SetConfig+0x384>)
 8003ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	2164      	movs	r1, #100	; 0x64
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	3332      	adds	r3, #50	; 0x32
 8003ad2:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <UART_SetConfig+0x384>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	f003 0207 	and.w	r2, r3, #7
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4442      	add	r2, r8
 8003ae4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ae6:	e1b2      	b.n	8003e4e <UART_SetConfig+0x6e2>
 8003ae8:	40011000 	.word	0x40011000
 8003aec:	40011400 	.word	0x40011400
 8003af0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4ad7      	ldr	r2, [pc, #860]	; (8003e58 <UART_SetConfig+0x6ec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d005      	beq.n	8003b0a <UART_SetConfig+0x39e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4ad6      	ldr	r2, [pc, #856]	; (8003e5c <UART_SetConfig+0x6f0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	f040 80d1 	bne.w	8003cac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b0a:	f7ff fb59 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8003b0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	469a      	mov	sl, r3
 8003b14:	f04f 0b00 	mov.w	fp, #0
 8003b18:	46d0      	mov	r8, sl
 8003b1a:	46d9      	mov	r9, fp
 8003b1c:	eb18 0308 	adds.w	r3, r8, r8
 8003b20:	eb49 0409 	adc.w	r4, r9, r9
 8003b24:	4698      	mov	r8, r3
 8003b26:	46a1      	mov	r9, r4
 8003b28:	eb18 080a 	adds.w	r8, r8, sl
 8003b2c:	eb49 090b 	adc.w	r9, r9, fp
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b44:	4688      	mov	r8, r1
 8003b46:	4691      	mov	r9, r2
 8003b48:	eb1a 0508 	adds.w	r5, sl, r8
 8003b4c:	eb4b 0609 	adc.w	r6, fp, r9
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	f04f 0400 	mov.w	r4, #0
 8003b62:	0094      	lsls	r4, r2, #2
 8003b64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b68:	008b      	lsls	r3, r1, #2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4623      	mov	r3, r4
 8003b6e:	4628      	mov	r0, r5
 8003b70:	4631      	mov	r1, r6
 8003b72:	f7fc ffa7 	bl	8000ac4 <__aeabi_uldivmod>
 8003b76:	4603      	mov	r3, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4bb8      	ldr	r3, [pc, #736]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	469b      	mov	fp, r3
 8003b8c:	f04f 0c00 	mov.w	ip, #0
 8003b90:	46d9      	mov	r9, fp
 8003b92:	46e2      	mov	sl, ip
 8003b94:	eb19 0309 	adds.w	r3, r9, r9
 8003b98:	eb4a 040a 	adc.w	r4, sl, sl
 8003b9c:	4699      	mov	r9, r3
 8003b9e:	46a2      	mov	sl, r4
 8003ba0:	eb19 090b 	adds.w	r9, r9, fp
 8003ba4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bbc:	4689      	mov	r9, r1
 8003bbe:	4692      	mov	sl, r2
 8003bc0:	eb1b 0509 	adds.w	r5, fp, r9
 8003bc4:	eb4c 060a 	adc.w	r6, ip, sl
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	f04f 0400 	mov.w	r4, #0
 8003bda:	0094      	lsls	r4, r2, #2
 8003bdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003be0:	008b      	lsls	r3, r1, #2
 8003be2:	461a      	mov	r2, r3
 8003be4:	4623      	mov	r3, r4
 8003be6:	4628      	mov	r0, r5
 8003be8:	4631      	mov	r1, r6
 8003bea:	f7fc ff6b 	bl	8000ac4 <__aeabi_uldivmod>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b9a      	ldr	r3, [pc, #616]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	2164      	movs	r1, #100	; 0x64
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	3332      	adds	r3, #50	; 0x32
 8003c08:	4a95      	ldr	r2, [pc, #596]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c14:	4498      	add	r8, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	469b      	mov	fp, r3
 8003c1a:	f04f 0c00 	mov.w	ip, #0
 8003c1e:	46d9      	mov	r9, fp
 8003c20:	46e2      	mov	sl, ip
 8003c22:	eb19 0309 	adds.w	r3, r9, r9
 8003c26:	eb4a 040a 	adc.w	r4, sl, sl
 8003c2a:	4699      	mov	r9, r3
 8003c2c:	46a2      	mov	sl, r4
 8003c2e:	eb19 090b 	adds.w	r9, r9, fp
 8003c32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c4a:	4689      	mov	r9, r1
 8003c4c:	4692      	mov	sl, r2
 8003c4e:	eb1b 0509 	adds.w	r5, fp, r9
 8003c52:	eb4c 060a 	adc.w	r6, ip, sl
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	f04f 0400 	mov.w	r4, #0
 8003c68:	0094      	lsls	r4, r2, #2
 8003c6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c6e:	008b      	lsls	r3, r1, #2
 8003c70:	461a      	mov	r2, r3
 8003c72:	4623      	mov	r3, r4
 8003c74:	4628      	mov	r0, r5
 8003c76:	4631      	mov	r1, r6
 8003c78:	f7fc ff24 	bl	8000ac4 <__aeabi_uldivmod>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	461a      	mov	r2, r3
 8003c82:	4b77      	ldr	r3, [pc, #476]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003c84:	fba3 1302 	umull	r1, r3, r3, r2
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	2164      	movs	r1, #100	; 0x64
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	3332      	adds	r3, #50	; 0x32
 8003c96:	4a72      	ldr	r2, [pc, #456]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4442      	add	r2, r8
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	e0d0      	b.n	8003e4e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7ff fa74 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	469a      	mov	sl, r3
 8003cb6:	f04f 0b00 	mov.w	fp, #0
 8003cba:	46d0      	mov	r8, sl
 8003cbc:	46d9      	mov	r9, fp
 8003cbe:	eb18 0308 	adds.w	r3, r8, r8
 8003cc2:	eb49 0409 	adc.w	r4, r9, r9
 8003cc6:	4698      	mov	r8, r3
 8003cc8:	46a1      	mov	r9, r4
 8003cca:	eb18 080a 	adds.w	r8, r8, sl
 8003cce:	eb49 090b 	adc.w	r9, r9, fp
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ce2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ce6:	4688      	mov	r8, r1
 8003ce8:	4691      	mov	r9, r2
 8003cea:	eb1a 0508 	adds.w	r5, sl, r8
 8003cee:	eb4b 0609 	adc.w	r6, fp, r9
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	f04f 0400 	mov.w	r4, #0
 8003d04:	0094      	lsls	r4, r2, #2
 8003d06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d0a:	008b      	lsls	r3, r1, #2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4623      	mov	r3, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	4631      	mov	r1, r6
 8003d14:	f7fc fed6 	bl	8000ac4 <__aeabi_uldivmod>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003d20:	fba3 2302 	umull	r2, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	469b      	mov	fp, r3
 8003d2e:	f04f 0c00 	mov.w	ip, #0
 8003d32:	46d9      	mov	r9, fp
 8003d34:	46e2      	mov	sl, ip
 8003d36:	eb19 0309 	adds.w	r3, r9, r9
 8003d3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d3e:	4699      	mov	r9, r3
 8003d40:	46a2      	mov	sl, r4
 8003d42:	eb19 090b 	adds.w	r9, r9, fp
 8003d46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d5e:	4689      	mov	r9, r1
 8003d60:	4692      	mov	sl, r2
 8003d62:	eb1b 0509 	adds.w	r5, fp, r9
 8003d66:	eb4c 060a 	adc.w	r6, ip, sl
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	f04f 0400 	mov.w	r4, #0
 8003d7c:	0094      	lsls	r4, r2, #2
 8003d7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d82:	008b      	lsls	r3, r1, #2
 8003d84:	461a      	mov	r2, r3
 8003d86:	4623      	mov	r3, r4
 8003d88:	4628      	mov	r0, r5
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	f7fc fe9a 	bl	8000ac4 <__aeabi_uldivmod>
 8003d90:	4603      	mov	r3, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003d98:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2164      	movs	r1, #100	; 0x64
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	3332      	adds	r3, #50	; 0x32
 8003daa:	4a2d      	ldr	r2, [pc, #180]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db6:	4498      	add	r8, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	469b      	mov	fp, r3
 8003dbc:	f04f 0c00 	mov.w	ip, #0
 8003dc0:	46d9      	mov	r9, fp
 8003dc2:	46e2      	mov	sl, ip
 8003dc4:	eb19 0309 	adds.w	r3, r9, r9
 8003dc8:	eb4a 040a 	adc.w	r4, sl, sl
 8003dcc:	4699      	mov	r9, r3
 8003dce:	46a2      	mov	sl, r4
 8003dd0:	eb19 090b 	adds.w	r9, r9, fp
 8003dd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dec:	4689      	mov	r9, r1
 8003dee:	4692      	mov	sl, r2
 8003df0:	eb1b 0509 	adds.w	r5, fp, r9
 8003df4:	eb4c 060a 	adc.w	r6, ip, sl
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	f04f 0400 	mov.w	r4, #0
 8003e0a:	0094      	lsls	r4, r2, #2
 8003e0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e10:	008b      	lsls	r3, r1, #2
 8003e12:	461a      	mov	r2, r3
 8003e14:	4623      	mov	r3, r4
 8003e16:	4628      	mov	r0, r5
 8003e18:	4631      	mov	r1, r6
 8003e1a:	f7fc fe53 	bl	8000ac4 <__aeabi_uldivmod>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003e26:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2164      	movs	r1, #100	; 0x64
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	3332      	adds	r3, #50	; 0x32
 8003e38:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <UART_SetConfig+0x6f4>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4442      	add	r2, r8
 8003e4a:	609a      	str	r2, [r3, #8]
}
 8003e4c:	e7ff      	b.n	8003e4e <UART_SetConfig+0x6e2>
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e58:	40011000 	.word	0x40011000
 8003e5c:	40011400 	.word	0x40011400
 8003e60:	51eb851f 	.word	0x51eb851f

08003e64 <main>:
float real_fsample = 46875;
uint8_t callback_state = 0;
uint8_t outarray[14];
uint8_t uartfree = 1;
int main(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e6a:	f7fc ffab 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e6e:	f000 fa53 	bl	8004318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e72:	f000 fb5b 	bl	800452c <MX_GPIO_Init>
  MX_DMA_Init();
 8003e76:	f000 fb29 	bl	80044cc <MX_DMA_Init>
  MX_I2S2_Init();
 8003e7a:	f000 facf 	bl	800441c <MX_I2S2_Init>
  MX_USART2_UART_Init();
 8003e7e:	f000 fafb 	bl	8004478 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, 8192);
 8003e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e86:	4a73      	ldr	r2, [pc, #460]	; (8004054 <main+0x1f0>)
 8003e88:	4973      	ldr	r1, [pc, #460]	; (8004058 <main+0x1f4>)
 8003e8a:	4874      	ldr	r0, [pc, #464]	; (800405c <main+0x1f8>)
 8003e8c:	f7fe f886 	bl	8001f9c <HAL_I2SEx_TransmitReceive_DMA>

  arm_rfft_fast_init_f32(&fft_handler, 2048);
 8003e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e94:	4872      	ldr	r0, [pc, #456]	; (8004060 <main+0x1fc>)
 8003e96:	f000 febf 	bl	8004c18 <arm_rfft_fast_init_f32>
  while (1)
  {

	  //do audio loopback and push mono-sum to fft_in_buf

	  int fft_in_ptr = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
	  if (callback_state == 1) {
 8003e9e:	4b71      	ldr	r3, [pc, #452]	; (8004064 <main+0x200>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d167      	bne.n	8003f76 <main+0x112>
		  for (int i=0; i<8192; i=i+4) {
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	e05e      	b.n	8003f6a <main+0x106>
			  fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8003eac:	4a69      	ldr	r2, [pc, #420]	; (8004054 <main+0x1f0>)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	3201      	adds	r2, #1
 8003eba:	4966      	ldr	r1, [pc, #408]	; (8004054 <main+0x1f0>)
 8003ebc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eca:	4a67      	ldr	r2, [pc, #412]	; (8004068 <main+0x204>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	edc3 7a00 	vstr	s15, [r3]
			  fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8003ed6:	4a64      	ldr	r2, [pc, #400]	; (8004068 <main+0x204>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	ed93 7a00 	vldr	s14, [r3]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	4a5b      	ldr	r2, [pc, #364]	; (8004054 <main+0x1f0>)
 8003ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	3203      	adds	r2, #3
 8003ef2:	4958      	ldr	r1, [pc, #352]	; (8004054 <main+0x1f0>)
 8003ef4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f06:	4a58      	ldr	r2, [pc, #352]	; (8004068 <main+0x204>)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	edc3 7a00 	vstr	s15, [r3]
			  txBuf[i] = rxBuf[i];
 8003f12:	4a50      	ldr	r2, [pc, #320]	; (8004054 <main+0x1f0>)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003f1a:	4a4f      	ldr	r2, [pc, #316]	; (8004058 <main+0x1f4>)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = rxBuf[i+1];
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	494a      	ldr	r1, [pc, #296]	; (8004054 <main+0x1f0>)
 8003f2c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003f30:	4a49      	ldr	r2, [pc, #292]	; (8004058 <main+0x1f4>)
 8003f32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+2] = rxBuf[i+2];
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1c9a      	adds	r2, r3, #2
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	4945      	ldr	r1, [pc, #276]	; (8004054 <main+0x1f0>)
 8003f40:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003f44:	4a44      	ldr	r2, [pc, #272]	; (8004058 <main+0x1f4>)
 8003f46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = rxBuf[i+3];
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1cda      	adds	r2, r3, #3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3303      	adds	r3, #3
 8003f52:	4940      	ldr	r1, [pc, #256]	; (8004054 <main+0x1f0>)
 8003f54:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003f58:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <main+0x1f4>)
 8003f5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  fft_in_ptr++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
		  for (int i=0; i<8192; i=i+4) {
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3304      	adds	r3, #4
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f70:	db9c      	blt.n	8003eac <main+0x48>
		  }

		  DoFFT();
 8003f72:	f000 f89b 	bl	80040ac <DoFFT>
	  }

	  if (callback_state == 2) {
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <main+0x200>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d18d      	bne.n	8003e9a <main+0x36>
		  for (int i=8192; i<16384; i=i+4) {
 8003f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	e05e      	b.n	8004044 <main+0x1e0>
			  fft_in_buf[fft_in_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8003f86:	4a33      	ldr	r2, [pc, #204]	; (8004054 <main+0x1f0>)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	3201      	adds	r2, #1
 8003f94:	492f      	ldr	r1, [pc, #188]	; (8004054 <main+0x1f0>)
 8003f96:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa4:	4a30      	ldr	r2, [pc, #192]	; (8004068 <main+0x204>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	edc3 7a00 	vstr	s15, [r3]
			  fft_in_buf[fft_in_ptr] += (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8003fb0:	4a2d      	ldr	r2, [pc, #180]	; (8004068 <main+0x204>)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	ed93 7a00 	vldr	s14, [r3]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	4a24      	ldr	r2, [pc, #144]	; (8004054 <main+0x1f0>)
 8003fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	3203      	adds	r2, #3
 8003fcc:	4921      	ldr	r1, [pc, #132]	; (8004054 <main+0x1f0>)
 8003fce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	ee07 3a90 	vmov	s15, r3
 8003fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe0:	4a21      	ldr	r2, [pc, #132]	; (8004068 <main+0x204>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
			  txBuf[i] = rxBuf[i];
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <main+0x1f0>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003ff4:	4a18      	ldr	r2, [pc, #96]	; (8004058 <main+0x1f4>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = rxBuf[i+1];
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3301      	adds	r3, #1
 8004004:	4913      	ldr	r1, [pc, #76]	; (8004054 <main+0x1f0>)
 8004006:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <main+0x1f4>)
 800400c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+2] = rxBuf[i+2];
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	1c9a      	adds	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3302      	adds	r3, #2
 8004018:	490e      	ldr	r1, [pc, #56]	; (8004054 <main+0x1f0>)
 800401a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800401e:	4a0e      	ldr	r2, [pc, #56]	; (8004058 <main+0x1f4>)
 8004020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = rxBuf[i+3];
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1cda      	adds	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3303      	adds	r3, #3
 800402c:	4909      	ldr	r1, [pc, #36]	; (8004054 <main+0x1f0>)
 800402e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <main+0x1f4>)
 8004034:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  fft_in_ptr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3301      	adds	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
		  for (int i=8192; i<16384; i=i+4) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800404a:	db9c      	blt.n	8003f86 <main+0x122>
		  }


		  DoFFT();
 800404c:	f000 f82e 	bl	80040ac <DoFFT>
  {
 8004050:	e723      	b.n	8003e9a <main+0x36>
 8004052:	bf00      	nop
 8004054:	20008110 	.word	0x20008110
 8004058:	200000b0 	.word	0x200000b0
 800405c:	20014220 	.word	0x20014220
 8004060:	20000098 	.word	0x20000098
 8004064:	20000090 	.word	0x20000090
 8004068:	20012160 	.word	0x20012160

0800406c <complexABS>:

  }
  /* USER CODE END 3 */
}

float complexABS(float real, float compl) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	ed87 0a01 	vstr	s0, [r7, #4]
 8004076:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 800407a:	ed97 7a01 	vldr	s14, [r7, #4]
 800407e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004082:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004086:	edd7 6a00 	vldr	s13, [r7]
 800408a:	edd7 7a00 	vldr	s15, [r7]
 800408e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004096:	eeb0 0a67 	vmov.f32	s0, s15
 800409a:	f001 fe39 	bl	8005d10 <sqrtf>
 800409e:	eef0 7a40 	vmov.f32	s15, s0
}
 80040a2:	eeb0 0a67 	vmov.f32	s0, s15
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <DoFFT>:
void DoFFT() {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
	//Do FFT
	arm_rfft_fast_f32(&fft_handler, &fft_in_buf,&fft_out_buf,0);
 80040b6:	2300      	movs	r3, #0
 80040b8:	4a75      	ldr	r2, [pc, #468]	; (8004290 <DoFFT+0x1e4>)
 80040ba:	4976      	ldr	r1, [pc, #472]	; (8004294 <DoFFT+0x1e8>)
 80040bc:	4876      	ldr	r0, [pc, #472]	; (8004298 <DoFFT+0x1ec>)
 80040be:	f000 fe2f 	bl	8004d20 <arm_rfft_fast_f32>

	int freqs[1024];
	int freqpoint = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040c8:	f102 020c 	add.w	r2, r2, #12
 80040cc:	6013      	str	r3, [r2, #0]
	int offset = 150; //variable noisefloor offset
 80040ce:	2396      	movs	r3, #150	; 0x96
 80040d0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040d4:	f102 0204 	add.w	r2, r2, #4
 80040d8:	6013      	str	r3, [r2, #0]

	//calculate abs values and linear-to-dB
	for (int i=0; i<2048; i=i+2) {
 80040da:	2300      	movs	r3, #0
 80040dc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80040e0:	f102 0208 	add.w	r2, r2, #8
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e067      	b.n	80041b8 <DoFFT+0x10c>
		freqs[freqpoint] = (int)(20*log10f(complexABS(fft_out_buf[i], fft_out_buf[i+1])))-offset;
 80040e8:	4a69      	ldr	r2, [pc, #420]	; (8004290 <DoFFT+0x1e4>)
 80040ea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80040ee:	f103 0308 	add.w	r3, r3, #8
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	edd3 7a00 	vldr	s15, [r3]
 80040fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004100:	f103 0308 	add.w	r3, r3, #8
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	4a61      	ldr	r2, [pc, #388]	; (8004290 <DoFFT+0x1e4>)
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	ed93 7a00 	vldr	s14, [r3]
 8004112:	eef0 0a47 	vmov.f32	s1, s14
 8004116:	eeb0 0a67 	vmov.f32	s0, s15
 800411a:	f7ff ffa7 	bl	800406c <complexABS>
 800411e:	eef0 7a40 	vmov.f32	s15, s0
 8004122:	eeb0 0a67 	vmov.f32	s0, s15
 8004126:	f001 fd7d 	bl	8005c24 <log10f>
 800412a:	eeb0 7a40 	vmov.f32	s14, s0
 800412e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8004132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413a:	ee17 2a90 	vmov	r2, s15
 800413e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004142:	f103 0304 	add.w	r3, r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	1ad1      	subs	r1, r2, r3
 800414a:	f107 0310 	add.w	r3, r7, #16
 800414e:	3b0c      	subs	r3, #12
 8004150:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004154:	f102 020c 	add.w	r2, r2, #12
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (freqs[freqpoint]<0) freqs[freqpoint]=0;
 800415e:	f107 0310 	add.w	r3, r7, #16
 8004162:	3b0c      	subs	r3, #12
 8004164:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004168:	f102 020c 	add.w	r2, r2, #12
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004172:	2b00      	cmp	r3, #0
 8004174:	da0a      	bge.n	800418c <DoFFT+0xe0>
 8004176:	f107 0310 	add.w	r3, r7, #16
 800417a:	3b0c      	subs	r3, #12
 800417c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004180:	f102 020c 	add.w	r2, r2, #12
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	2100      	movs	r1, #0
 8004188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		freqpoint++;
 800418c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004190:	f103 030c 	add.w	r3, r3, #12
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800419c:	f102 020c 	add.w	r2, r2, #12
 80041a0:	6013      	str	r3, [r2, #0]
	for (int i=0; i<2048; i=i+2) {
 80041a2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041a6:	f103 0308 	add.w	r3, r3, #8
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3302      	adds	r3, #2
 80041ae:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80041b2:	f102 0208 	add.w	r2, r2, #8
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041bc:	f103 0308 	add.w	r3, r3, #8
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c6:	db8f      	blt.n	80040e8 <DoFFT+0x3c>
	}


	//push out data to Uart
	outarray[0] = 0xff; //frame start
 80041c8:	4b34      	ldr	r3, [pc, #208]	; (800429c <DoFFT+0x1f0>)
 80041ca:	22ff      	movs	r2, #255	; 0xff
 80041cc:	701a      	strb	r2, [r3, #0]
	outarray[1] = (uint8_t)freqs[1]; //31-5Hz
 80041ce:	f107 0310 	add.w	r3, r7, #16
 80041d2:	3b0c      	subs	r3, #12
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	4b30      	ldr	r3, [pc, #192]	; (800429c <DoFFT+0x1f0>)
 80041da:	705a      	strb	r2, [r3, #1]
	outarray[2] = (uint8_t)freqs[3]; //63 Hz
 80041dc:	f107 0310 	add.w	r3, r7, #16
 80041e0:	3b0c      	subs	r3, #12
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4b2d      	ldr	r3, [pc, #180]	; (800429c <DoFFT+0x1f0>)
 80041e8:	709a      	strb	r2, [r3, #2]
	outarray[3] = (uint8_t)freqs[5]; //125 Hz
 80041ea:	f107 0310 	add.w	r3, r7, #16
 80041ee:	3b0c      	subs	r3, #12
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	4b29      	ldr	r3, [pc, #164]	; (800429c <DoFFT+0x1f0>)
 80041f6:	70da      	strb	r2, [r3, #3]
	outarray[4] = (uint8_t)freqs[11]; //250 Hz
 80041f8:	f107 0310 	add.w	r3, r7, #16
 80041fc:	3b0c      	subs	r3, #12
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	b2da      	uxtb	r2, r3
 8004202:	4b26      	ldr	r3, [pc, #152]	; (800429c <DoFFT+0x1f0>)
 8004204:	711a      	strb	r2, [r3, #4]
	outarray[5] = (uint8_t)freqs[22]; //500 Hz
 8004206:	f107 0310 	add.w	r3, r7, #16
 800420a:	3b0c      	subs	r3, #12
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	b2da      	uxtb	r2, r3
 8004210:	4b22      	ldr	r3, [pc, #136]	; (800429c <DoFFT+0x1f0>)
 8004212:	715a      	strb	r2, [r3, #5]
	outarray[6] = (uint8_t)freqs[44]; //1 kHz
 8004214:	f107 0310 	add.w	r3, r7, #16
 8004218:	3b0c      	subs	r3, #12
 800421a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b1e      	ldr	r3, [pc, #120]	; (800429c <DoFFT+0x1f0>)
 8004222:	719a      	strb	r2, [r3, #6]
	outarray[7] = (uint8_t)freqs[96]; //2.2 kHz
 8004224:	f107 0310 	add.w	r3, r7, #16
 8004228:	3b0c      	subs	r3, #12
 800422a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <DoFFT+0x1f0>)
 8004232:	71da      	strb	r2, [r3, #7]
	outarray[8] = (uint8_t)freqs[197]; //4.5 kHz
 8004234:	f107 0310 	add.w	r3, r7, #16
 8004238:	3b0c      	subs	r3, #12
 800423a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800423e:	b2da      	uxtb	r2, r3
 8004240:	4b16      	ldr	r3, [pc, #88]	; (800429c <DoFFT+0x1f0>)
 8004242:	721a      	strb	r2, [r3, #8]
	outarray[9] = (uint8_t)freqs[393]; //9 kHz
 8004244:	f107 0310 	add.w	r3, r7, #16
 8004248:	3b0c      	subs	r3, #12
 800424a:	f8d3 3624 	ldr.w	r3, [r3, #1572]	; 0x624
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <DoFFT+0x1f0>)
 8004252:	725a      	strb	r2, [r3, #9]
	outarray[10] = (uint8_t)freqs[655]; //15 lHz
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	3b0c      	subs	r3, #12
 800425a:	f8d3 3a3c 	ldr.w	r3, [r3, #2620]	; 0xa3c
 800425e:	b2da      	uxtb	r2, r3
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <DoFFT+0x1f0>)
 8004262:	729a      	strb	r2, [r3, #10]


	if (uartfree==1) HAL_UART_Transmit_DMA(&huart2, &outarray[0], 11);
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <DoFFT+0x1f4>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d104      	bne.n	8004276 <DoFFT+0x1ca>
 800426c:	220b      	movs	r2, #11
 800426e:	490b      	ldr	r1, [pc, #44]	; (800429c <DoFFT+0x1f0>)
 8004270:	480c      	ldr	r0, [pc, #48]	; (80042a4 <DoFFT+0x1f8>)
 8004272:	f7ff f945 	bl	8003500 <HAL_UART_Transmit_DMA>
	uartfree = 0;
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <DoFFT+0x1f4>)
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
	callback_state=0;
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <DoFFT+0x1fc>)
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]

}
 8004282:	bf00      	nop
 8004284:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20010120 	.word	0x20010120
 8004294:	20012160 	.word	0x20012160
 8004298:	20000098 	.word	0x20000098
 800429c:	20010110 	.word	0x20010110
 80042a0:	20000005 	.word	0x20000005
 80042a4:	20012120 	.word	0x20012120
 80042a8:	20000090 	.word	0x20000090

080042ac <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback (UART_HandleTypeDef *huart) {
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	uartfree = 1;
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_UART_TxHalfCpltCallback+0x24>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
	huart2.gState=HAL_UART_STATE_READY;
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_UART_TxHalfCpltCallback+0x28>)
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000005 	.word	0x20000005
 80042d4:	20012120 	.word	0x20012120

080042d8 <HAL_I2SEx_TxRxHalfCpltCallback>:


void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

 	callback_state = 1;
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	701a      	strb	r2, [r3, #0]

}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000090 	.word	0x20000090

080042f8 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8004302:	2202      	movs	r2, #2
 8004304:	701a      	strb	r2, [r3, #0]

}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000090 	.word	0x20000090

08004318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b098      	sub	sp, #96	; 0x60
 800431c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800431e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004322:	2230      	movs	r2, #48	; 0x30
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f001 fc74 	bl	8005c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800432c:	f107 031c 	add.w	r3, r7, #28
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <SystemClock_Config+0xfc>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	4a30      	ldr	r2, [pc, #192]	; (8004414 <SystemClock_Config+0xfc>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004358:	6413      	str	r3, [r2, #64]	; 0x40
 800435a:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <SystemClock_Config+0xfc>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <SystemClock_Config+0x100>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2a      	ldr	r2, [pc, #168]	; (8004418 <SystemClock_Config+0x100>)
 8004370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4b28      	ldr	r3, [pc, #160]	; (8004418 <SystemClock_Config+0x100>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004382:	2301      	movs	r3, #1
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800438c:	2302      	movs	r3, #2
 800438e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004390:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004394:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004396:	2308      	movs	r3, #8
 8004398:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800439a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043a0:	2302      	movs	r3, #2
 80043a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80043a4:	2307      	movs	r3, #7
 80043a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fab9 	bl	8002924 <HAL_RCC_OscConfig>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80043b8:	f000 f9f4 	bl	80047a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043bc:	230f      	movs	r3, #15
 80043be:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043c0:	2302      	movs	r3, #2
 80043c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80043c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80043ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80043d4:	f107 031c 	add.w	r3, r7, #28
 80043d8:	2105      	movs	r1, #5
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd12 	bl	8002e04 <HAL_RCC_ClockConfig>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80043e6:	f000 f9dd 	bl	80047a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80043ea:	2301      	movs	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80043ee:	23c0      	movs	r3, #192	; 0xc0
 80043f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80043f2:	2302      	movs	r3, #2
 80043f4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fef4 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8004406:	f000 f9cd 	bl	80047a4 <Error_Handler>
  }
}
 800440a:	bf00      	nop
 800440c:	3760      	adds	r7, #96	; 0x60
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	40007000 	.word	0x40007000

0800441c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <MX_I2S2_Init+0x54>)
 8004422:	4a14      	ldr	r2, [pc, #80]	; (8004474 <MX_I2S2_Init+0x58>)
 8004424:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <MX_I2S2_Init+0x54>)
 8004428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800442c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <MX_I2S2_Init+0x54>)
 8004430:	2200      	movs	r2, #0
 8004432:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <MX_I2S2_Init+0x54>)
 8004436:	2203      	movs	r2, #3
 8004438:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <MX_I2S2_Init+0x54>)
 800443c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004440:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <MX_I2S2_Init+0x54>)
 8004444:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004448:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <MX_I2S2_Init+0x54>)
 800444c:	2200      	movs	r2, #0
 800444e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <MX_I2S2_Init+0x54>)
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <MX_I2S2_Init+0x54>)
 8004458:	2201      	movs	r2, #1
 800445a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800445c:	4804      	ldr	r0, [pc, #16]	; (8004470 <MX_I2S2_Init+0x54>)
 800445e:	f7fd fb57 	bl	8001b10 <HAL_I2S_Init>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8004468:	f000 f99c 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800446c:	bf00      	nop
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20014220 	.word	0x20014220
 8004474:	40003800 	.word	0x40003800

08004478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <MX_USART2_UART_Init+0x50>)
 8004480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 8004484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800448a:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 800448c:	2200      	movs	r2, #0
 800448e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 8004492:	2200      	movs	r2, #0
 8004494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 8004498:	2200      	movs	r2, #0
 800449a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 800449e:	220c      	movs	r2, #12
 80044a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80044ae:	4805      	ldr	r0, [pc, #20]	; (80044c4 <MX_USART2_UART_Init+0x4c>)
 80044b0:	f7fe ffd8 	bl	8003464 <HAL_UART_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80044ba:	f000 f973 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20012120 	.word	0x20012120
 80044c8:	40004400 	.word	0x40004400

080044cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <MX_DMA_Init+0x5c>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a13      	ldr	r2, [pc, #76]	; (8004528 <MX_DMA_Init+0x5c>)
 80044dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <MX_DMA_Init+0x5c>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80044ee:	2200      	movs	r2, #0
 80044f0:	2100      	movs	r1, #0
 80044f2:	200e      	movs	r0, #14
 80044f4:	f7fc fdb3 	bl	800105e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80044f8:	200e      	movs	r0, #14
 80044fa:	f7fc fdcc 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	2100      	movs	r1, #0
 8004502:	200f      	movs	r0, #15
 8004504:	f7fc fdab 	bl	800105e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004508:	200f      	movs	r0, #15
 800450a:	f7fc fdc4 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	2100      	movs	r1, #0
 8004512:	2011      	movs	r0, #17
 8004514:	f7fc fda3 	bl	800105e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004518:	2011      	movs	r0, #17
 800451a:	f7fc fdbc 	bl	8001096 <HAL_NVIC_EnableIRQ>

}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800

0800452c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08c      	sub	sp, #48	; 0x30
 8004530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004532:	f107 031c 	add.w	r3, r7, #28
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	605a      	str	r2, [r3, #4]
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	60da      	str	r2, [r3, #12]
 8004540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	4b90      	ldr	r3, [pc, #576]	; (8004788 <MX_GPIO_Init+0x25c>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a8f      	ldr	r2, [pc, #572]	; (8004788 <MX_GPIO_Init+0x25c>)
 800454c:	f043 0310 	orr.w	r3, r3, #16
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b8d      	ldr	r3, [pc, #564]	; (8004788 <MX_GPIO_Init+0x25c>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	4b89      	ldr	r3, [pc, #548]	; (8004788 <MX_GPIO_Init+0x25c>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a88      	ldr	r2, [pc, #544]	; (8004788 <MX_GPIO_Init+0x25c>)
 8004568:	f043 0304 	orr.w	r3, r3, #4
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b86      	ldr	r3, [pc, #536]	; (8004788 <MX_GPIO_Init+0x25c>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	4b82      	ldr	r3, [pc, #520]	; (8004788 <MX_GPIO_Init+0x25c>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	4a81      	ldr	r2, [pc, #516]	; (8004788 <MX_GPIO_Init+0x25c>)
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	6313      	str	r3, [r2, #48]	; 0x30
 800458a:	4b7f      	ldr	r3, [pc, #508]	; (8004788 <MX_GPIO_Init+0x25c>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	4b7b      	ldr	r3, [pc, #492]	; (8004788 <MX_GPIO_Init+0x25c>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	4a7a      	ldr	r2, [pc, #488]	; (8004788 <MX_GPIO_Init+0x25c>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6313      	str	r3, [r2, #48]	; 0x30
 80045a6:	4b78      	ldr	r3, [pc, #480]	; (8004788 <MX_GPIO_Init+0x25c>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	4b74      	ldr	r3, [pc, #464]	; (8004788 <MX_GPIO_Init+0x25c>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	4a73      	ldr	r2, [pc, #460]	; (8004788 <MX_GPIO_Init+0x25c>)
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	6313      	str	r3, [r2, #48]	; 0x30
 80045c2:	4b71      	ldr	r3, [pc, #452]	; (8004788 <MX_GPIO_Init+0x25c>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	4b6d      	ldr	r3, [pc, #436]	; (8004788 <MX_GPIO_Init+0x25c>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a6c      	ldr	r2, [pc, #432]	; (8004788 <MX_GPIO_Init+0x25c>)
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b6a      	ldr	r3, [pc, #424]	; (8004788 <MX_GPIO_Init+0x25c>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80045ea:	2200      	movs	r2, #0
 80045ec:	2108      	movs	r1, #8
 80045ee:	4867      	ldr	r0, [pc, #412]	; (800478c <MX_GPIO_Init+0x260>)
 80045f0:	f7fd fa74 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80045f4:	2200      	movs	r2, #0
 80045f6:	2101      	movs	r1, #1
 80045f8:	4865      	ldr	r0, [pc, #404]	; (8004790 <MX_GPIO_Init+0x264>)
 80045fa:	f7fd fa6f 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80045fe:	2200      	movs	r2, #0
 8004600:	f24f 0110 	movw	r1, #61456	; 0xf010
 8004604:	4863      	ldr	r0, [pc, #396]	; (8004794 <MX_GPIO_Init+0x268>)
 8004606:	f7fd fa69 	bl	8001adc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800460a:	2308      	movs	r3, #8
 800460c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800460e:	2301      	movs	r3, #1
 8004610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2300      	movs	r3, #0
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004616:	2300      	movs	r3, #0
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800461a:	f107 031c 	add.w	r3, r7, #28
 800461e:	4619      	mov	r1, r3
 8004620:	485a      	ldr	r0, [pc, #360]	; (800478c <MX_GPIO_Init+0x260>)
 8004622:	f7fd f8c1 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004626:	2301      	movs	r3, #1
 8004628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800462a:	2301      	movs	r3, #1
 800462c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004632:	2300      	movs	r3, #0
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004636:	f107 031c 	add.w	r3, r7, #28
 800463a:	4619      	mov	r1, r3
 800463c:	4854      	ldr	r0, [pc, #336]	; (8004790 <MX_GPIO_Init+0x264>)
 800463e:	f7fd f8b3 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004642:	2301      	movs	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004646:	4b54      	ldr	r3, [pc, #336]	; (8004798 <MX_GPIO_Init+0x26c>)
 8004648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464e:	f107 031c 	add.w	r3, r7, #28
 8004652:	4619      	mov	r1, r3
 8004654:	4851      	ldr	r0, [pc, #324]	; (800479c <MX_GPIO_Init+0x270>)
 8004656:	f7fd f8a7 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800465a:	2310      	movs	r3, #16
 800465c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465e:	2302      	movs	r3, #2
 8004660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004666:	2300      	movs	r3, #0
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800466a:	2306      	movs	r3, #6
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800466e:	f107 031c 	add.w	r3, r7, #28
 8004672:	4619      	mov	r1, r3
 8004674:	4849      	ldr	r0, [pc, #292]	; (800479c <MX_GPIO_Init+0x270>)
 8004676:	f7fd f897 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800467a:	23e0      	movs	r3, #224	; 0xe0
 800467c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467e:	2302      	movs	r3, #2
 8004680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004686:	2303      	movs	r3, #3
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800468a:	2305      	movs	r3, #5
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468e:	f107 031c 	add.w	r3, r7, #28
 8004692:	4619      	mov	r1, r3
 8004694:	4841      	ldr	r0, [pc, #260]	; (800479c <MX_GPIO_Init+0x270>)
 8004696:	f7fd f887 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800469a:	2304      	movs	r3, #4
 800469c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800469e:	2300      	movs	r3, #0
 80046a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a6:	f107 031c 	add.w	r3, r7, #28
 80046aa:	4619      	mov	r1, r3
 80046ac:	483c      	ldr	r0, [pc, #240]	; (80047a0 <MX_GPIO_Init+0x274>)
 80046ae:	f7fd f87b 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80046b2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80046b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046b8:	2301      	movs	r3, #1
 80046ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046c4:	f107 031c 	add.w	r3, r7, #28
 80046c8:	4619      	mov	r1, r3
 80046ca:	4832      	ldr	r0, [pc, #200]	; (8004794 <MX_GPIO_Init+0x268>)
 80046cc:	f7fd f86c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80046d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80046d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d6:	2302      	movs	r3, #2
 80046d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046de:	2300      	movs	r3, #0
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80046e2:	2306      	movs	r3, #6
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046e6:	f107 031c 	add.w	r3, r7, #28
 80046ea:	4619      	mov	r1, r3
 80046ec:	4828      	ldr	r0, [pc, #160]	; (8004790 <MX_GPIO_Init+0x264>)
 80046ee:	f7fd f85b 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046f8:	2300      	movs	r3, #0
 80046fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004700:	f107 031c 	add.w	r3, r7, #28
 8004704:	4619      	mov	r1, r3
 8004706:	4825      	ldr	r0, [pc, #148]	; (800479c <MX_GPIO_Init+0x270>)
 8004708:	f7fd f84e 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800470c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	2302      	movs	r3, #2
 8004714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471a:	2303      	movs	r3, #3
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800471e:	230a      	movs	r3, #10
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004722:	f107 031c 	add.w	r3, r7, #28
 8004726:	4619      	mov	r1, r3
 8004728:	481c      	ldr	r0, [pc, #112]	; (800479c <MX_GPIO_Init+0x270>)
 800472a:	f7fd f83d 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800472e:	2320      	movs	r3, #32
 8004730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800473a:	f107 031c 	add.w	r3, r7, #28
 800473e:	4619      	mov	r1, r3
 8004740:	4814      	ldr	r0, [pc, #80]	; (8004794 <MX_GPIO_Init+0x268>)
 8004742:	f7fd f831 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004746:	f44f 7310 	mov.w	r3, #576	; 0x240
 800474a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800474c:	2312      	movs	r3, #18
 800474e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004750:	2301      	movs	r3, #1
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004754:	2303      	movs	r3, #3
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004758:	2304      	movs	r3, #4
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800475c:	f107 031c 	add.w	r3, r7, #28
 8004760:	4619      	mov	r1, r3
 8004762:	480f      	ldr	r0, [pc, #60]	; (80047a0 <MX_GPIO_Init+0x274>)
 8004764:	f7fd f820 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004768:	2302      	movs	r3, #2
 800476a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <MX_GPIO_Init+0x26c>)
 800476e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004774:	f107 031c 	add.w	r3, r7, #28
 8004778:	4619      	mov	r1, r3
 800477a:	4804      	ldr	r0, [pc, #16]	; (800478c <MX_GPIO_Init+0x260>)
 800477c:	f7fd f814 	bl	80017a8 <HAL_GPIO_Init>

}
 8004780:	bf00      	nop
 8004782:	3730      	adds	r7, #48	; 0x30
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	40021000 	.word	0x40021000
 8004790:	40020800 	.word	0x40020800
 8004794:	40020c00 	.word	0x40020c00
 8004798:	10110000 	.word	0x10110000
 800479c:	40020000 	.word	0x40020000
 80047a0:	40020400 	.word	0x40020400

080047a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <HAL_MspInit+0x4c>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	4a0f      	ldr	r2, [pc, #60]	; (8004800 <HAL_MspInit+0x4c>)
 80047c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <HAL_MspInit+0x4c>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_MspInit+0x4c>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a08      	ldr	r2, [pc, #32]	; (8004800 <HAL_MspInit+0x4c>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_MspInit+0x4c>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80047f2:	2007      	movs	r0, #7
 80047f4:	f7fc fc28 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800

08004804 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480c:	f107 0314 	add.w	r3, r7, #20
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a62      	ldr	r2, [pc, #392]	; (80049ac <HAL_I2S_MspInit+0x1a8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	f040 80be 	bne.w	80049a4 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	4b60      	ldr	r3, [pc, #384]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	4a5f      	ldr	r2, [pc, #380]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 8004832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004836:	6413      	str	r3, [r2, #64]	; 0x40
 8004838:	4b5d      	ldr	r3, [pc, #372]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	4a58      	ldr	r2, [pc, #352]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	6313      	str	r3, [r2, #48]	; 0x30
 8004854:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004860:	2300      	movs	r3, #0
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	4b52      	ldr	r3, [pc, #328]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	4a51      	ldr	r2, [pc, #324]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 800486a:	f043 0302 	orr.w	r3, r3, #2
 800486e:	6313      	str	r3, [r2, #48]	; 0x30
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <HAL_I2S_MspInit+0x1ac>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800487c:	2304      	movs	r3, #4
 800487e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004880:	2302      	movs	r3, #2
 8004882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004888:	2300      	movs	r3, #0
 800488a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800488c:	2306      	movs	r3, #6
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004890:	f107 0314 	add.w	r3, r7, #20
 8004894:	4619      	mov	r1, r3
 8004896:	4847      	ldr	r0, [pc, #284]	; (80049b4 <HAL_I2S_MspInit+0x1b0>)
 8004898:	f7fc ff86 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800489c:	2348      	movs	r3, #72	; 0x48
 800489e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a8:	2300      	movs	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048ac:	2305      	movs	r3, #5
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4619      	mov	r1, r3
 80048b6:	483f      	ldr	r0, [pc, #252]	; (80049b4 <HAL_I2S_MspInit+0x1b0>)
 80048b8:	f7fc ff76 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80048bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c2:	2302      	movs	r3, #2
 80048c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ca:	2300      	movs	r3, #0
 80048cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048ce:	2305      	movs	r3, #5
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d2:	f107 0314 	add.w	r3, r7, #20
 80048d6:	4619      	mov	r1, r3
 80048d8:	4837      	ldr	r0, [pc, #220]	; (80049b8 <HAL_I2S_MspInit+0x1b4>)
 80048da:	f7fc ff65 	bl	80017a8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80048de:	4b37      	ldr	r3, [pc, #220]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 80048e0:	4a37      	ldr	r2, [pc, #220]	; (80049c0 <HAL_I2S_MspInit+0x1bc>)
 80048e2:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80048e4:	4b35      	ldr	r3, [pc, #212]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 80048e6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80048ea:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048ec:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048f2:	4b32      	ldr	r3, [pc, #200]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048f8:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 80048fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048fe:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004900:	4b2e      	ldr	r3, [pc, #184]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 8004902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004906:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004908:	4b2c      	ldr	r3, [pc, #176]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 800490a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800490e:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8004910:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 8004912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004916:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 800491a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800491e:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 8004922:	2200      	movs	r2, #0
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8004926:	4825      	ldr	r0, [pc, #148]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 8004928:	f7fc fbd0 	bl	80010cc <HAL_DMA_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8004932:	f7ff ff37 	bl	80047a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a20      	ldr	r2, [pc, #128]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_I2S_MspInit+0x1b8>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004942:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 8004944:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <HAL_I2S_MspInit+0x1c4>)
 8004946:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004948:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 8004950:	2240      	movs	r2, #64	; 0x40
 8004952:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 8004956:	2200      	movs	r2, #0
 8004958:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800495a:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 800495c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004960:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 8004964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004968:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800496a:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 800496c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004970:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 8004974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004978:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 800497c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004980:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004982:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 8004984:	2200      	movs	r2, #0
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004988:	480e      	ldr	r0, [pc, #56]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 800498a:	f7fc fb9f 	bl	80010cc <HAL_DMA_Init>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8004994:	f7ff ff06 	bl	80047a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
 800499e:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <HAL_I2S_MspInit+0x1c0>)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80049a4:	bf00      	nop
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40003800 	.word	0x40003800
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40020800 	.word	0x40020800
 80049b8:	40020400 	.word	0x40020400
 80049bc:	20014160 	.word	0x20014160
 80049c0:	40026058 	.word	0x40026058
 80049c4:	200141c0 	.word	0x200141c0
 80049c8:	40026070 	.word	0x40026070

080049cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d4:	f107 0314 	add.w	r3, r7, #20
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	60da      	str	r2, [r3, #12]
 80049e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a30      	ldr	r2, [pc, #192]	; (8004aac <HAL_UART_MspInit+0xe0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d159      	bne.n	8004aa2 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_UART_MspInit+0xe4>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a2e      	ldr	r2, [pc, #184]	; (8004ab0 <HAL_UART_MspInit+0xe4>)
 80049f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b2c      	ldr	r3, [pc, #176]	; (8004ab0 <HAL_UART_MspInit+0xe4>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <HAL_UART_MspInit+0xe4>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	4a27      	ldr	r2, [pc, #156]	; (8004ab0 <HAL_UART_MspInit+0xe4>)
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1a:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <HAL_UART_MspInit+0xe4>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a26:	230c      	movs	r3, #12
 8004a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a32:	2303      	movs	r3, #3
 8004a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a36:	2307      	movs	r3, #7
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a3a:	f107 0314 	add.w	r3, r7, #20
 8004a3e:	4619      	mov	r1, r3
 8004a40:	481c      	ldr	r0, [pc, #112]	; (8004ab4 <HAL_UART_MspInit+0xe8>)
 8004a42:	f7fc feb1 	bl	80017a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a48:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <HAL_UART_MspInit+0xf0>)
 8004a4a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a52:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a54:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a56:	2240      	movs	r2, #64	; 0x40
 8004a58:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a5a:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a60:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a66:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a68:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a80:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004a86:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a88:	f7fc fb20 	bl	80010cc <HAL_DMA_Init>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004a92:	f7ff fe87 	bl	80047a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9c:	4a06      	ldr	r2, [pc, #24]	; (8004ab8 <HAL_UART_MspInit+0xec>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004aa2:	bf00      	nop
 8004aa4:	3728      	adds	r7, #40	; 0x28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40004400 	.word	0x40004400
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40020000 	.word	0x40020000
 8004ab8:	200080b0 	.word	0x200080b0
 8004abc:	400260a0 	.word	0x400260a0

08004ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ad2:	e7fe      	b.n	8004ad2 <HardFault_Handler+0x4>

08004ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ad8:	e7fe      	b.n	8004ad8 <MemManage_Handler+0x4>

08004ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ada:	b480      	push	{r7}
 8004adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ade:	e7fe      	b.n	8004ade <BusFault_Handler+0x4>

08004ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ae4:	e7fe      	b.n	8004ae4 <UsageFault_Handler+0x4>

08004ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b14:	f7fc f9a8 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b18:	bf00      	nop
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8004b20:	4802      	ldr	r0, [pc, #8]	; (8004b2c <DMA1_Stream3_IRQHandler+0x10>)
 8004b22:	f7fc fbd9 	bl	80012d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20014160 	.word	0x20014160

08004b30 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004b34:	4802      	ldr	r0, [pc, #8]	; (8004b40 <DMA1_Stream4_IRQHandler+0x10>)
 8004b36:	f7fc fbcf 	bl	80012d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200141c0 	.word	0x200141c0

08004b44 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004b48:	4802      	ldr	r0, [pc, #8]	; (8004b54 <DMA1_Stream6_IRQHandler+0x10>)
 8004b4a:	f7fc fbc5 	bl	80012d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004b4e:	bf00      	nop
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	200080b0 	.word	0x200080b0

08004b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b5c:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <SystemInit+0x60>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <SystemInit+0x60>)
 8004b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <SystemInit+0x64>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <SystemInit+0x64>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <SystemInit+0x64>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <SystemInit+0x64>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <SystemInit+0x64>)
 8004b84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <SystemInit+0x64>)
 8004b90:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <SystemInit+0x68>)
 8004b92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <SystemInit+0x64>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <SystemInit+0x64>)
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <SystemInit+0x64>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <SystemInit+0x60>)
 8004ba8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bac:	609a      	str	r2, [r3, #8]
#endif
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	24003010 	.word	0x24003010

08004bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bca:	e003      	b.n	8004bd4 <LoopCopyDataInit>

08004bcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bd2:	3104      	adds	r1, #4

08004bd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bd4:	480b      	ldr	r0, [pc, #44]	; (8004c04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004bd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004bdc:	d3f6      	bcc.n	8004bcc <CopyDataInit>
  ldr  r2, =_sbss
 8004bde:	4a0b      	ldr	r2, [pc, #44]	; (8004c0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004be0:	e002      	b.n	8004be8 <LoopFillZerobss>

08004be2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004be2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004be4:	f842 3b04 	str.w	r3, [r2], #4

08004be8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bec:	d3f9      	bcc.n	8004be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bee:	f7ff ffb3 	bl	8004b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bf2:	f000 ffeb 	bl	8005bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bf6:	f7ff f935 	bl	8003e64 <main>
  bx  lr    
 8004bfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004bfc:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8004c00:	08019504 	.word	0x08019504
  ldr  r0, =_sdata
 8004c04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c08:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004c0c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8004c10:	20014268 	.word	0x20014268

08004c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c14:	e7fe      	b.n	8004c14 <ADC_IRQHandler>
	...

08004c18 <arm_rfft_fast_init_f32>:
 8004c18:	084b      	lsrs	r3, r1, #1
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	b410      	push	{r4}
 8004c1e:	8201      	strh	r1, [r0, #16]
 8004c20:	8003      	strh	r3, [r0, #0]
 8004c22:	d047      	beq.n	8004cb4 <arm_rfft_fast_init_f32+0x9c>
 8004c24:	d917      	bls.n	8004c56 <arm_rfft_fast_init_f32+0x3e>
 8004c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2a:	d03d      	beq.n	8004ca8 <arm_rfft_fast_init_f32+0x90>
 8004c2c:	d929      	bls.n	8004c82 <arm_rfft_fast_init_f32+0x6a>
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c32:	d020      	beq.n	8004c76 <arm_rfft_fast_init_f32+0x5e>
 8004c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c38:	d113      	bne.n	8004c62 <arm_rfft_fast_init_f32+0x4a>
 8004c3a:	4921      	ldr	r1, [pc, #132]	; (8004cc0 <arm_rfft_fast_init_f32+0xa8>)
 8004c3c:	4a21      	ldr	r2, [pc, #132]	; (8004cc4 <arm_rfft_fast_init_f32+0xac>)
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <arm_rfft_fast_init_f32+0xb0>)
 8004c40:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004c44:	8184      	strh	r4, [r0, #12]
 8004c46:	6081      	str	r1, [r0, #8]
 8004c48:	6042      	str	r2, [r0, #4]
 8004c4a:	6143      	str	r3, [r0, #20]
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	b240      	sxtb	r0, r0
 8004c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d01c      	beq.n	8004c94 <arm_rfft_fast_init_f32+0x7c>
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d006      	beq.n	8004c6c <arm_rfft_fast_init_f32+0x54>
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d01d      	beq.n	8004c9e <arm_rfft_fast_init_f32+0x86>
 8004c62:	20ff      	movs	r0, #255	; 0xff
 8004c64:	b240      	sxtb	r0, r0
 8004c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	2438      	movs	r4, #56	; 0x38
 8004c6e:	4917      	ldr	r1, [pc, #92]	; (8004ccc <arm_rfft_fast_init_f32+0xb4>)
 8004c70:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <arm_rfft_fast_init_f32+0xb8>)
 8004c72:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <arm_rfft_fast_init_f32+0xbc>)
 8004c74:	e7e6      	b.n	8004c44 <arm_rfft_fast_init_f32+0x2c>
 8004c76:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004c7a:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <arm_rfft_fast_init_f32+0xc0>)
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <arm_rfft_fast_init_f32+0xc4>)
 8004c7e:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <arm_rfft_fast_init_f32+0xc8>)
 8004c80:	e7e0      	b.n	8004c44 <arm_rfft_fast_init_f32+0x2c>
 8004c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c86:	d1ec      	bne.n	8004c62 <arm_rfft_fast_init_f32+0x4a>
 8004c88:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004c8c:	4915      	ldr	r1, [pc, #84]	; (8004ce4 <arm_rfft_fast_init_f32+0xcc>)
 8004c8e:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <arm_rfft_fast_init_f32+0xd0>)
 8004c90:	4b16      	ldr	r3, [pc, #88]	; (8004cec <arm_rfft_fast_init_f32+0xd4>)
 8004c92:	e7d7      	b.n	8004c44 <arm_rfft_fast_init_f32+0x2c>
 8004c94:	2430      	movs	r4, #48	; 0x30
 8004c96:	4916      	ldr	r1, [pc, #88]	; (8004cf0 <arm_rfft_fast_init_f32+0xd8>)
 8004c98:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <arm_rfft_fast_init_f32+0xdc>)
 8004c9a:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <arm_rfft_fast_init_f32+0xe0>)
 8004c9c:	e7d2      	b.n	8004c44 <arm_rfft_fast_init_f32+0x2c>
 8004c9e:	2414      	movs	r4, #20
 8004ca0:	4916      	ldr	r1, [pc, #88]	; (8004cfc <arm_rfft_fast_init_f32+0xe4>)
 8004ca2:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <arm_rfft_fast_init_f32+0xe8>)
 8004ca4:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <arm_rfft_fast_init_f32+0xec>)
 8004ca6:	e7cd      	b.n	8004c44 <arm_rfft_fast_init_f32+0x2c>
 8004ca8:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004cac:	4916      	ldr	r1, [pc, #88]	; (8004d08 <arm_rfft_fast_init_f32+0xf0>)
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <arm_rfft_fast_init_f32+0xf4>)
 8004cb0:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <arm_rfft_fast_init_f32+0xf8>)
 8004cb2:	e7c7      	b.n	8004c44 <arm_rfft_fast_init_f32+0x2c>
 8004cb4:	24d0      	movs	r4, #208	; 0xd0
 8004cb6:	4917      	ldr	r1, [pc, #92]	; (8004d14 <arm_rfft_fast_init_f32+0xfc>)
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <arm_rfft_fast_init_f32+0x100>)
 8004cba:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <arm_rfft_fast_init_f32+0x104>)
 8004cbc:	e7c2      	b.n	8004c44 <arm_rfft_fast_init_f32+0x2c>
 8004cbe:	bf00      	nop
 8004cc0:	08014e94 	.word	0x08014e94
 8004cc4:	0800608c 	.word	0x0800608c
 8004cc8:	0800c1fc 	.word	0x0800c1fc
 8004ccc:	0800a18c 	.word	0x0800a18c
 8004cd0:	08016c54 	.word	0x08016c54
 8004cd4:	08019144 	.word	0x08019144
 8004cd8:	08012b7c 	.word	0x08012b7c
 8004cdc:	08010a7c 	.word	0x08010a7c
 8004ce0:	0800a1fc 	.word	0x0800a1fc
 8004ce4:	08018dd4 	.word	0x08018dd4
 8004ce8:	080101fc 	.word	0x080101fc
 8004cec:	08016e54 	.word	0x08016e54
 8004cf0:	08013a34 	.word	0x08013a34
 8004cf4:	08012a7c 	.word	0x08012a7c
 8004cf8:	0800a08c 	.word	0x0800a08c
 8004cfc:	0801398c 	.word	0x0801398c
 8004d00:	080109fc 	.word	0x080109fc
 8004d04:	080139b4 	.word	0x080139b4
 8004d08:	08017654 	.word	0x08017654
 8004d0c:	08013e94 	.word	0x08013e94
 8004d10:	080179d4 	.word	0x080179d4
 8004d14:	08019344 	.word	0x08019344
 8004d18:	08013a94 	.word	0x08013a94
 8004d1c:	080189d4 	.word	0x080189d4

08004d20 <arm_rfft_fast_f32>:
 8004d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d24:	8a06      	ldrh	r6, [r0, #16]
 8004d26:	0876      	lsrs	r6, r6, #1
 8004d28:	4607      	mov	r7, r0
 8004d2a:	4615      	mov	r5, r2
 8004d2c:	8006      	strh	r6, [r0, #0]
 8004d2e:	460c      	mov	r4, r1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d15c      	bne.n	8004dee <arm_rfft_fast_f32+0xce>
 8004d34:	461a      	mov	r2, r3
 8004d36:	2301      	movs	r3, #1
 8004d38:	f000 fbe6 	bl	8005508 <arm_cfft_f32>
 8004d3c:	edd4 7a00 	vldr	s15, [r4]
 8004d40:	ed94 7a01 	vldr	s14, [r4, #4]
 8004d44:	883e      	ldrh	r6, [r7, #0]
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004d4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d50:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004d54:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d5c:	3e01      	subs	r6, #1
 8004d5e:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8004d62:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004d66:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8004d6a:	ed85 7a00 	vstr	s14, [r5]
 8004d6e:	edc5 7a01 	vstr	s15, [r5, #4]
 8004d72:	3010      	adds	r0, #16
 8004d74:	f105 0210 	add.w	r2, r5, #16
 8004d78:	3b08      	subs	r3, #8
 8004d7a:	f104 0110 	add.w	r1, r4, #16
 8004d7e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8004d82:	ed93 5a02 	vldr	s10, [r3, #8]
 8004d86:	ed11 7a01 	vldr	s14, [r1, #-4]
 8004d8a:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004d8e:	edd3 5a03 	vldr	s11, [r3, #12]
 8004d92:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004d96:	ee75 7a64 	vsub.f32	s15, s10, s9
 8004d9a:	ee35 4a87 	vadd.f32	s8, s11, s14
 8004d9e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004da2:	ee77 5a65 	vsub.f32	s11, s14, s11
 8004da6:	ee66 4a27 	vmul.f32	s9, s12, s15
 8004daa:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004dae:	ee34 5a85 	vadd.f32	s10, s9, s10
 8004db2:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004db6:	ee66 6a84 	vmul.f32	s13, s13, s8
 8004dba:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004dbe:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004dc2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004dc6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004dca:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004dce:	3e01      	subs	r6, #1
 8004dd0:	ed42 6a02 	vstr	s13, [r2, #-8]
 8004dd4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004dd8:	f1a3 0308 	sub.w	r3, r3, #8
 8004ddc:	f101 0108 	add.w	r1, r1, #8
 8004de0:	f100 0008 	add.w	r0, r0, #8
 8004de4:	f102 0208 	add.w	r2, r2, #8
 8004de8:	d1c9      	bne.n	8004d7e <arm_rfft_fast_f32+0x5e>
 8004dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dee:	edd1 7a00 	vldr	s15, [r1]
 8004df2:	edd1 6a01 	vldr	s13, [r1, #4]
 8004df6:	6941      	ldr	r1, [r0, #20]
 8004df8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004dfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004e00:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8004e04:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004e08:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004e0c:	3e01      	subs	r6, #1
 8004e0e:	ed82 7a00 	vstr	s14, [r2]
 8004e12:	edc2 7a01 	vstr	s15, [r2, #4]
 8004e16:	00f0      	lsls	r0, r6, #3
 8004e18:	b3ee      	cbz	r6, 8004e96 <arm_rfft_fast_f32+0x176>
 8004e1a:	3808      	subs	r0, #8
 8004e1c:	f101 0e10 	add.w	lr, r1, #16
 8004e20:	4420      	add	r0, r4
 8004e22:	f104 0110 	add.w	r1, r4, #16
 8004e26:	f102 0c10 	add.w	ip, r2, #16
 8004e2a:	ed90 7a02 	vldr	s14, [r0, #8]
 8004e2e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004e32:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8004e36:	ed90 4a03 	vldr	s8, [r0, #12]
 8004e3a:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004e3e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004e42:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004e46:	ee74 4a05 	vadd.f32	s9, s8, s10
 8004e4a:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004e4e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004e52:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004e56:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004e5a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004e5e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004e62:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004e66:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004e6a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004e6e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004e72:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004e76:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004e7a:	3e01      	subs	r6, #1
 8004e7c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004e80:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004e84:	f1a0 0008 	sub.w	r0, r0, #8
 8004e88:	f101 0108 	add.w	r1, r1, #8
 8004e8c:	f10e 0e08 	add.w	lr, lr, #8
 8004e90:	f10c 0c08 	add.w	ip, ip, #8
 8004e94:	d1c9      	bne.n	8004e2a <arm_rfft_fast_f32+0x10a>
 8004e96:	4638      	mov	r0, r7
 8004e98:	4629      	mov	r1, r5
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f000 bb31 	b.w	8005508 <arm_cfft_f32>
 8004ea6:	bf00      	nop

08004ea8 <arm_cfft_radix8by2_f32>:
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	ed2d 8b08 	vpush	{d8-d11}
 8004eb0:	f8b0 e000 	ldrh.w	lr, [r0]
 8004eb4:	6842      	ldr	r2, [r0, #4]
 8004eb6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8004eba:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004ebe:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004ec2:	4607      	mov	r7, r0
 8004ec4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004ec8:	f000 80af 	beq.w	800502a <arm_cfft_radix8by2_f32+0x182>
 8004ecc:	3310      	adds	r3, #16
 8004ece:	18ce      	adds	r6, r1, r3
 8004ed0:	3210      	adds	r2, #16
 8004ed2:	4443      	add	r3, r8
 8004ed4:	f101 0510 	add.w	r5, r1, #16
 8004ed8:	f108 0410 	add.w	r4, r8, #16
 8004edc:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004ee0:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004ee4:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004ee8:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004eec:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004ef0:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004ef4:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004ef8:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004efc:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004f00:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004f04:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004f08:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004f0c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004f10:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004f14:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004f18:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004f1c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004f20:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004f24:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004f28:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004f2c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004f30:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004f34:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004f38:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004f3c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004f40:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004f44:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004f48:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004f4c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004f50:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004f54:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004f58:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004f5c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004f60:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004f64:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004f68:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004f6c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004f70:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004f74:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004f78:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004f7c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004f80:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004f84:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004f88:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004f8c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004f90:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004f94:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004f98:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004f9c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004fa0:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004fa4:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004fa8:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004fac:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004fb0:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004fbc:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004fc0:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004fc4:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004fc8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004fcc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004fd0:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004fd4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004fd8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004fdc:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004fe0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004fe4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004fe8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004fec:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004ff0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004ff4:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004ff8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004ffc:	f1be 0e01 	subs.w	lr, lr, #1
 8005000:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005004:	f105 0510 	add.w	r5, r5, #16
 8005008:	ed44 7a01 	vstr	s15, [r4, #-4]
 800500c:	f106 0610 	add.w	r6, r6, #16
 8005010:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005014:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005018:	f102 0210 	add.w	r2, r2, #16
 800501c:	f104 0410 	add.w	r4, r4, #16
 8005020:	f103 0310 	add.w	r3, r3, #16
 8005024:	f47f af5a 	bne.w	8004edc <arm_cfft_radix8by2_f32+0x34>
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	fa1f f48c 	uxth.w	r4, ip
 800502e:	4608      	mov	r0, r1
 8005030:	2302      	movs	r3, #2
 8005032:	4621      	mov	r1, r4
 8005034:	f000 fae2 	bl	80055fc <arm_radix8_butterfly_f32>
 8005038:	ecbd 8b08 	vpop	{d8-d11}
 800503c:	4640      	mov	r0, r8
 800503e:	4621      	mov	r1, r4
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	2302      	movs	r3, #2
 8005044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005048:	f000 bad8 	b.w	80055fc <arm_radix8_butterfly_f32>

0800504c <arm_cfft_radix8by4_f32>:
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	ed2d 8b0a 	vpush	{d8-d12}
 8005054:	8802      	ldrh	r2, [r0, #0]
 8005056:	ed91 6a00 	vldr	s12, [r1]
 800505a:	b08f      	sub	sp, #60	; 0x3c
 800505c:	460f      	mov	r7, r1
 800505e:	0852      	lsrs	r2, r2, #1
 8005060:	0093      	lsls	r3, r2, #2
 8005062:	900c      	str	r0, [sp, #48]	; 0x30
 8005064:	9103      	str	r1, [sp, #12]
 8005066:	6841      	ldr	r1, [r0, #4]
 8005068:	ed97 7a01 	vldr	s14, [r7, #4]
 800506c:	4638      	mov	r0, r7
 800506e:	4418      	add	r0, r3
 8005070:	4606      	mov	r6, r0
 8005072:	9009      	str	r0, [sp, #36]	; 0x24
 8005074:	4418      	add	r0, r3
 8005076:	edd0 6a00 	vldr	s13, [r0]
 800507a:	edd6 3a00 	vldr	s7, [r6]
 800507e:	edd6 2a01 	vldr	s5, [r6, #4]
 8005082:	edd0 7a01 	vldr	s15, [r0, #4]
 8005086:	900a      	str	r0, [sp, #40]	; 0x28
 8005088:	ee76 5a26 	vadd.f32	s11, s12, s13
 800508c:	4604      	mov	r4, r0
 800508e:	4625      	mov	r5, r4
 8005090:	441c      	add	r4, r3
 8005092:	ed94 4a00 	vldr	s8, [r4]
 8005096:	ed94 5a01 	vldr	s10, [r4, #4]
 800509a:	9401      	str	r4, [sp, #4]
 800509c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80050a0:	4630      	mov	r0, r6
 80050a2:	ee74 4a24 	vadd.f32	s9, s8, s9
 80050a6:	463e      	mov	r6, r7
 80050a8:	ee14 ea90 	vmov	lr, s9
 80050ac:	ee76 6a66 	vsub.f32	s13, s12, s13
 80050b0:	f846 eb08 	str.w	lr, [r6], #8
 80050b4:	ee37 6a27 	vadd.f32	s12, s14, s15
 80050b8:	edd0 4a01 	vldr	s9, [r0, #4]
 80050bc:	9604      	str	r6, [sp, #16]
 80050be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c2:	9e01      	ldr	r6, [sp, #4]
 80050c4:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80050c8:	ed96 2a01 	vldr	s4, [r6, #4]
 80050cc:	ee36 7a24 	vadd.f32	s14, s12, s9
 80050d0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80050d4:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80050d8:	ee36 6a62 	vsub.f32	s12, s12, s5
 80050dc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80050e0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80050e4:	ee73 3a45 	vsub.f32	s7, s6, s10
 80050e8:	4604      	mov	r4, r0
 80050ea:	ee36 6a45 	vsub.f32	s12, s12, s10
 80050ee:	ee75 6a26 	vadd.f32	s13, s10, s13
 80050f2:	46a3      	mov	fp, r4
 80050f4:	ee37 7a02 	vadd.f32	s14, s14, s4
 80050f8:	ee34 5a84 	vadd.f32	s10, s9, s8
 80050fc:	ee13 8a90 	vmov	r8, s7
 8005100:	46a4      	mov	ip, r4
 8005102:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005106:	ed87 7a01 	vstr	s14, [r7, #4]
 800510a:	f84b 8b08 	str.w	r8, [fp], #8
 800510e:	f1ac 0704 	sub.w	r7, ip, #4
 8005112:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005116:	f101 0c08 	add.w	ip, r1, #8
 800511a:	462c      	mov	r4, r5
 800511c:	f8cd c014 	str.w	ip, [sp, #20]
 8005120:	ee15 ca90 	vmov	ip, s11
 8005124:	f844 cb08 	str.w	ip, [r4], #8
 8005128:	9407      	str	r4, [sp, #28]
 800512a:	f101 0410 	add.w	r4, r1, #16
 800512e:	ed85 6a01 	vstr	s12, [r5, #4]
 8005132:	0852      	lsrs	r2, r2, #1
 8005134:	9402      	str	r4, [sp, #8]
 8005136:	462c      	mov	r4, r5
 8005138:	f101 0518 	add.w	r5, r1, #24
 800513c:	920b      	str	r2, [sp, #44]	; 0x2c
 800513e:	46b2      	mov	sl, r6
 8005140:	9506      	str	r5, [sp, #24]
 8005142:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005146:	3a02      	subs	r2, #2
 8005148:	ee16 5a90 	vmov	r5, s13
 800514c:	46b6      	mov	lr, r6
 800514e:	4630      	mov	r0, r6
 8005150:	0852      	lsrs	r2, r2, #1
 8005152:	f84a 5b08 	str.w	r5, [sl], #8
 8005156:	f1a0 0604 	sub.w	r6, r0, #4
 800515a:	edce 7a01 	vstr	s15, [lr, #4]
 800515e:	9208      	str	r2, [sp, #32]
 8005160:	f000 8130 	beq.w	80053c4 <arm_cfft_radix8by4_f32+0x378>
 8005164:	4691      	mov	r9, r2
 8005166:	9a03      	ldr	r2, [sp, #12]
 8005168:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800516c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005170:	3b08      	subs	r3, #8
 8005172:	f102 0510 	add.w	r5, r2, #16
 8005176:	f101 0c20 	add.w	ip, r1, #32
 800517a:	f1a4 020c 	sub.w	r2, r4, #12
 800517e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005182:	4433      	add	r3, r6
 8005184:	3410      	adds	r4, #16
 8005186:	4650      	mov	r0, sl
 8005188:	4659      	mov	r1, fp
 800518a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800518e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8005192:	ed91 7a00 	vldr	s14, [r1]
 8005196:	edd0 7a00 	vldr	s15, [r0]
 800519a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800519e:	ed54 5a01 	vldr	s11, [r4, #-4]
 80051a2:	edd0 6a01 	vldr	s13, [r0, #4]
 80051a6:	ed91 6a01 	vldr	s12, [r1, #4]
 80051aa:	ee33 8a85 	vadd.f32	s16, s7, s10
 80051ae:	ee34 0a25 	vadd.f32	s0, s8, s11
 80051b2:	ee78 4a07 	vadd.f32	s9, s16, s14
 80051b6:	ee74 5a65 	vsub.f32	s11, s8, s11
 80051ba:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80051be:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80051c2:	ed45 4a02 	vstr	s9, [r5, #-8]
 80051c6:	edd1 4a01 	vldr	s9, [r1, #4]
 80051ca:	ed90 4a01 	vldr	s8, [r0, #4]
 80051ce:	ee70 4a24 	vadd.f32	s9, s0, s9
 80051d2:	ee76 aa05 	vadd.f32	s21, s12, s10
 80051d6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80051da:	ee35 aac7 	vsub.f32	s20, s11, s14
 80051de:	ed45 4a01 	vstr	s9, [r5, #-4]
 80051e2:	edd6 1a00 	vldr	s3, [r6]
 80051e6:	edd7 0a00 	vldr	s1, [r7]
 80051ea:	ed92 4a02 	vldr	s8, [r2, #8]
 80051ee:	edd3 3a02 	vldr	s7, [r3, #8]
 80051f2:	ed93 2a01 	vldr	s4, [r3, #4]
 80051f6:	ed16 1a01 	vldr	s2, [r6, #-4]
 80051fa:	edd2 2a01 	vldr	s5, [r2, #4]
 80051fe:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005202:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005206:	ee39 3a81 	vadd.f32	s6, s19, s2
 800520a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800520e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8005212:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8005216:	ee7a aae6 	vsub.f32	s21, s21, s13
 800521a:	ee18 aa90 	vmov	sl, s17
 800521e:	f847 a908 	str.w	sl, [r7], #-8
 8005222:	edd2 8a01 	vldr	s17, [r2, #4]
 8005226:	ed93 9a01 	vldr	s18, [r3, #4]
 800522a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800522e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005232:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005236:	ee74 0a63 	vsub.f32	s1, s8, s7
 800523a:	edc7 8a01 	vstr	s17, [r7, #4]
 800523e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8005242:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005246:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800524a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800524e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8005252:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005256:	ee30 9a81 	vadd.f32	s18, s1, s2
 800525a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800525e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8005262:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005266:	ee69 baa8 	vmul.f32	s23, s19, s17
 800526a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800526e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8005272:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005276:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800527a:	ee1c aa10 	vmov	sl, s24
 800527e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8005282:	f841 ab08 	str.w	sl, [r1], #8
 8005286:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800528a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800528e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005292:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005296:	ed01 aa01 	vstr	s20, [r1, #-4]
 800529a:	edc2 8a01 	vstr	s17, [r2, #4]
 800529e:	ed82 ba02 	vstr	s22, [r2, #8]
 80052a2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80052a6:	ee74 3a63 	vsub.f32	s7, s8, s7
 80052aa:	ee38 8a47 	vsub.f32	s16, s16, s14
 80052ae:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80052b2:	ee30 0a46 	vsub.f32	s0, s0, s12
 80052b6:	ee33 3a42 	vsub.f32	s6, s6, s4
 80052ba:	ee38 8a67 	vsub.f32	s16, s16, s15
 80052be:	ee30 0a66 	vsub.f32	s0, s0, s13
 80052c2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80052c6:	ee63 8a04 	vmul.f32	s17, s6, s8
 80052ca:	ee28 aa24 	vmul.f32	s20, s16, s9
 80052ce:	ee60 9a04 	vmul.f32	s19, s0, s8
 80052d2:	ee28 8a04 	vmul.f32	s16, s16, s8
 80052d6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80052da:	ee63 3a84 	vmul.f32	s7, s7, s8
 80052de:	ee39 4a68 	vsub.f32	s8, s18, s17
 80052e2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80052e6:	ee14 aa10 	vmov	sl, s8
 80052ea:	ee30 0a48 	vsub.f32	s0, s0, s16
 80052ee:	ee63 4a24 	vmul.f32	s9, s6, s9
 80052f2:	ed44 9a02 	vstr	s19, [r4, #-8]
 80052f6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80052fa:	ed04 0a01 	vstr	s0, [r4, #-4]
 80052fe:	f846 a908 	str.w	sl, [r6], #-8
 8005302:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005306:	ee35 7a87 	vadd.f32	s14, s11, s14
 800530a:	edc6 3a01 	vstr	s7, [r6, #4]
 800530e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005316:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800531a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800531e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8005322:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005326:	ee72 2a62 	vsub.f32	s5, s4, s5
 800532a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800532e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8005332:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005336:	ee62 0a86 	vmul.f32	s1, s5, s12
 800533a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800533e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005342:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005346:	ee62 2a87 	vmul.f32	s5, s5, s14
 800534a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800534e:	ee15 aa90 	vmov	sl, s11
 8005352:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005356:	f840 ab08 	str.w	sl, [r0], #8
 800535a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800535e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8005362:	f1b9 0901 	subs.w	r9, r9, #1
 8005366:	ed40 7a01 	vstr	s15, [r0, #-4]
 800536a:	f105 0508 	add.w	r5, r5, #8
 800536e:	ed83 1a02 	vstr	s2, [r3, #8]
 8005372:	edc3 2a01 	vstr	s5, [r3, #4]
 8005376:	f108 0808 	add.w	r8, r8, #8
 800537a:	f1a2 0208 	sub.w	r2, r2, #8
 800537e:	f10c 0c10 	add.w	ip, ip, #16
 8005382:	f104 0408 	add.w	r4, r4, #8
 8005386:	f10e 0e18 	add.w	lr, lr, #24
 800538a:	f1a3 0308 	sub.w	r3, r3, #8
 800538e:	f47f aefc 	bne.w	800518a <arm_cfft_radix8by4_f32+0x13e>
 8005392:	9908      	ldr	r1, [sp, #32]
 8005394:	9802      	ldr	r0, [sp, #8]
 8005396:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800539a:	00cb      	lsls	r3, r1, #3
 800539c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80053a0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80053a4:	9102      	str	r1, [sp, #8]
 80053a6:	9904      	ldr	r1, [sp, #16]
 80053a8:	4419      	add	r1, r3
 80053aa:	9104      	str	r1, [sp, #16]
 80053ac:	9905      	ldr	r1, [sp, #20]
 80053ae:	4419      	add	r1, r3
 80053b0:	9105      	str	r1, [sp, #20]
 80053b2:	9907      	ldr	r1, [sp, #28]
 80053b4:	449b      	add	fp, r3
 80053b6:	4419      	add	r1, r3
 80053b8:	449a      	add	sl, r3
 80053ba:	9b06      	ldr	r3, [sp, #24]
 80053bc:	9107      	str	r1, [sp, #28]
 80053be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c2:	9306      	str	r3, [sp, #24]
 80053c4:	9a04      	ldr	r2, [sp, #16]
 80053c6:	9807      	ldr	r0, [sp, #28]
 80053c8:	edd2 3a00 	vldr	s7, [r2]
 80053cc:	ed90 4a00 	vldr	s8, [r0]
 80053d0:	eddb 7a00 	vldr	s15, [fp]
 80053d4:	ed9a 3a00 	vldr	s6, [sl]
 80053d8:	edd2 4a01 	vldr	s9, [r2, #4]
 80053dc:	ed90 7a01 	vldr	s14, [r0, #4]
 80053e0:	ed9b 2a01 	vldr	s4, [fp, #4]
 80053e4:	edda 5a01 	vldr	s11, [sl, #4]
 80053e8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80053ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80053ee:	ee73 6a84 	vadd.f32	s13, s7, s8
 80053f2:	ee34 6a87 	vadd.f32	s12, s9, s14
 80053f6:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80053fa:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80053fe:	ee33 5a05 	vadd.f32	s10, s6, s10
 8005402:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005406:	ed82 5a00 	vstr	s10, [r2]
 800540a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800540e:	edda 4a01 	vldr	s9, [sl, #4]
 8005412:	ee36 5a05 	vadd.f32	s10, s12, s10
 8005416:	ee72 3a04 	vadd.f32	s7, s4, s8
 800541a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800541e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8005422:	ed82 5a01 	vstr	s10, [r2, #4]
 8005426:	9a05      	ldr	r2, [sp, #20]
 8005428:	ee34 5a83 	vadd.f32	s10, s9, s6
 800542c:	edd2 1a00 	vldr	s3, [r2]
 8005430:	edd2 2a01 	vldr	s5, [r2, #4]
 8005434:	9a02      	ldr	r2, [sp, #8]
 8005436:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800543a:	ee36 6a42 	vsub.f32	s12, s12, s4
 800543e:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8005442:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005446:	ee65 2a22 	vmul.f32	s5, s10, s5
 800544a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800544e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005452:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005456:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800545a:	edcb 2a00 	vstr	s5, [fp]
 800545e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8005462:	edd2 3a01 	vldr	s7, [r2, #4]
 8005466:	ed92 5a00 	vldr	s10, [r2]
 800546a:	9a06      	ldr	r2, [sp, #24]
 800546c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005470:	ee36 6a65 	vsub.f32	s12, s12, s11
 8005474:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005478:	ee26 5a05 	vmul.f32	s10, s12, s10
 800547c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005480:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005484:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005488:	ee34 6a86 	vadd.f32	s12, s9, s12
 800548c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005494:	edc0 6a01 	vstr	s13, [r0, #4]
 8005498:	ed80 6a00 	vstr	s12, [r0]
 800549c:	ed92 6a01 	vldr	s12, [r2, #4]
 80054a0:	9803      	ldr	r0, [sp, #12]
 80054a2:	ee77 7a43 	vsub.f32	s15, s14, s6
 80054a6:	ee75 5a84 	vadd.f32	s11, s11, s8
 80054aa:	ed92 7a00 	vldr	s14, [r2]
 80054ae:	ee65 6a87 	vmul.f32	s13, s11, s14
 80054b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054b6:	ee65 5a86 	vmul.f32	s11, s11, s12
 80054ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80054be:	ee77 5a65 	vsub.f32	s11, s14, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	edca 5a01 	vstr	s11, [sl, #4]
 80054ca:	edca 7a00 	vstr	s15, [sl]
 80054ce:	6872      	ldr	r2, [r6, #4]
 80054d0:	4621      	mov	r1, r4
 80054d2:	2304      	movs	r3, #4
 80054d4:	f000 f892 	bl	80055fc <arm_radix8_butterfly_f32>
 80054d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054da:	6872      	ldr	r2, [r6, #4]
 80054dc:	4621      	mov	r1, r4
 80054de:	2304      	movs	r3, #4
 80054e0:	f000 f88c 	bl	80055fc <arm_radix8_butterfly_f32>
 80054e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054e6:	6872      	ldr	r2, [r6, #4]
 80054e8:	4621      	mov	r1, r4
 80054ea:	2304      	movs	r3, #4
 80054ec:	f000 f886 	bl	80055fc <arm_radix8_butterfly_f32>
 80054f0:	9801      	ldr	r0, [sp, #4]
 80054f2:	6872      	ldr	r2, [r6, #4]
 80054f4:	4621      	mov	r1, r4
 80054f6:	2304      	movs	r3, #4
 80054f8:	b00f      	add	sp, #60	; 0x3c
 80054fa:	ecbd 8b0a 	vpop	{d8-d12}
 80054fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005502:	f000 b87b 	b.w	80055fc <arm_radix8_butterfly_f32>
 8005506:	bf00      	nop

08005508 <arm_cfft_f32>:
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550c:	2a01      	cmp	r2, #1
 800550e:	4606      	mov	r6, r0
 8005510:	4617      	mov	r7, r2
 8005512:	460c      	mov	r4, r1
 8005514:	4698      	mov	r8, r3
 8005516:	8805      	ldrh	r5, [r0, #0]
 8005518:	d054      	beq.n	80055c4 <arm_cfft_f32+0xbc>
 800551a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800551e:	d04c      	beq.n	80055ba <arm_cfft_f32+0xb2>
 8005520:	d916      	bls.n	8005550 <arm_cfft_f32+0x48>
 8005522:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005526:	d01a      	beq.n	800555e <arm_cfft_f32+0x56>
 8005528:	d95c      	bls.n	80055e4 <arm_cfft_f32+0xdc>
 800552a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800552e:	d044      	beq.n	80055ba <arm_cfft_f32+0xb2>
 8005530:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005534:	d105      	bne.n	8005542 <arm_cfft_f32+0x3a>
 8005536:	4620      	mov	r0, r4
 8005538:	4629      	mov	r1, r5
 800553a:	6872      	ldr	r2, [r6, #4]
 800553c:	2301      	movs	r3, #1
 800553e:	f000 f85d 	bl	80055fc <arm_radix8_butterfly_f32>
 8005542:	f1b8 0f00 	cmp.w	r8, #0
 8005546:	d111      	bne.n	800556c <arm_cfft_f32+0x64>
 8005548:	2f01      	cmp	r7, #1
 800554a:	d016      	beq.n	800557a <arm_cfft_f32+0x72>
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	2d20      	cmp	r5, #32
 8005552:	d032      	beq.n	80055ba <arm_cfft_f32+0xb2>
 8005554:	d94a      	bls.n	80055ec <arm_cfft_f32+0xe4>
 8005556:	2d40      	cmp	r5, #64	; 0x40
 8005558:	d0ed      	beq.n	8005536 <arm_cfft_f32+0x2e>
 800555a:	2d80      	cmp	r5, #128	; 0x80
 800555c:	d1f1      	bne.n	8005542 <arm_cfft_f32+0x3a>
 800555e:	4630      	mov	r0, r6
 8005560:	4621      	mov	r1, r4
 8005562:	f7ff fca1 	bl	8004ea8 <arm_cfft_radix8by2_f32>
 8005566:	f1b8 0f00 	cmp.w	r8, #0
 800556a:	d0ed      	beq.n	8005548 <arm_cfft_f32+0x40>
 800556c:	4620      	mov	r0, r4
 800556e:	89b1      	ldrh	r1, [r6, #12]
 8005570:	68b2      	ldr	r2, [r6, #8]
 8005572:	f7fa fe29 	bl	80001c8 <arm_bitreversal_32>
 8005576:	2f01      	cmp	r7, #1
 8005578:	d1e8      	bne.n	800554c <arm_cfft_f32+0x44>
 800557a:	ee07 5a90 	vmov	s15, r5
 800557e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005582:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005586:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800558a:	2d00      	cmp	r5, #0
 800558c:	d0de      	beq.n	800554c <arm_cfft_f32+0x44>
 800558e:	f104 0108 	add.w	r1, r4, #8
 8005592:	2300      	movs	r3, #0
 8005594:	3301      	adds	r3, #1
 8005596:	429d      	cmp	r5, r3
 8005598:	f101 0108 	add.w	r1, r1, #8
 800559c:	ed11 7a04 	vldr	s14, [r1, #-16]
 80055a0:	ed51 7a03 	vldr	s15, [r1, #-12]
 80055a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80055a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80055ac:	ed01 7a04 	vstr	s14, [r1, #-16]
 80055b0:	ed41 7a03 	vstr	s15, [r1, #-12]
 80055b4:	d1ee      	bne.n	8005594 <arm_cfft_f32+0x8c>
 80055b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ba:	4630      	mov	r0, r6
 80055bc:	4621      	mov	r1, r4
 80055be:	f7ff fd45 	bl	800504c <arm_cfft_radix8by4_f32>
 80055c2:	e7be      	b.n	8005542 <arm_cfft_f32+0x3a>
 80055c4:	b1ad      	cbz	r5, 80055f2 <arm_cfft_f32+0xea>
 80055c6:	f101 030c 	add.w	r3, r1, #12
 80055ca:	2200      	movs	r2, #0
 80055cc:	ed53 7a02 	vldr	s15, [r3, #-8]
 80055d0:	3201      	adds	r2, #1
 80055d2:	eef1 7a67 	vneg.f32	s15, s15
 80055d6:	4295      	cmp	r5, r2
 80055d8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80055dc:	f103 0308 	add.w	r3, r3, #8
 80055e0:	d1f4      	bne.n	80055cc <arm_cfft_f32+0xc4>
 80055e2:	e79a      	b.n	800551a <arm_cfft_f32+0x12>
 80055e4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80055e8:	d0a5      	beq.n	8005536 <arm_cfft_f32+0x2e>
 80055ea:	e7aa      	b.n	8005542 <arm_cfft_f32+0x3a>
 80055ec:	2d10      	cmp	r5, #16
 80055ee:	d0b6      	beq.n	800555e <arm_cfft_f32+0x56>
 80055f0:	e7a7      	b.n	8005542 <arm_cfft_f32+0x3a>
 80055f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80055f6:	d894      	bhi.n	8005522 <arm_cfft_f32+0x1a>
 80055f8:	e7aa      	b.n	8005550 <arm_cfft_f32+0x48>
 80055fa:	bf00      	nop

080055fc <arm_radix8_butterfly_f32>:
 80055fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	ed2d 8b10 	vpush	{d8-d15}
 8005604:	b09d      	sub	sp, #116	; 0x74
 8005606:	461c      	mov	r4, r3
 8005608:	ed9f bac8 	vldr	s22, [pc, #800]	; 800592c <arm_radix8_butterfly_f32+0x330>
 800560c:	921a      	str	r2, [sp, #104]	; 0x68
 800560e:	1d03      	adds	r3, r0, #4
 8005610:	4682      	mov	sl, r0
 8005612:	4689      	mov	r9, r1
 8005614:	468b      	mov	fp, r1
 8005616:	931b      	str	r3, [sp, #108]	; 0x6c
 8005618:	9400      	str	r4, [sp, #0]
 800561a:	469e      	mov	lr, r3
 800561c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8005620:	005a      	lsls	r2, r3, #1
 8005622:	18d6      	adds	r6, r2, r3
 8005624:	18f5      	adds	r5, r6, r3
 8005626:	9203      	str	r2, [sp, #12]
 8005628:	195a      	adds	r2, r3, r5
 800562a:	18d0      	adds	r0, r2, r3
 800562c:	00df      	lsls	r7, r3, #3
 800562e:	1819      	adds	r1, r3, r0
 8005630:	463c      	mov	r4, r7
 8005632:	9701      	str	r7, [sp, #4]
 8005634:	4457      	add	r7, sl
 8005636:	930c      	str	r3, [sp, #48]	; 0x30
 8005638:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8005642:	eb07 0c04 	add.w	ip, r7, r4
 8005646:	9c00      	ldr	r4, [sp, #0]
 8005648:	9302      	str	r3, [sp, #8]
 800564a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800564e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8005652:	3204      	adds	r2, #4
 8005654:	3104      	adds	r1, #4
 8005656:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800565a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800565e:	f04f 0800 	mov.w	r8, #0
 8005662:	eddc 7a00 	vldr	s15, [ip]
 8005666:	edd7 6a00 	vldr	s13, [r7]
 800566a:	edd6 3a00 	vldr	s7, [r6]
 800566e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8005672:	edd5 4a00 	vldr	s9, [r5]
 8005676:	ed90 2a00 	vldr	s4, [r0]
 800567a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800567e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005682:	ee77 8a82 	vadd.f32	s17, s15, s4
 8005686:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800568a:	ee76 1a87 	vadd.f32	s3, s13, s14
 800568e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8005692:	ee31 6a84 	vadd.f32	s12, s3, s8
 8005696:	ee33 5a28 	vadd.f32	s10, s6, s17
 800569a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800569e:	ee75 6a06 	vadd.f32	s13, s10, s12
 80056a2:	ee35 5a46 	vsub.f32	s10, s10, s12
 80056a6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80056aa:	ed85 5a00 	vstr	s10, [r5]
 80056ae:	ed96 1a01 	vldr	s2, [r6, #4]
 80056b2:	edd7 5a01 	vldr	s11, [r7, #4]
 80056b6:	ed92 aa00 	vldr	s20, [r2]
 80056ba:	ed91 6a00 	vldr	s12, [r1]
 80056be:	ed9e 9a00 	vldr	s18, [lr]
 80056c2:	ed95 5a01 	vldr	s10, [r5, #4]
 80056c6:	eddc 6a01 	vldr	s13, [ip, #4]
 80056ca:	edd0 9a01 	vldr	s19, [r0, #4]
 80056ce:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80056d2:	ee71 2a46 	vsub.f32	s5, s2, s12
 80056d6:	ee75 3aca 	vsub.f32	s7, s11, s20
 80056da:	ee37 0a60 	vsub.f32	s0, s14, s1
 80056de:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80056e2:	ee37 7a20 	vadd.f32	s14, s14, s1
 80056e6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80056ea:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80056ee:	ee79 3a05 	vadd.f32	s7, s18, s10
 80056f2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80056f6:	ee39 5a45 	vsub.f32	s10, s18, s10
 80056fa:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80056fe:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005702:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8005706:	ee31 6a06 	vadd.f32	s12, s2, s12
 800570a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800570e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8005712:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8005716:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800571a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800571e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8005722:	ee75 8a86 	vadd.f32	s17, s11, s12
 8005726:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800572a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800572e:	ee75 6a62 	vsub.f32	s13, s10, s5
 8005732:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8005736:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800573a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800573e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8005742:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8005746:	ee75 4a22 	vadd.f32	s9, s10, s5
 800574a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800574e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005752:	ee33 8a06 	vadd.f32	s16, s6, s12
 8005756:	ee75 2a87 	vadd.f32	s5, s11, s14
 800575a:	ee31 9a28 	vadd.f32	s18, s2, s17
 800575e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8005762:	ee74 0a61 	vsub.f32	s1, s8, s3
 8005766:	ee33 2a80 	vadd.f32	s4, s7, s0
 800576a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800576e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8005772:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005776:	ee31 1a68 	vsub.f32	s2, s2, s17
 800577a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800577e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005782:	ee74 4a85 	vadd.f32	s9, s9, s10
 8005786:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800578a:	44d8      	add	r8, fp
 800578c:	45c1      	cmp	r9, r8
 800578e:	ed8e 9a00 	vstr	s18, [lr]
 8005792:	ed85 1a01 	vstr	s2, [r5, #4]
 8005796:	449e      	add	lr, r3
 8005798:	ed8c 8a00 	vstr	s16, [ip]
 800579c:	441d      	add	r5, r3
 800579e:	ed80 6a00 	vstr	s12, [r0]
 80057a2:	edcc 0a01 	vstr	s1, [ip, #4]
 80057a6:	ed80 4a01 	vstr	s8, [r0, #4]
 80057aa:	449c      	add	ip, r3
 80057ac:	ed87 2a00 	vstr	s4, [r7]
 80057b0:	4418      	add	r0, r3
 80057b2:	ed41 3a01 	vstr	s7, [r1, #-4]
 80057b6:	ed42 2a01 	vstr	s5, [r2, #-4]
 80057ba:	ed86 7a00 	vstr	s14, [r6]
 80057be:	ed87 3a01 	vstr	s6, [r7, #4]
 80057c2:	edc1 4a00 	vstr	s9, [r1]
 80057c6:	441f      	add	r7, r3
 80057c8:	edc2 5a00 	vstr	s11, [r2]
 80057cc:	4419      	add	r1, r3
 80057ce:	edc6 6a01 	vstr	s13, [r6, #4]
 80057d2:	441a      	add	r2, r3
 80057d4:	441e      	add	r6, r3
 80057d6:	f63f af44 	bhi.w	8005662 <arm_radix8_butterfly_f32+0x66>
 80057da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057dc:	2907      	cmp	r1, #7
 80057de:	4620      	mov	r0, r4
 80057e0:	f240 81e9 	bls.w	8005bb6 <arm_radix8_butterfly_f32+0x5ba>
 80057e4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80057e8:	193e      	adds	r6, r7, r4
 80057ea:	1935      	adds	r5, r6, r4
 80057ec:	9c03      	ldr	r4, [sp, #12]
 80057ee:	9000      	str	r0, [sp, #0]
 80057f0:	4622      	mov	r2, r4
 80057f2:	3201      	adds	r2, #1
 80057f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80057f8:	9900      	ldr	r1, [sp, #0]
 80057fa:	1828      	adds	r0, r5, r0
 80057fc:	eb00 0e01 	add.w	lr, r0, r1
 8005800:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005802:	440a      	add	r2, r1
 8005804:	eb04 0c01 	add.w	ip, r4, r1
 8005808:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800580c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8005810:	9a00      	ldr	r2, [sp, #0]
 8005812:	940f      	str	r4, [sp, #60]	; 0x3c
 8005814:	00ed      	lsls	r5, r5, #3
 8005816:	9511      	str	r5, [sp, #68]	; 0x44
 8005818:	00d5      	lsls	r5, r2, #3
 800581a:	950d      	str	r5, [sp, #52]	; 0x34
 800581c:	9d01      	ldr	r5, [sp, #4]
 800581e:	3508      	adds	r5, #8
 8005820:	9516      	str	r5, [sp, #88]	; 0x58
 8005822:	9d02      	ldr	r5, [sp, #8]
 8005824:	3508      	adds	r5, #8
 8005826:	0114      	lsls	r4, r2, #4
 8005828:	9517      	str	r5, [sp, #92]	; 0x5c
 800582a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800582c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800582e:	940e      	str	r4, [sp, #56]	; 0x38
 8005830:	00c0      	lsls	r0, r0, #3
 8005832:	9010      	str	r0, [sp, #64]	; 0x40
 8005834:	18aa      	adds	r2, r5, r2
 8005836:	9207      	str	r2, [sp, #28]
 8005838:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800583a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800583c:	18aa      	adds	r2, r5, r2
 800583e:	9208      	str	r2, [sp, #32]
 8005840:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005842:	18aa      	adds	r2, r5, r2
 8005844:	9209      	str	r2, [sp, #36]	; 0x24
 8005846:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800584a:	f10e 0204 	add.w	r2, lr, #4
 800584e:	920a      	str	r2, [sp, #40]	; 0x28
 8005850:	00c9      	lsls	r1, r1, #3
 8005852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005854:	310c      	adds	r1, #12
 8005856:	00f6      	lsls	r6, r6, #3
 8005858:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800585c:	9114      	str	r1, [sp, #80]	; 0x50
 800585e:	18a9      	adds	r1, r5, r2
 8005860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005862:	9612      	str	r6, [sp, #72]	; 0x48
 8005864:	00ff      	lsls	r7, r7, #3
 8005866:	19ae      	adds	r6, r5, r6
 8005868:	3008      	adds	r0, #8
 800586a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800586e:	9606      	str	r6, [sp, #24]
 8005870:	9019      	str	r0, [sp, #100]	; 0x64
 8005872:	18aa      	adds	r2, r5, r2
 8005874:	0164      	lsls	r4, r4, #5
 8005876:	19ee      	adds	r6, r5, r7
 8005878:	f10c 000c 	add.w	r0, ip, #12
 800587c:	9713      	str	r7, [sp, #76]	; 0x4c
 800587e:	9604      	str	r6, [sp, #16]
 8005880:	9015      	str	r0, [sp, #84]	; 0x54
 8005882:	9103      	str	r1, [sp, #12]
 8005884:	9205      	str	r2, [sp, #20]
 8005886:	f104 0208 	add.w	r2, r4, #8
 800588a:	9218      	str	r2, [sp, #96]	; 0x60
 800588c:	f04f 0801 	mov.w	r8, #1
 8005890:	2200      	movs	r2, #0
 8005892:	f102 0108 	add.w	r1, r2, #8
 8005896:	460f      	mov	r7, r1
 8005898:	910b      	str	r1, [sp, #44]	; 0x2c
 800589a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800589c:	188e      	adds	r6, r1, r2
 800589e:	9916      	ldr	r1, [sp, #88]	; 0x58
 80058a0:	188d      	adds	r5, r1, r2
 80058a2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80058a4:	188c      	adds	r4, r1, r2
 80058a6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80058a8:	1888      	adds	r0, r1, r2
 80058aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80058ac:	eb01 0c02 	add.w	ip, r1, r2
 80058b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80058b2:	440a      	add	r2, r1
 80058b4:	9903      	ldr	r1, [sp, #12]
 80058b6:	edd1 fa00 	vldr	s31, [r1]
 80058ba:	9905      	ldr	r1, [sp, #20]
 80058bc:	ed91 fa00 	vldr	s30, [r1]
 80058c0:	9904      	ldr	r1, [sp, #16]
 80058c2:	edd1 ea00 	vldr	s29, [r1]
 80058c6:	9906      	ldr	r1, [sp, #24]
 80058c8:	ed91 ea00 	vldr	s28, [r1]
 80058cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ce:	edd1 da00 	vldr	s27, [r1]
 80058d2:	9908      	ldr	r1, [sp, #32]
 80058d4:	ed91 da00 	vldr	s26, [r1]
 80058d8:	9907      	ldr	r1, [sp, #28]
 80058da:	edd1 ca00 	vldr	s25, [r1]
 80058de:	9903      	ldr	r1, [sp, #12]
 80058e0:	ed91 ca01 	vldr	s24, [r1, #4]
 80058e4:	9905      	ldr	r1, [sp, #20]
 80058e6:	edd1 ba01 	vldr	s23, [r1, #4]
 80058ea:	9904      	ldr	r1, [sp, #16]
 80058ec:	edd1 aa01 	vldr	s21, [r1, #4]
 80058f0:	9906      	ldr	r1, [sp, #24]
 80058f2:	ed91 aa01 	vldr	s20, [r1, #4]
 80058f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058f8:	edd1 7a01 	vldr	s15, [r1, #4]
 80058fc:	9908      	ldr	r1, [sp, #32]
 80058fe:	edcd 7a00 	vstr	s15, [sp]
 8005902:	edd1 7a01 	vldr	s15, [r1, #4]
 8005906:	9907      	ldr	r1, [sp, #28]
 8005908:	edcd 7a01 	vstr	s15, [sp, #4]
 800590c:	edd1 7a01 	vldr	s15, [r1, #4]
 8005910:	eb0a 0e07 	add.w	lr, sl, r7
 8005914:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005916:	edcd 7a02 	vstr	s15, [sp, #8]
 800591a:	eb0c 010a 	add.w	r1, ip, sl
 800591e:	4456      	add	r6, sl
 8005920:	4455      	add	r5, sl
 8005922:	4454      	add	r4, sl
 8005924:	4450      	add	r0, sl
 8005926:	4452      	add	r2, sl
 8005928:	46c4      	mov	ip, r8
 800592a:	e001      	b.n	8005930 <arm_radix8_butterfly_f32+0x334>
 800592c:	3f3504f3 	.word	0x3f3504f3
 8005930:	ed96 5a00 	vldr	s10, [r6]
 8005934:	ed52 9a01 	vldr	s19, [r2, #-4]
 8005938:	ed11 6a01 	vldr	s12, [r1, #-4]
 800593c:	edd0 7a00 	vldr	s15, [r0]
 8005940:	ed17 7a01 	vldr	s14, [r7, #-4]
 8005944:	edde 3a00 	vldr	s7, [lr]
 8005948:	ed94 3a00 	vldr	s6, [r4]
 800594c:	ed95 2a00 	vldr	s4, [r5]
 8005950:	ed9e 0a01 	vldr	s0, [lr, #4]
 8005954:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005958:	ee32 1a06 	vadd.f32	s2, s4, s12
 800595c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005960:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005964:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005968:	ee71 6a24 	vadd.f32	s13, s2, s9
 800596c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005970:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005978:	ed8e 6a00 	vstr	s12, [lr]
 800597c:	edd0 8a01 	vldr	s17, [r0, #4]
 8005980:	ed95 9a01 	vldr	s18, [r5, #4]
 8005984:	edd1 2a00 	vldr	s5, [r1]
 8005988:	ed97 7a00 	vldr	s14, [r7]
 800598c:	edd4 0a01 	vldr	s1, [r4, #4]
 8005990:	ed96 6a01 	vldr	s12, [r6, #4]
 8005994:	edd2 5a00 	vldr	s11, [r2]
 8005998:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800599c:	ee33 3a69 	vsub.f32	s6, s6, s19
 80059a0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80059a4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80059a8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80059ac:	ee38 7a87 	vadd.f32	s14, s17, s14
 80059b0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80059b4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80059b8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80059bc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80059c0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80059c4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80059c8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80059cc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80059d0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80059d4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80059d8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80059dc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80059e0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80059e4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80059e8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80059ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80059f0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80059f4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80059f8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80059fc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005a00:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005a04:	ee32 7a64 	vsub.f32	s14, s4, s9
 8005a08:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005a0c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005a10:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005a14:	ee75 8a85 	vadd.f32	s17, s11, s10
 8005a18:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005a1c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005a20:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005a24:	ee79 1a41 	vsub.f32	s3, s18, s2
 8005a28:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8005a2c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005a30:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005a34:	ee72 4a24 	vadd.f32	s9, s4, s9
 8005a38:	ee30 4a60 	vsub.f32	s8, s0, s1
 8005a3c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005a40:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005a44:	ee77 9a85 	vadd.f32	s19, s15, s10
 8005a48:	ee36 6a03 	vadd.f32	s12, s12, s6
 8005a4c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005a50:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005a54:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8005a58:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8005a5c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005a60:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005a64:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8005a68:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8005a6c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005a70:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005a74:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005a78:	ee35 3a03 	vadd.f32	s6, s10, s6
 8005a7c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005a80:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005a84:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005a88:	ed9d 4a02 	vldr	s8, [sp, #8]
 8005a8c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8005a90:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005a94:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005a98:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005a9c:	ed86 3a00 	vstr	s6, [r6]
 8005aa0:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005aa4:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005aa8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005aac:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005ab0:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005ab4:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005ab8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005abc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005ac0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005ac4:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005ac8:	ed9d 4a00 	vldr	s8, [sp]
 8005acc:	edc6 6a01 	vstr	s13, [r6, #4]
 8005ad0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005ad4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005ad8:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005adc:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005ae0:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005ae4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005ae8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005aec:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005af0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005af4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005af8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005afc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005b00:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005b04:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005b08:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005b0c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005b10:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b14:	44dc      	add	ip, fp
 8005b16:	45e1      	cmp	r9, ip
 8005b18:	ed84 9a00 	vstr	s18, [r4]
 8005b1c:	edc4 3a01 	vstr	s7, [r4, #4]
 8005b20:	449e      	add	lr, r3
 8005b22:	ed02 7a01 	vstr	s14, [r2, #-4]
 8005b26:	edc2 2a00 	vstr	s5, [r2]
 8005b2a:	441e      	add	r6, r3
 8005b2c:	ed85 2a00 	vstr	s4, [r5]
 8005b30:	ed85 8a01 	vstr	s16, [r5, #4]
 8005b34:	441c      	add	r4, r3
 8005b36:	ed47 1a01 	vstr	s3, [r7, #-4]
 8005b3a:	ed87 0a00 	vstr	s0, [r7]
 8005b3e:	441a      	add	r2, r3
 8005b40:	ed41 4a01 	vstr	s9, [r1, #-4]
 8005b44:	edc1 9a00 	vstr	s19, [r1]
 8005b48:	441d      	add	r5, r3
 8005b4a:	edc0 0a00 	vstr	s1, [r0]
 8005b4e:	441f      	add	r7, r3
 8005b50:	ed80 6a01 	vstr	s12, [r0, #4]
 8005b54:	4419      	add	r1, r3
 8005b56:	4418      	add	r0, r3
 8005b58:	f63f aeea 	bhi.w	8005930 <arm_radix8_butterfly_f32+0x334>
 8005b5c:	9a03      	ldr	r2, [sp, #12]
 8005b5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b60:	440a      	add	r2, r1
 8005b62:	9203      	str	r2, [sp, #12]
 8005b64:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b66:	9a05      	ldr	r2, [sp, #20]
 8005b68:	440a      	add	r2, r1
 8005b6a:	9205      	str	r2, [sp, #20]
 8005b6c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005b6e:	9a04      	ldr	r2, [sp, #16]
 8005b70:	440a      	add	r2, r1
 8005b72:	9204      	str	r2, [sp, #16]
 8005b74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005b76:	9a06      	ldr	r2, [sp, #24]
 8005b78:	440a      	add	r2, r1
 8005b7a:	9206      	str	r2, [sp, #24]
 8005b7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b80:	440a      	add	r2, r1
 8005b82:	9209      	str	r2, [sp, #36]	; 0x24
 8005b84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005b86:	9a08      	ldr	r2, [sp, #32]
 8005b88:	440a      	add	r2, r1
 8005b8a:	9208      	str	r2, [sp, #32]
 8005b8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b8e:	9a07      	ldr	r2, [sp, #28]
 8005b90:	440a      	add	r2, r1
 8005b92:	9207      	str	r2, [sp, #28]
 8005b94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b98:	f108 0801 	add.w	r8, r8, #1
 8005b9c:	3208      	adds	r2, #8
 8005b9e:	4588      	cmp	r8, r1
 8005ba0:	920a      	str	r2, [sp, #40]	; 0x28
 8005ba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ba4:	f47f ae75 	bne.w	8005892 <arm_radix8_butterfly_f32+0x296>
 8005ba8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	46c3      	mov	fp, r8
 8005bb0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8005bb4:	e532      	b.n	800561c <arm_radix8_butterfly_f32+0x20>
 8005bb6:	b01d      	add	sp, #116	; 0x74
 8005bb8:	ecbd 8b10 	vpop	{d8-d15}
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005bc0 <__errno>:
 8005bc0:	4b01      	ldr	r3, [pc, #4]	; (8005bc8 <__errno+0x8>)
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	2000000c 	.word	0x2000000c

08005bcc <__libc_init_array>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4e0d      	ldr	r6, [pc, #52]	; (8005c04 <__libc_init_array+0x38>)
 8005bd0:	4c0d      	ldr	r4, [pc, #52]	; (8005c08 <__libc_init_array+0x3c>)
 8005bd2:	1ba4      	subs	r4, r4, r6
 8005bd4:	10a4      	asrs	r4, r4, #2
 8005bd6:	2500      	movs	r5, #0
 8005bd8:	42a5      	cmp	r5, r4
 8005bda:	d109      	bne.n	8005bf0 <__libc_init_array+0x24>
 8005bdc:	4e0b      	ldr	r6, [pc, #44]	; (8005c0c <__libc_init_array+0x40>)
 8005bde:	4c0c      	ldr	r4, [pc, #48]	; (8005c10 <__libc_init_array+0x44>)
 8005be0:	f000 fa38 	bl	8006054 <_init>
 8005be4:	1ba4      	subs	r4, r4, r6
 8005be6:	10a4      	asrs	r4, r4, #2
 8005be8:	2500      	movs	r5, #0
 8005bea:	42a5      	cmp	r5, r4
 8005bec:	d105      	bne.n	8005bfa <__libc_init_array+0x2e>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bf4:	4798      	blx	r3
 8005bf6:	3501      	adds	r5, #1
 8005bf8:	e7ee      	b.n	8005bd8 <__libc_init_array+0xc>
 8005bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bfe:	4798      	blx	r3
 8005c00:	3501      	adds	r5, #1
 8005c02:	e7f2      	b.n	8005bea <__libc_init_array+0x1e>
 8005c04:	080194fc 	.word	0x080194fc
 8005c08:	080194fc 	.word	0x080194fc
 8005c0c:	080194fc 	.word	0x080194fc
 8005c10:	08019500 	.word	0x08019500

08005c14 <memset>:
 8005c14:	4402      	add	r2, r0
 8005c16:	4603      	mov	r3, r0
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d100      	bne.n	8005c1e <memset+0xa>
 8005c1c:	4770      	bx	lr
 8005c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c22:	e7f9      	b.n	8005c18 <memset+0x4>

08005c24 <log10f>:
 8005c24:	b510      	push	{r4, lr}
 8005c26:	ed2d 8b02 	vpush	{d8}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8005c30:	f000 f8be 	bl	8005db0 <__ieee754_log10f>
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <log10f+0xd8>)
 8005c36:	f993 4000 	ldrsb.w	r4, [r3]
 8005c3a:	1c63      	adds	r3, r4, #1
 8005c3c:	d059      	beq.n	8005cf2 <log10f+0xce>
 8005c3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c46:	d654      	bvs.n	8005cf2 <log10f+0xce>
 8005c48:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c50:	d84f      	bhi.n	8005cf2 <log10f+0xce>
 8005c52:	4b2b      	ldr	r3, [pc, #172]	; (8005d00 <log10f+0xdc>)
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	ee18 0a10 	vmov	r0, s16
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9308      	str	r3, [sp, #32]
 8005c5e:	f7fa fc77 	bl	8000550 <__aeabi_f2d>
 8005c62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c6a:	b994      	cbnz	r4, 8005c92 <log10f+0x6e>
 8005c6c:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <log10f+0xe0>)
 8005c6e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005c72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c7e:	d025      	beq.n	8005ccc <log10f+0xa8>
 8005c80:	2301      	movs	r3, #1
 8005c82:	2c02      	cmp	r4, #2
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	d116      	bne.n	8005cb6 <log10f+0x92>
 8005c88:	f7ff ff9a 	bl	8005bc0 <__errno>
 8005c8c:	2321      	movs	r3, #33	; 0x21
 8005c8e:	6003      	str	r3, [r0, #0]
 8005c90:	e016      	b.n	8005cc0 <log10f+0x9c>
 8005c92:	4b1d      	ldr	r3, [pc, #116]	; (8005d08 <log10f+0xe4>)
 8005c94:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005c98:	2200      	movs	r2, #0
 8005c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ca2:	d1ed      	bne.n	8005c80 <log10f+0x5c>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	429c      	cmp	r4, r3
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	d111      	bne.n	8005cd0 <log10f+0xac>
 8005cac:	f7ff ff88 	bl	8005bc0 <__errno>
 8005cb0:	2322      	movs	r3, #34	; 0x22
 8005cb2:	6003      	str	r3, [r0, #0]
 8005cb4:	e011      	b.n	8005cda <log10f+0xb6>
 8005cb6:	4668      	mov	r0, sp
 8005cb8:	f000 f8d3 	bl	8005e62 <matherr>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d0e3      	beq.n	8005c88 <log10f+0x64>
 8005cc0:	4812      	ldr	r0, [pc, #72]	; (8005d0c <log10f+0xe8>)
 8005cc2:	f000 f8d1 	bl	8005e68 <nan>
 8005cc6:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005cca:	e006      	b.n	8005cda <log10f+0xb6>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	4668      	mov	r0, sp
 8005cd2:	f000 f8c6 	bl	8005e62 <matherr>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d0e8      	beq.n	8005cac <log10f+0x88>
 8005cda:	9b08      	ldr	r3, [sp, #32]
 8005cdc:	b11b      	cbz	r3, 8005ce6 <log10f+0xc2>
 8005cde:	f7ff ff6f 	bl	8005bc0 <__errno>
 8005ce2:	9b08      	ldr	r3, [sp, #32]
 8005ce4:	6003      	str	r3, [r0, #0]
 8005ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cea:	f7fa fe9b 	bl	8000a24 <__aeabi_d2f>
 8005cee:	ee00 0a10 	vmov	s0, r0
 8005cf2:	b00a      	add	sp, #40	; 0x28
 8005cf4:	ecbd 8b02 	vpop	{d8}
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000070 	.word	0x20000070
 8005d00:	080194e4 	.word	0x080194e4
 8005d04:	c7efffff 	.word	0xc7efffff
 8005d08:	fff00000 	.word	0xfff00000
 8005d0c:	080194ea 	.word	0x080194ea

08005d10 <sqrtf>:
 8005d10:	b510      	push	{r4, lr}
 8005d12:	ed2d 8b02 	vpush	{d8}
 8005d16:	b08a      	sub	sp, #40	; 0x28
 8005d18:	eeb0 8a40 	vmov.f32	s16, s0
 8005d1c:	f000 f89e 	bl	8005e5c <__ieee754_sqrtf>
 8005d20:	4b21      	ldr	r3, [pc, #132]	; (8005da8 <sqrtf+0x98>)
 8005d22:	f993 4000 	ldrsb.w	r4, [r3]
 8005d26:	1c63      	adds	r3, r4, #1
 8005d28:	d02c      	beq.n	8005d84 <sqrtf+0x74>
 8005d2a:	eeb4 8a48 	vcmp.f32	s16, s16
 8005d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d32:	d627      	bvs.n	8005d84 <sqrtf+0x74>
 8005d34:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3c:	d522      	bpl.n	8005d84 <sqrtf+0x74>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <sqrtf+0x9c>)
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	ee18 0a10 	vmov	r0, s16
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9308      	str	r3, [sp, #32]
 8005d4e:	f7fa fbff 	bl	8000550 <__aeabi_f2d>
 8005d52:	2200      	movs	r2, #0
 8005d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	b9ac      	cbnz	r4, 8005d8c <sqrtf+0x7c>
 8005d60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d64:	4668      	mov	r0, sp
 8005d66:	f000 f87c 	bl	8005e62 <matherr>
 8005d6a:	b1b8      	cbz	r0, 8005d9c <sqrtf+0x8c>
 8005d6c:	9b08      	ldr	r3, [sp, #32]
 8005d6e:	b11b      	cbz	r3, 8005d78 <sqrtf+0x68>
 8005d70:	f7ff ff26 	bl	8005bc0 <__errno>
 8005d74:	9b08      	ldr	r3, [sp, #32]
 8005d76:	6003      	str	r3, [r0, #0]
 8005d78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d7c:	f7fa fe52 	bl	8000a24 <__aeabi_d2f>
 8005d80:	ee00 0a10 	vmov	s0, r0
 8005d84:	b00a      	add	sp, #40	; 0x28
 8005d86:	ecbd 8b02 	vpop	{d8}
 8005d8a:	bd10      	pop	{r4, pc}
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7fa fd60 	bl	8000854 <__aeabi_ddiv>
 8005d94:	2c02      	cmp	r4, #2
 8005d96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d9a:	d1e3      	bne.n	8005d64 <sqrtf+0x54>
 8005d9c:	f7ff ff10 	bl	8005bc0 <__errno>
 8005da0:	2321      	movs	r3, #33	; 0x21
 8005da2:	6003      	str	r3, [r0, #0]
 8005da4:	e7e2      	b.n	8005d6c <sqrtf+0x5c>
 8005da6:	bf00      	nop
 8005da8:	20000070 	.word	0x20000070
 8005dac:	080194eb 	.word	0x080194eb

08005db0 <__ieee754_log10f>:
 8005db0:	b508      	push	{r3, lr}
 8005db2:	ee10 2a10 	vmov	r2, s0
 8005db6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8005dba:	ed2d 8b02 	vpush	{d8}
 8005dbe:	d108      	bne.n	8005dd2 <__ieee754_log10f+0x22>
 8005dc0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005e44 <__ieee754_log10f+0x94>
 8005dc4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8005e48 <__ieee754_log10f+0x98>
 8005dc8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005dcc:	ecbd 8b02 	vpop	{d8}
 8005dd0:	bd08      	pop	{r3, pc}
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	da02      	bge.n	8005ddc <__ieee754_log10f+0x2c>
 8005dd6:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005dda:	e7f3      	b.n	8005dc4 <__ieee754_log10f+0x14>
 8005ddc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005de0:	db02      	blt.n	8005de8 <__ieee754_log10f+0x38>
 8005de2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005de6:	e7f1      	b.n	8005dcc <__ieee754_log10f+0x1c>
 8005de8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005dec:	bfbf      	itttt	lt
 8005dee:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8005e4c <__ieee754_log10f+0x9c>
 8005df2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005df6:	f06f 0118 	mvnlt.w	r1, #24
 8005dfa:	ee17 2a90 	vmovlt	r2, s15
 8005dfe:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8005e02:	bfa8      	it	ge
 8005e04:	2100      	movge	r1, #0
 8005e06:	3b7f      	subs	r3, #127	; 0x7f
 8005e08:	440b      	add	r3, r1
 8005e0a:	0fd9      	lsrs	r1, r3, #31
 8005e0c:	440b      	add	r3, r1
 8005e0e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8005e12:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8005e1e:	ee00 3a10 	vmov	s0, r3
 8005e22:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005e26:	f000 f827 	bl	8005e78 <__ieee754_logf>
 8005e2a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005e50 <__ieee754_log10f+0xa0>
 8005e2e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e32:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005e54 <__ieee754_log10f+0xa4>
 8005e36:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005e3a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005e58 <__ieee754_log10f+0xa8>
 8005e3e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8005e42:	e7c3      	b.n	8005dcc <__ieee754_log10f+0x1c>
 8005e44:	cc000000 	.word	0xcc000000
 8005e48:	00000000 	.word	0x00000000
 8005e4c:	4c000000 	.word	0x4c000000
 8005e50:	3ede5bd9 	.word	0x3ede5bd9
 8005e54:	355427db 	.word	0x355427db
 8005e58:	3e9a2080 	.word	0x3e9a2080

08005e5c <__ieee754_sqrtf>:
 8005e5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005e60:	4770      	bx	lr

08005e62 <matherr>:
 8005e62:	2000      	movs	r0, #0
 8005e64:	4770      	bx	lr
	...

08005e68 <nan>:
 8005e68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005e70 <nan+0x8>
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	00000000 	.word	0x00000000
 8005e74:	7ff80000 	.word	0x7ff80000

08005e78 <__ieee754_logf>:
 8005e78:	ee10 3a10 	vmov	r3, s0
 8005e7c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005e80:	d106      	bne.n	8005e90 <__ieee754_logf+0x18>
 8005e82:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8006018 <__ieee754_logf+0x1a0>
 8005e86:	eddf 7a65 	vldr	s15, [pc, #404]	; 800601c <__ieee754_logf+0x1a4>
 8005e8a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005e8e:	4770      	bx	lr
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da02      	bge.n	8005e9a <__ieee754_logf+0x22>
 8005e94:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005e98:	e7f5      	b.n	8005e86 <__ieee754_logf+0xe>
 8005e9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005e9e:	db02      	blt.n	8005ea6 <__ieee754_logf+0x2e>
 8005ea0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005ea4:	4770      	bx	lr
 8005ea6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eaa:	bfbf      	itttt	lt
 8005eac:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8006020 <__ieee754_logf+0x1a8>
 8005eb0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005eb4:	f06f 0118 	mvnlt.w	r1, #24
 8005eb8:	ee17 3a90 	vmovlt	r3, s15
 8005ebc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8005ec0:	bfa8      	it	ge
 8005ec2:	2100      	movge	r1, #0
 8005ec4:	3a7f      	subs	r2, #127	; 0x7f
 8005ec6:	440a      	add	r2, r1
 8005ec8:	4956      	ldr	r1, [pc, #344]	; (8006024 <__ieee754_logf+0x1ac>)
 8005eca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005ece:	4419      	add	r1, r3
 8005ed0:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8005ed4:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8005ed8:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8005edc:	4319      	orrs	r1, r3
 8005ede:	ee07 1a90 	vmov	s15, r1
 8005ee2:	f103 010f 	add.w	r1, r3, #15
 8005ee6:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8005eea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005eee:	290f      	cmp	r1, #15
 8005ef0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005ef4:	dc31      	bgt.n	8005f5a <__ieee754_logf+0xe2>
 8005ef6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efe:	d10f      	bne.n	8005f20 <__ieee754_logf+0xa8>
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	f000 8085 	beq.w	8006010 <__ieee754_logf+0x198>
 8005f06:	ee07 2a90 	vmov	s15, r2
 8005f0a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8006028 <__ieee754_logf+0x1b0>
 8005f0e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800602c <__ieee754_logf+0x1b4>
 8005f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005f1a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8005f1e:	4770      	bx	lr
 8005f20:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006030 <__ieee754_logf+0x1b8>
 8005f24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005f28:	eea0 7a67 	vfms.f32	s14, s0, s15
 8005f2c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8005f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f34:	b912      	cbnz	r2, 8005f3c <__ieee754_logf+0xc4>
 8005f36:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005f3a:	4770      	bx	lr
 8005f3c:	ee07 2a90 	vmov	s15, r2
 8005f40:	eddf 6a39 	vldr	s13, [pc, #228]	; 8006028 <__ieee754_logf+0x1b0>
 8005f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f48:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005f4c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005f50:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800602c <__ieee754_logf+0x1b4>
 8005f54:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8005f58:	4770      	bx	lr
 8005f5a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005f5e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005f62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006034 <__ieee754_logf+0x1bc>
 8005f66:	eddf 4a34 	vldr	s9, [pc, #208]	; 8006038 <__ieee754_logf+0x1c0>
 8005f6a:	4934      	ldr	r1, [pc, #208]	; (800603c <__ieee754_logf+0x1c4>)
 8005f6c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8005f70:	4419      	add	r1, r3
 8005f72:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8005f76:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	ee07 2a90 	vmov	s15, r2
 8005f82:	ee26 5a06 	vmul.f32	s10, s12, s12
 8005f86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f8a:	ee25 7a05 	vmul.f32	s14, s10, s10
 8005f8e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006040 <__ieee754_logf+0x1c8>
 8005f92:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005f96:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8006044 <__ieee754_logf+0x1cc>
 8005f9a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005f9e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8006048 <__ieee754_logf+0x1d0>
 8005fa2:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005fa6:	eddf 4a29 	vldr	s9, [pc, #164]	; 800604c <__ieee754_logf+0x1d4>
 8005faa:	eee7 4a87 	vfma.f32	s9, s15, s14
 8005fae:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006050 <__ieee754_logf+0x1d8>
 8005fb2:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005fb6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005fba:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005fbe:	dd1c      	ble.n	8005ffa <__ieee754_logf+0x182>
 8005fc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005fc4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005fc8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005fd4:	b922      	cbnz	r2, 8005fe0 <__ieee754_logf+0x168>
 8005fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fda:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005fde:	4770      	bx	lr
 8005fe0:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8006028 <__ieee754_logf+0x1b0>
 8005fe4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005ff0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800602c <__ieee754_logf+0x1b4>
 8005ff4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8005ff8:	4770      	bx	lr
 8005ffa:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005ffe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006002:	2a00      	cmp	r2, #0
 8006004:	d0e9      	beq.n	8005fda <__ieee754_logf+0x162>
 8006006:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006028 <__ieee754_logf+0x1b0>
 800600a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800600e:	e7ed      	b.n	8005fec <__ieee754_logf+0x174>
 8006010:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800601c <__ieee754_logf+0x1a4>
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	cc000000 	.word	0xcc000000
 800601c:	00000000 	.word	0x00000000
 8006020:	4c000000 	.word	0x4c000000
 8006024:	004afb20 	.word	0x004afb20
 8006028:	3717f7d1 	.word	0x3717f7d1
 800602c:	3f317180 	.word	0x3f317180
 8006030:	3eaaaaab 	.word	0x3eaaaaab
 8006034:	3e1cd04f 	.word	0x3e1cd04f
 8006038:	3e178897 	.word	0x3e178897
 800603c:	ffcf5c30 	.word	0xffcf5c30
 8006040:	3e638e29 	.word	0x3e638e29
 8006044:	3ecccccd 	.word	0x3ecccccd
 8006048:	3e3a3325 	.word	0x3e3a3325
 800604c:	3e924925 	.word	0x3e924925
 8006050:	3f2aaaab 	.word	0x3f2aaaab

08006054 <_init>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr

08006060 <_fini>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr
