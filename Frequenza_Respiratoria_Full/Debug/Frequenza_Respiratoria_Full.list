
Frequenza_Respiratoria_Full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000782c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000133f4  080079c0  080079c0  000179c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801adb4  0801adb4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801adb4  0801adb4  0002adb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801adbc  0801adbc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801adbc  0801adbc  0002adbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801adc0  0801adc0  0002adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801adc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301dc  2**0
                  CONTENTS
 10 .bss          0000294c  200001dc  200001dc  000301dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002b28  20002b28  000301dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a6a  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f0  00000000  00000000  00042c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  00045568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000898  00000000  00000000  00045f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226bd  00000000  00000000  000467a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d74e  00000000  00000000  00068e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d1f  00000000  00000000  000765b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c5  00000000  00000000  001492d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003688  00000000  00000000  00149398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002f41  00000000  00000000  0014ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079a4 	.word	0x080079a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080079a4 	.word	0x080079a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fda7 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f8d5 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f9d9 	bl	8001270 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebe:	f000 f9b7 	bl	8001230 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f98b 	bl	80011dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ec6:	f000 f937 	bl	8001138 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_init_f32(&fft_audio_instance, ADC_BUF_LEN); //Inizializzo la FFT
 8000eca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ece:	4857      	ldr	r0, [pc, #348]	; (800102c <main+0x180>)
 8000ed0:	f003 f862 	bl	8003f98 <arm_rfft_fast_init_f32>
			//"sine_val" contains only one frequency (500Hz), so "output_fft" must contain all 0 except a spike at 500Hz
		}
#endif


		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_in_value, ADC_BUF_LEN);
 8000ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed8:	4955      	ldr	r1, [pc, #340]	; (8001030 <main+0x184>)
 8000eda:	4856      	ldr	r0, [pc, #344]	; (8001034 <main+0x188>)
 8000edc:	f000 fe48 	bl	8001b70 <HAL_ADC_Start_DMA>
		//aggiungi in basso delle funzioni callback perchè il main.c non sa quando il buffer è pieno (o pieno a metà)

//---------------------------------------------------------------------------------------------
		if (CpltCallback == 1) {      //full buffer riempito
 8000ee0:	4b55      	ldr	r3, [pc, #340]	; (8001038 <main+0x18c>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d1f4      	bne.n	8000ed4 <main+0x28>


		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef0:	4852      	ldr	r0, [pc, #328]	; (800103c <main+0x190>)
 8000ef2:	f002 f815 	bl	8002f20 <HAL_GPIO_WritePin>


		for (i = 0; i < ADC_BUF_LEN; i++) {
 8000ef6:	4b52      	ldr	r3, [pc, #328]	; (8001040 <main+0x194>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e01c      	b.n	8000f38 <main+0x8c>
		adc_in_value_volt[i] = ((float)(adc_in_value[i])*3/4096);
 8000efe:	4b50      	ldr	r3, [pc, #320]	; (8001040 <main+0x194>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <main+0x184>)
 8000f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f10:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <main+0x194>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001044 <main+0x198>
 8000f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f24:	4a48      	ldr	r2, [pc, #288]	; (8001048 <main+0x19c>)
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < ADC_BUF_LEN; i++) {
 8000f2e:	4b44      	ldr	r3, [pc, #272]	; (8001040 <main+0x194>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a42      	ldr	r2, [pc, #264]	; (8001040 <main+0x194>)
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b41      	ldr	r3, [pc, #260]	; (8001040 <main+0x194>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f40:	dbdd      	blt.n	8000efe <main+0x52>
		//printf("adc_in_value[%d] = %d\n", i, adc_in_value[i]);
		//printf("adc_in_value_volt[%d]: %f\n", i, adc_in_value_volt[i]);
		}


		arm_rfft_fast_f32(&fft_audio_instance, adc_in_value_volt, output_fft, 0);
 8000f42:	2300      	movs	r3, #0
 8000f44:	4a41      	ldr	r2, [pc, #260]	; (800104c <main+0x1a0>)
 8000f46:	4940      	ldr	r1, [pc, #256]	; (8001048 <main+0x19c>)
 8000f48:	4838      	ldr	r0, [pc, #224]	; (800102c <main+0x180>)
 8000f4a:	f003 f909 	bl	8004160 <arm_rfft_fast_f32>
		}*/



		//2° Metodo per estrarre magnitude:
		uint16_t freqIndex = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	80fb      	strh	r3, [r7, #6]
		for (uint16_t index = 0; index < ADC_BUF_LEN; index += 2) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	80bb      	strh	r3, [r7, #4]
 8000f56:	e051      	b.n	8000ffc <main+0x150>

			curVal = sqrtf((output_fft[index] * output_fft[index]) + (output_fft[index+1] * output_fft[index+1]));                                                                                                  //k
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	4a3c      	ldr	r2, [pc, #240]	; (800104c <main+0x1a0>)
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	4a39      	ldr	r2, [pc, #228]	; (800104c <main+0x1a0>)
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	3301      	adds	r3, #1
 8000f78:	4a34      	ldr	r2, [pc, #208]	; (800104c <main+0x1a0>)
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	edd3 6a00 	vldr	s13, [r3]
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <main+0x1a0>)
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	edd3 7a00 	vldr	s15, [r3]
 8000f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9c:	f006 fce0 	bl	8007960 <sqrtf>
 8000fa0:	eef0 7a40 	vmov.f32	s15, s0
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <main+0x1a4>)
 8000fa6:	edc3 7a00 	vstr	s15, [r3]

			if (curVal > peakVal) {
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <main+0x1a4>)
 8000fac:	ed93 7a00 	vldr	s14, [r3]
 8000fb0:	4b28      	ldr	r3, [pc, #160]	; (8001054 <main+0x1a8>)
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	dd17      	ble.n	8000ff0 <main+0x144>
				peakVal = curVal;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <main+0x1a4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a23      	ldr	r2, [pc, #140]	; (8001054 <main+0x1a8>)
 8000fc6:	6013      	str	r3, [r2, #0]
				peakHz = (uint16_t) (freqIndex * SAMPLING_RATE / ((float)ADC_BUF_LEN));
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	f241 7270 	movw	r2, #6000	; 0x1770
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001058 <main+0x1ac>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe6:	ee17 3a90 	vmov	r3, s15
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <main+0x1b0>)
 8000fee:	801a      	strh	r2, [r3, #0]
			}
			freqIndex++;
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	80fb      	strh	r3, [r7, #6]
		for (uint16_t index = 0; index < ADC_BUF_LEN; index += 2) {
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	80bb      	strh	r3, [r7, #4]
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001002:	d3a9      	bcc.n	8000f58 <main+0xac>
		}

	printf("peakHz = %f \n", peakVal);
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <main+0x1a8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa9d 	bl	8000548 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4813      	ldr	r0, [pc, #76]	; (8001060 <main+0x1b4>)
 8001014:	f004 fbde 	bl	80057d4 <iprintf>





CpltCallback = 0;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <main+0x18c>)
 800101a:	2200      	movs	r2, #0
 800101c:	801a      	strh	r2, [r3, #0]

HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <main+0x190>)
 8001026:	f001 ff7b 	bl	8002f20 <HAL_GPIO_WritePin>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_in_value, ADC_BUF_LEN);
 800102a:	e753      	b.n	8000ed4 <main+0x28>
 800102c:	200002e4 	.word	0x200002e4
 8001030:	200002fc 	.word	0x200002fc
 8001034:	200001f8 	.word	0x200001f8
 8001038:	20002b02 	.word	0x20002b02
 800103c:	40020c00 	.word	0x40020c00
 8001040:	20002afc 	.word	0x20002afc
 8001044:	45800000 	.word	0x45800000
 8001048:	20000afc 	.word	0x20000afc
 800104c:	20001afc 	.word	0x20001afc
 8001050:	20002b0c 	.word	0x20002b0c
 8001054:	20002b04 	.word	0x20002b04
 8001058:	44800000 	.word	0x44800000
 800105c:	20002b08 	.word	0x20002b08
 8001060:	080079c0 	.word	0x080079c0

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f003 ff3c 	bl	8004ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <SystemClock_Config+0xcc>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <SystemClock_Config+0xd0>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c8:	2310      	movs	r3, #16
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010cc:	2302      	movs	r3, #2
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d4:	2308      	movs	r3, #8
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e0:	2307      	movs	r3, #7
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 ff33 	bl	8002f54 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f4:	f000 fa3a 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001104:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2103      	movs	r1, #3
 8001116:	4618      	mov	r0, r3
 8001118:	f002 f994 	bl	8003444 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001122:	f000 fa23 	bl	800156c <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3750      	adds	r7, #80	; 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_ADC1_Init+0x98>)
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <MX_ADC1_Init+0x9c>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_ADC1_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001164:	2201      	movs	r2, #1
 8001166:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_ADC1_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <MX_ADC1_Init+0xa0>)
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_ADC1_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001184:	2201      	movs	r2, #1
 8001186:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_ADC1_Init+0x98>)
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <MX_ADC1_Init+0x98>)
 8001198:	f000 fca6 	bl	8001ae8 <HAL_ADC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 f9e3 	bl	800156c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_ADC1_Init+0x98>)
 80011b8:	f000 fdf4 	bl	8001da4 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011c2:	f000 f9d3 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001f8 	.word	0x200001f8
 80011d4:	40012000 	.word	0x40012000
 80011d8:	0f000001 	.word	0x0f000001

080011dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_USART2_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001214:	f002 fb36 	bl	8003884 <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f000 f9a5 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200002a0 	.word	0x200002a0
 800122c:	40004400 	.word	0x40004400

08001230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_DMA_Init+0x3c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <MX_DMA_Init+0x3c>)
 8001240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_DMA_Init+0x3c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2038      	movs	r0, #56	; 0x38
 8001258:	f001 f91f 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800125c:	2038      	movs	r0, #56	; 0x38
 800125e:	f001 f938 	bl	80024d2 <HAL_NVIC_EnableIRQ>

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	4ba2      	ldr	r3, [pc, #648]	; (8001514 <MX_GPIO_Init+0x2a4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4aa1      	ldr	r2, [pc, #644]	; (8001514 <MX_GPIO_Init+0x2a4>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b9f      	ldr	r3, [pc, #636]	; (8001514 <MX_GPIO_Init+0x2a4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	4b9b      	ldr	r3, [pc, #620]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a9a      	ldr	r2, [pc, #616]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b98      	ldr	r3, [pc, #608]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b94      	ldr	r3, [pc, #592]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a93      	ldr	r2, [pc, #588]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b91      	ldr	r3, [pc, #580]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b8d      	ldr	r3, [pc, #564]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a8c      	ldr	r2, [pc, #560]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b8a      	ldr	r3, [pc, #552]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b86      	ldr	r3, [pc, #536]	; (8001514 <MX_GPIO_Init+0x2a4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a85      	ldr	r2, [pc, #532]	; (8001514 <MX_GPIO_Init+0x2a4>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b83      	ldr	r3, [pc, #524]	; (8001514 <MX_GPIO_Init+0x2a4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <MX_GPIO_Init+0x2a4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a7e      	ldr	r2, [pc, #504]	; (8001514 <MX_GPIO_Init+0x2a4>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b7c      	ldr	r3, [pc, #496]	; (8001514 <MX_GPIO_Init+0x2a4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2108      	movs	r1, #8
 8001332:	4879      	ldr	r0, [pc, #484]	; (8001518 <MX_GPIO_Init+0x2a8>)
 8001334:	f001 fdf4 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	2101      	movs	r1, #1
 800133c:	4877      	ldr	r0, [pc, #476]	; (800151c <MX_GPIO_Init+0x2ac>)
 800133e:	f001 fdef 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEDBlue_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f248 0110 	movw	r1, #32784	; 0x8010
 8001348:	4875      	ldr	r0, [pc, #468]	; (8001520 <MX_GPIO_Init+0x2b0>)
 800134a:	f001 fde9 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800134e:	2308      	movs	r3, #8
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	486c      	ldr	r0, [pc, #432]	; (8001518 <MX_GPIO_Init+0x2a8>)
 8001366:	f001 fc3f 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800136a:	2301      	movs	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4866      	ldr	r0, [pc, #408]	; (800151c <MX_GPIO_Init+0x2ac>)
 8001382:	f001 fc31 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001386:	2308      	movs	r3, #8
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001396:	2305      	movs	r3, #5
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	485e      	ldr	r0, [pc, #376]	; (800151c <MX_GPIO_Init+0x2ac>)
 80013a2:	f001 fc21 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	485a      	ldr	r0, [pc, #360]	; (8001524 <MX_GPIO_Init+0x2b4>)
 80013bc:	f001 fc14 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013c0:	2310      	movs	r3, #16
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d0:	2306      	movs	r3, #6
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4852      	ldr	r0, [pc, #328]	; (8001524 <MX_GPIO_Init+0x2b4>)
 80013dc:	f001 fc04 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013e0:	23e0      	movs	r3, #224	; 0xe0
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f0:	2305      	movs	r3, #5
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	484a      	ldr	r0, [pc, #296]	; (8001524 <MX_GPIO_Init+0x2b4>)
 80013fc:	f001 fbf4 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001400:	2304      	movs	r3, #4
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4845      	ldr	r0, [pc, #276]	; (8001528 <MX_GPIO_Init+0x2b8>)
 8001414:	f001 fbe8 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800142a:	2305      	movs	r3, #5
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	483c      	ldr	r0, [pc, #240]	; (8001528 <MX_GPIO_Init+0x2b8>)
 8001436:	f001 fbd7 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBlue_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|Audio_RST_Pin;
 800143a:	f248 0310 	movw	r3, #32784	; 0x8010
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4833      	ldr	r0, [pc, #204]	; (8001520 <MX_GPIO_Init+0x2b0>)
 8001454:	f001 fbc8 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001458:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800146a:	2306      	movs	r3, #6
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4829      	ldr	r0, [pc, #164]	; (800151c <MX_GPIO_Init+0x2ac>)
 8001476:	f001 fbb7 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800147a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4825      	ldr	r0, [pc, #148]	; (8001524 <MX_GPIO_Init+0x2b4>)
 8001490:	f001 fbaa 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001494:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a6:	230a      	movs	r3, #10
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_GPIO_Init+0x2b4>)
 80014b2:	f001 fb99 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014b6:	2320      	movs	r3, #32
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4815      	ldr	r0, [pc, #84]	; (8001520 <MX_GPIO_Init+0x2b0>)
 80014ca:	f001 fb8d 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80014ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <MX_GPIO_Init+0x2b8>)
 80014ec:	f001 fb7c 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_GPIO_Init+0x2a8>)
 8001506:	f001 fb6f 	bl	8002be8 <HAL_GPIO_Init>

}
 800150a:	bf00      	nop
 800150c:	3730      	adds	r7, #48	; 0x30
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40021000 	.word	0x40021000
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400

0800152c <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE BEGIN 4 */



//Callback quando la prima metà del buffer è riempita/piena
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	HalfCpltCallback = 1;
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001536:	2201      	movs	r2, #1
 8001538:	801a      	strh	r2, [r3, #0]

}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20002b00 	.word	0x20002b00

0800154c <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	CpltCallback = 1;
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001556:	2201      	movs	r2, #1
 8001558:	801a      	strh	r2, [r3, #0]

}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20002b02 	.word	0x20002b02

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_MspInit+0x4c>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015b6:	2007      	movs	r0, #7
 80015b8:	f000 ff64 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <HAL_ADC_MspInit+0xdc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d157      	bne.n	800169a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_ADC_MspInit+0xe0>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_ADC_MspInit+0xe0>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_ADC_MspInit+0xe0>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_ADC_MspInit+0xe0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_ADC_MspInit+0xe0>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_ADC_MspInit+0xe0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001622:	2302      	movs	r3, #2
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001626:	2303      	movs	r3, #3
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	481d      	ldr	r0, [pc, #116]	; (80016ac <HAL_ADC_MspInit+0xe4>)
 8001636:	f001 fad7 	bl	8002be8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 800163c:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <HAL_ADC_MspInit+0xec>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 800165c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001660:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 8001664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001668:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 800166c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001670:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 8001680:	f000 ff42 	bl	8002508 <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800168a:	f7ff ff6f 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 8001692:	639a      	str	r2, [r3, #56]	; 0x38
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_ADC_MspInit+0xe8>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40012000 	.word	0x40012000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	20000240 	.word	0x20000240
 80016b4:	40026410 	.word	0x40026410

080016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_UART_MspInit+0x84>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d12b      	bne.n	8001732 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_UART_MspInit+0x88>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_UART_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_UART_MspInit+0x88>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_UART_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001712:	230c      	movs	r3, #12
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001722:	2307      	movs	r3, #7
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <HAL_UART_MspInit+0x8c>)
 800172e:	f001 fa5b 	bl	8002be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40004400 	.word	0x40004400
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 f988 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA2_Stream0_IRQHandler+0x10>)
 80017a2:	f000 ffb7 	bl	8002714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000240 	.word	0x20000240

080017b0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <ITM_SendChar+0x48>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <ITM_SendChar+0x48>)
 80017c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <ITM_SendChar+0x4c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <ITM_SendChar+0x4c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80017d2:	bf00      	nop
 80017d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f8      	beq.n	80017d4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80017e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	6013      	str	r3, [r2, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000edfc 	.word	0xe000edfc
 80017fc:	e0000e00 	.word	0xe0000e00

08001800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_kill>:

int _kill(int pid, int sig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800181a:	f003 fb3f 	bl	8004e9c <__errno>
 800181e:	4603      	mov	r3, r0
 8001820:	2216      	movs	r2, #22
 8001822:	601a      	str	r2, [r3, #0]
  return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_exit>:

void _exit (int status)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001842:	e7fe      	b.n	8001842 <_exit+0x12>

08001844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e00a      	b.n	800186c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001856:	f3af 8000 	nop.w
 800185a:	4601      	mov	r1, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf0      	blt.n	8001856 <_read+0x12>
  }

  return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e009      	b.n	80018a4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff89 	bl	80017b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf1      	blt.n	8001890 <_write+0x12>
  }
  return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_close>:

int _close(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f003 faa4 	bl	8004e9c <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20020000 	.word	0x20020000
 8001980:	00000400 	.word	0x00000400
 8001984:	20002b10 	.word	0x20002b10
 8001988:	20002b28 	.word	0x20002b28

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019da:	f7ff ffd7 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f003 fa63 	bl	8004ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fa63 	bl	8000eac <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019f4:	0801adc4 	.word	0x0801adc4
  ldr r2, =_sbss
 80019f8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019fc:	20002b28 	.word	0x20002b28

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 fd29 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fd9e 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fd41 	bl	80024ee <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 fd09 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20002b14 	.word	0x20002b14

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20002b14 	.word	0x20002b14

08001ae8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e033      	b.n	8001b66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fd5e 	bl	80015c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b2e:	f023 0302 	bic.w	r3, r3, #2
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fa54 	bl	8001fe8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
 8001b56:	e001      	b.n	8001b5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Start_DMA+0x1e>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e0e9      	b.n	8001d62 <HAL_ADC_Start_DMA+0x1f2>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d018      	beq.n	8001bd6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb4:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_ADC_Start_DMA+0x1fc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a6d      	ldr	r2, [pc, #436]	; (8001d70 <HAL_ADC_Start_DMA+0x200>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9a      	lsrs	r2, r3, #18
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be4:	d107      	bne.n	8001bf6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	f040 80a1 	bne.w	8001d48 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f023 0206 	bic.w	r2, r3, #6
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
 8001c52:	e002      	b.n	8001c5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c62:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_ADC_Start_DMA+0x204>)
 8001c64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	4a43      	ldr	r2, [pc, #268]	; (8001d78 <HAL_ADC_Start_DMA+0x208>)
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	4a42      	ldr	r2, [pc, #264]	; (8001d7c <HAL_ADC_Start_DMA+0x20c>)
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	4a41      	ldr	r2, [pc, #260]	; (8001d80 <HAL_ADC_Start_DMA+0x210>)
 8001c7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	334c      	adds	r3, #76	; 0x4c
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f000 fcd4 	bl	8002664 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d12a      	bne.n	8001d1e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2d      	ldr	r2, [pc, #180]	; (8001d84 <HAL_ADC_Start_DMA+0x214>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d015      	beq.n	8001cfe <HAL_ADC_Start_DMA+0x18e>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <HAL_ADC_Start_DMA+0x218>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d105      	bne.n	8001ce8 <HAL_ADC_Start_DMA+0x178>
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_ADC_Start_DMA+0x204>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00a      	beq.n	8001cfe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <HAL_ADC_Start_DMA+0x21c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d136      	bne.n	8001d60 <HAL_ADC_Start_DMA+0x1f0>
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_ADC_Start_DMA+0x204>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d130      	bne.n	8001d60 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d129      	bne.n	8001d60 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	e020      	b.n	8001d60 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <HAL_ADC_Start_DMA+0x214>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d11b      	bne.n	8001d60 <HAL_ADC_Start_DMA+0x1f0>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d114      	bne.n	8001d60 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	e00b      	b.n	8001d60 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	431bde83 	.word	0x431bde83
 8001d74:	40012300 	.word	0x40012300
 8001d78:	080021e1 	.word	0x080021e1
 8001d7c:	0800229b 	.word	0x0800229b
 8001d80:	080022b7 	.word	0x080022b7
 8001d84:	40012000 	.word	0x40012000
 8001d88:	40012100 	.word	0x40012100
 8001d8c:	40012200 	.word	0x40012200

08001d90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1c>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e105      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x228>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	d925      	bls.n	8001e1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68d9      	ldr	r1, [r3, #12]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	3b1e      	subs	r3, #30
 8001de6:	2207      	movs	r2, #7
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43da      	mvns	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	400a      	ands	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68d9      	ldr	r1, [r3, #12]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	4603      	mov	r3, r0
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4403      	add	r3, r0
 8001e0e:	3b1e      	subs	r3, #30
 8001e10:	409a      	lsls	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	e022      	b.n	8001e62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	2207      	movs	r2, #7
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6919      	ldr	r1, [r3, #16]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4403      	add	r3, r0
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d824      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b05      	subs	r3, #5
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	400a      	ands	r2, r1
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b05      	subs	r3, #5
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb2:	e04c      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d824      	bhi.n	8001f06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b23      	subs	r3, #35	; 0x23
 8001ece:	221f      	movs	r2, #31
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	400a      	ands	r2, r1
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b23      	subs	r3, #35	; 0x23
 8001ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
 8001f04:	e023      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b41      	subs	r3, #65	; 0x41
 8001f18:	221f      	movs	r2, #31
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	400a      	ands	r2, r1
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b41      	subs	r3, #65	; 0x41
 8001f42:	fa00 f203 	lsl.w	r2, r0, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_ADC_ConfigChannel+0x234>)
 8001f50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <HAL_ADC_ConfigChannel+0x238>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d109      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1cc>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b12      	cmp	r3, #18
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_ADC_ConfigChannel+0x238>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d123      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x21e>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d003      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x1e6>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b11      	cmp	r3, #17
 8001f88:	d11b      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d111      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_ADC_ConfigChannel+0x23c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_ADC_ConfigChannel+0x240>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	0c9a      	lsrs	r2, r3, #18
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb4:	e002      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f9      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40012300 	.word	0x40012300
 8001fdc:	40012000 	.word	0x40012000
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	431bde83 	.word	0x431bde83

08001fe8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff0:	4b79      	ldr	r3, [pc, #484]	; (80021d8 <ADC_Init+0x1f0>)
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	431a      	orrs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800201c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	021a      	lsls	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6899      	ldr	r1, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	4a58      	ldr	r2, [pc, #352]	; (80021dc <ADC_Init+0x1f4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800208e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6899      	ldr	r1, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	e00f      	b.n	80020e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0202 	bic.w	r2, r2, #2
 80020f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
 8002100:	005a      	lsls	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002122:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002132:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	3b01      	subs	r3, #1
 8002140:	035a      	lsls	r2, r3, #13
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	e007      	b.n	800215c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	3b01      	subs	r3, #1
 8002178:	051a      	lsls	r2, r3, #20
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800219e:	025a      	lsls	r2, r3, #9
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	029a      	lsls	r2, r3, #10
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40012300 	.word	0x40012300
 80021dc:	0f000001 	.word	0x0f000001

080021e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d13c      	bne.n	8002274 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d12b      	bne.n	800226c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002218:	2b00      	cmp	r3, #0
 800221a:	d127      	bne.n	800226c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002234:	2b00      	cmp	r3, #0
 8002236:	d119      	bne.n	800226c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0220 	bic.w	r2, r2, #32
 8002246:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7ff f96d 	bl	800154c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002272:	e00e      	b.n	8002292 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff fd85 	bl	8001d90 <HAL_ADC_ErrorCallback>
}
 8002286:	e004      	b.n	8002292 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff f93f 	bl	800152c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f043 0204 	orr.w	r2, r3, #4
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7ff fd5a 	bl	8001d90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	490c      	ldr	r1, [pc, #48]	; (80023d0 <__NVIC_SetPriority+0x4c>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4908      	ldr	r1, [pc, #32]	; (80023d4 <__NVIC_SetPriority+0x50>)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3b04      	subs	r3, #4
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf28      	it	cs
 80023f6:	2304      	movcs	r3, #4
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b03      	subs	r3, #3
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43d9      	mvns	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	4313      	orrs	r3, r2
         );
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f7ff ff8e 	bl	8002384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff29 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff3e 	bl	800232c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff8e 	bl	80023d8 <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5d 	bl	8002384 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff31 	bl	8002348 <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ffa2 	bl	8002440 <SysTick_Config>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff fadc 	bl	8001ad0 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e099      	b.n	8002658 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002544:	e00f      	b.n	8002566 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002546:	f7ff fac3 	bl	8001ad0 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b05      	cmp	r3, #5
 8002552:	d908      	bls.n	8002566 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e078      	b.n	8002658 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e8      	bne.n	8002546 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4b38      	ldr	r3, [pc, #224]	; (8002660 <HAL_DMA_Init+0x158>)
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	4313      	orrs	r3, r2
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f023 0307 	bic.w	r3, r3, #7
 80025e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d117      	bne.n	800262a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fa6f 	bl	8002af0 <DMA_CheckFifoParam>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2240      	movs	r2, #64	; 0x40
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002626:	2301      	movs	r3, #1
 8002628:	e016      	b.n	8002658 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa26 	bl	8002a84 <DMA_CalcBaseAndBitshift>
 8002638:	4603      	mov	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	223f      	movs	r2, #63	; 0x3f
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	f010803f 	.word	0xf010803f

08002664 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_DMA_Start_IT+0x26>
 8002686:	2302      	movs	r3, #2
 8002688:	e040      	b.n	800270c <HAL_DMA_Start_IT+0xa8>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d12f      	bne.n	80026fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f9b8 	bl	8002a28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	223f      	movs	r2, #63	; 0x3f
 80026be:	409a      	lsls	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0216 	orr.w	r2, r2, #22
 80026d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0208 	orr.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e005      	b.n	800270a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002706:	2302      	movs	r3, #2
 8002708:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800270a:	7dfb      	ldrb	r3, [r7, #23]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002720:	4b8e      	ldr	r3, [pc, #568]	; (800295c <HAL_DMA_IRQHandler+0x248>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a8e      	ldr	r2, [pc, #568]	; (8002960 <HAL_DMA_IRQHandler+0x24c>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	0a9b      	lsrs	r3, r3, #10
 800272c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	2208      	movs	r2, #8
 8002740:	409a      	lsls	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01a      	beq.n	8002780 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0204 	bic.w	r2, r2, #4
 8002766:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2208      	movs	r2, #8
 800276e:	409a      	lsls	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2201      	movs	r2, #1
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	2201      	movs	r2, #1
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	f043 0202 	orr.w	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	2204      	movs	r2, #4
 80027bc:	409a      	lsls	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	2204      	movs	r2, #4
 80027da:	409a      	lsls	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f043 0204 	orr.w	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	2210      	movs	r2, #16
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d043      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d03c      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	2210      	movs	r2, #16
 8002810:	409a      	lsls	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d018      	beq.n	8002856 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d024      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
 8002842:	e01f      	b.n	8002884 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01b      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
 8002854:	e016      	b.n	8002884 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0208 	bic.w	r2, r2, #8
 8002872:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2220      	movs	r2, #32
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 808f 	beq.w	80029b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8087 	beq.w	80029b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2220      	movs	r2, #32
 80028ac:	409a      	lsls	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d136      	bne.n	800292c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0216 	bic.w	r2, r2, #22
 80028cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <HAL_DMA_IRQHandler+0x1da>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0208 	bic.w	r2, r2, #8
 80028fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	223f      	movs	r2, #63	; 0x3f
 8002904:	409a      	lsls	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291e:	2b00      	cmp	r3, #0
 8002920:	d07e      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
        }
        return;
 800292a:	e079      	b.n	8002a20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01d      	beq.n	8002976 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10d      	bne.n	8002964 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	2b00      	cmp	r3, #0
 800294e:	d031      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
 8002958:	e02c      	b.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000
 8002960:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d023      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e01e      	b.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10f      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0210 	bic.w	r2, r2, #16
 8002992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d032      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2205      	movs	r2, #5
 80029cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d307      	bcc.n	80029fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f2      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x2cc>
 80029fa:	e000      	b.n	80029fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
 8002a1e:	e000      	b.n	8002a22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a20:	bf00      	nop
    }
  }
}
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d108      	bne.n	8002a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a66:	e007      	b.n	8002a78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3b10      	subs	r3, #16
 8002a94:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a9e:	4a13      	ldr	r2, [pc, #76]	; (8002aec <DMA_CalcBaseAndBitshift+0x68>)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d909      	bls.n	8002ac6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	1d1a      	adds	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ac4:	e007      	b.n	8002ad6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	aaaaaaab 	.word	0xaaaaaaab
 8002aec:	080079e8 	.word	0x080079e8

08002af0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11f      	bne.n	8002b4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d856      	bhi.n	8002bbe <DMA_CheckFifoParam+0xce>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <DMA_CheckFifoParam+0x28>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b3b 	.word	0x08002b3b
 8002b20:	08002b29 	.word	0x08002b29
 8002b24:	08002bbf 	.word	0x08002bbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d046      	beq.n	8002bc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e043      	b.n	8002bc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b42:	d140      	bne.n	8002bc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b48:	e03d      	b.n	8002bc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d121      	bne.n	8002b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d837      	bhi.n	8002bca <DMA_CheckFifoParam+0xda>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <DMA_CheckFifoParam+0x70>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b77 	.word	0x08002b77
 8002b68:	08002b71 	.word	0x08002b71
 8002b6c:	08002b89 	.word	0x08002b89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e030      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d025      	beq.n	8002bce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b86:	e022      	b.n	8002bce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b90:	d11f      	bne.n	8002bd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b96:	e01c      	b.n	8002bd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d903      	bls.n	8002ba6 <DMA_CheckFifoParam+0xb6>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d003      	beq.n	8002bac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ba4:	e018      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8002baa:	e015      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	e00b      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e00a      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e008      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e006      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e004      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
    }
  } 
  
  return status; 
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop

08002be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	e16b      	b.n	8002edc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c04:	2201      	movs	r2, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	f040 815a 	bne.w	8002ed6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d005      	beq.n	8002c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d130      	bne.n	8002c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2203      	movs	r2, #3
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 0201 	and.w	r2, r3, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d017      	beq.n	8002cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d123      	bne.n	8002d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	08da      	lsrs	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3208      	adds	r2, #8
 8002cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	08da      	lsrs	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3208      	adds	r2, #8
 8002d26:	69b9      	ldr	r1, [r7, #24]
 8002d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0203 	and.w	r2, r3, #3
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80b4 	beq.w	8002ed6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b60      	ldr	r3, [pc, #384]	; (8002ef4 <HAL_GPIO_Init+0x30c>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a5f      	ldr	r2, [pc, #380]	; (8002ef4 <HAL_GPIO_Init+0x30c>)
 8002d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_GPIO_Init+0x30c>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d8a:	4a5b      	ldr	r2, [pc, #364]	; (8002ef8 <HAL_GPIO_Init+0x310>)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	3302      	adds	r3, #2
 8002d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	220f      	movs	r2, #15
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_GPIO_Init+0x314>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02b      	beq.n	8002e0e <HAL_GPIO_Init+0x226>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a51      	ldr	r2, [pc, #324]	; (8002f00 <HAL_GPIO_Init+0x318>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d025      	beq.n	8002e0a <HAL_GPIO_Init+0x222>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a50      	ldr	r2, [pc, #320]	; (8002f04 <HAL_GPIO_Init+0x31c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <HAL_GPIO_Init+0x21e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4f      	ldr	r2, [pc, #316]	; (8002f08 <HAL_GPIO_Init+0x320>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x21a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4e      	ldr	r2, [pc, #312]	; (8002f0c <HAL_GPIO_Init+0x324>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x216>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4d      	ldr	r2, [pc, #308]	; (8002f10 <HAL_GPIO_Init+0x328>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x212>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4c      	ldr	r2, [pc, #304]	; (8002f14 <HAL_GPIO_Init+0x32c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <HAL_GPIO_Init+0x330>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x20a>
 8002dee:	2307      	movs	r3, #7
 8002df0:	e00e      	b.n	8002e10 <HAL_GPIO_Init+0x228>
 8002df2:	2308      	movs	r3, #8
 8002df4:	e00c      	b.n	8002e10 <HAL_GPIO_Init+0x228>
 8002df6:	2306      	movs	r3, #6
 8002df8:	e00a      	b.n	8002e10 <HAL_GPIO_Init+0x228>
 8002dfa:	2305      	movs	r3, #5
 8002dfc:	e008      	b.n	8002e10 <HAL_GPIO_Init+0x228>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x228>
 8002e02:	2303      	movs	r3, #3
 8002e04:	e004      	b.n	8002e10 <HAL_GPIO_Init+0x228>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_Init+0x228>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_GPIO_Init+0x228>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f002 0203 	and.w	r2, r2, #3
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	4093      	lsls	r3, r2
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e20:	4935      	ldr	r1, [pc, #212]	; (8002ef8 <HAL_GPIO_Init+0x310>)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e52:	4a32      	ldr	r2, [pc, #200]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e7c:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eac:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed0:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	f67f ae90 	bls.w	8002c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020400 	.word	0x40020400
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40021800 	.word	0x40021800
 8002f18:	40021c00 	.word	0x40021c00
 8002f1c:	40013c00 	.word	0x40013c00

08002f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f30:	787b      	ldrb	r3, [r7, #1]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f3c:	e003      	b.n	8002f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	041a      	lsls	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	619a      	str	r2, [r3, #24]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e267      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d075      	beq.n	800305e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f72:	4b88      	ldr	r3, [pc, #544]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d00c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7e:	4b85      	ldr	r3, [pc, #532]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d112      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8a:	4b82      	ldr	r3, [pc, #520]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f96:	d10b      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	4b7e      	ldr	r3, [pc, #504]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d05b      	beq.n	800305c <HAL_RCC_OscConfig+0x108>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d157      	bne.n	800305c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e242      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x74>
 8002fba:	4b76      	ldr	r3, [pc, #472]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a75      	ldr	r2, [pc, #468]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e01d      	b.n	8003004 <HAL_RCC_OscConfig+0xb0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x98>
 8002fd2:	4b70      	ldr	r3, [pc, #448]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6f      	ldr	r2, [pc, #444]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b6d      	ldr	r3, [pc, #436]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6c      	ldr	r2, [pc, #432]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0xb0>
 8002fec:	4b69      	ldr	r3, [pc, #420]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a68      	ldr	r2, [pc, #416]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b66      	ldr	r3, [pc, #408]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a65      	ldr	r2, [pc, #404]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8002ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fd60 	bl	8001ad0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003014:	f7fe fd5c 	bl	8001ad0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e207      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0xc0>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe fd4c 	bl	8001ad0 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800303c:	f7fe fd48 	bl	8001ad0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e1f3      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304e:	4b51      	ldr	r3, [pc, #324]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0xe8>
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d063      	beq.n	8003132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800306a:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307e:	2b08      	cmp	r3, #8
 8003080:	d11c      	bne.n	80030bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003082:	4b44      	ldr	r3, [pc, #272]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d116      	bne.n	80030bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_RCC_OscConfig+0x152>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e1c7      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a6:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4937      	ldr	r1, [pc, #220]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	e03a      	b.n	8003132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c4:	4b34      	ldr	r3, [pc, #208]	; (8003198 <HAL_RCC_OscConfig+0x244>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe fd01 	bl	8001ad0 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d2:	f7fe fcfd 	bl	8001ad0 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1a8      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4925      	ldr	r1, [pc, #148]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]
 8003104:	e015      	b.n	8003132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_RCC_OscConfig+0x244>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fce0 	bl	8001ad0 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003114:	f7fe fcdc 	bl	8001ad0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e187      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d036      	beq.n	80031ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d016      	beq.n	8003174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_RCC_OscConfig+0x248>)
 8003148:	2201      	movs	r2, #1
 800314a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe fcc0 	bl	8001ad0 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003154:	f7fe fcbc 	bl	8001ad0 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e167      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_OscConfig+0x240>)
 8003168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x200>
 8003172:	e01b      	b.n	80031ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_OscConfig+0x248>)
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317a:	f7fe fca9 	bl	8001ad0 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003180:	e00e      	b.n	80031a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003182:	f7fe fca5 	bl	8001ad0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d907      	bls.n	80031a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e150      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
 8003194:	40023800 	.word	0x40023800
 8003198:	42470000 	.word	0x42470000
 800319c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a0:	4b88      	ldr	r3, [pc, #544]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80031a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ea      	bne.n	8003182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8097 	beq.w	80032e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031be:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	4b7d      	ldr	r3, [pc, #500]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4a7c      	ldr	r2, [pc, #496]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80031d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
 80031da:	4b7a      	ldr	r3, [pc, #488]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b77      	ldr	r3, [pc, #476]	; (80033c8 <HAL_RCC_OscConfig+0x474>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d118      	bne.n	8003228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f6:	4b74      	ldr	r3, [pc, #464]	; (80033c8 <HAL_RCC_OscConfig+0x474>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a73      	ldr	r2, [pc, #460]	; (80033c8 <HAL_RCC_OscConfig+0x474>)
 80031fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003202:	f7fe fc65 	bl	8001ad0 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320a:	f7fe fc61 	bl	8001ad0 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e10c      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x474>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x2ea>
 8003230:	4b64      	ldr	r3, [pc, #400]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	4a63      	ldr	r2, [pc, #396]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6713      	str	r3, [r2, #112]	; 0x70
 800323c:	e01c      	b.n	8003278 <HAL_RCC_OscConfig+0x324>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b05      	cmp	r3, #5
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x30c>
 8003246:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	4a5e      	ldr	r2, [pc, #376]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800324c:	f043 0304 	orr.w	r3, r3, #4
 8003250:	6713      	str	r3, [r2, #112]	; 0x70
 8003252:	4b5c      	ldr	r3, [pc, #368]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0x324>
 8003260:	4b58      	ldr	r3, [pc, #352]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a57      	ldr	r2, [pc, #348]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
 800326c:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a54      	ldr	r2, [pc, #336]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003272:	f023 0304 	bic.w	r3, r3, #4
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d015      	beq.n	80032ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fc26 	bl	8001ad0 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fe fc22 	bl	8001ad0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0cb      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329e:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0ee      	beq.n	8003288 <HAL_RCC_OscConfig+0x334>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fc10 	bl	8001ad0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7fe fc0c 	bl	8001ad0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e0b5      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ca:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ee      	bne.n	80032b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032dc:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	4a38      	ldr	r2, [pc, #224]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80032e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80a1 	beq.w	8003434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032f2:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d05c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d141      	bne.n	800338a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b31      	ldr	r3, [pc, #196]	; (80033cc <HAL_RCC_OscConfig+0x478>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe fbe0 	bl	8001ad0 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe fbdc 	bl	8001ad0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e087      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	3b01      	subs	r3, #1
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	061b      	lsls	r3, r3, #24
 8003356:	491b      	ldr	r1, [pc, #108]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x478>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fbb5 	bl	8001ad0 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe fbb1 	bl	8001ad0 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e05c      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x416>
 8003388:	e054      	b.n	8003434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_RCC_OscConfig+0x478>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe fb9e 	bl	8001ad0 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe fb9a 	bl	8001ad0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e045      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_RCC_OscConfig+0x470>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x444>
 80033b6:	e03d      	b.n	8003434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e038      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40007000 	.word	0x40007000
 80033cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x4ec>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d028      	beq.n	8003430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d121      	bne.n	8003430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d11a      	bne.n	8003430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003400:	4013      	ands	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003408:	4293      	cmp	r3, r2
 800340a:	d111      	bne.n	8003430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	3b01      	subs	r3, #1
 800341a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d107      	bne.n	8003430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800

08003444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0cc      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003458:	4b68      	ldr	r3, [pc, #416]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d90c      	bls.n	8003480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b63      	ldr	r3, [pc, #396]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0b8      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d020      	beq.n	80034ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a58      	ldr	r2, [pc, #352]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a52      	ldr	r2, [pc, #328]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034bc:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	494d      	ldr	r1, [pc, #308]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d044      	beq.n	8003564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d119      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e07f      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e06f      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e067      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f023 0203 	bic.w	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4934      	ldr	r1, [pc, #208]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003534:	f7fe facc 	bl	8001ad0 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	e00a      	b.n	8003552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353c:	f7fe fac8 	bl	8001ad0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e04f      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 020c 	and.w	r2, r3, #12
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	429a      	cmp	r2, r3
 8003562:	d1eb      	bne.n	800353c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d20c      	bcs.n	800358c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e032      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4916      	ldr	r1, [pc, #88]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	490e      	ldr	r1, [pc, #56]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ca:	f000 f821 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 80035ce:	4602      	mov	r2, r0
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	490a      	ldr	r1, [pc, #40]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	5ccb      	ldrb	r3, [r1, r3]
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	4a09      	ldr	r2, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fa2c 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023c00 	.word	0x40023c00
 8003600:	40023800 	.word	0x40023800
 8003604:	080079d0 	.word	0x080079d0
 8003608:	20000000 	.word	0x20000000
 800360c:	20000004 	.word	0x20000004

08003610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003614:	b094      	sub	sp, #80	; 0x50
 8003616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	647b      	str	r3, [r7, #68]	; 0x44
 800361c:	2300      	movs	r3, #0
 800361e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003620:	2300      	movs	r3, #0
 8003622:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003628:	4b79      	ldr	r3, [pc, #484]	; (8003810 <HAL_RCC_GetSysClockFreq+0x200>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b08      	cmp	r3, #8
 8003632:	d00d      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x40>
 8003634:	2b08      	cmp	r3, #8
 8003636:	f200 80e1 	bhi.w	80037fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x34>
 800363e:	2b04      	cmp	r3, #4
 8003640:	d003      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0x3a>
 8003642:	e0db      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003644:	4b73      	ldr	r3, [pc, #460]	; (8003814 <HAL_RCC_GetSysClockFreq+0x204>)
 8003646:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003648:	e0db      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364a:	4b73      	ldr	r3, [pc, #460]	; (8003818 <HAL_RCC_GetSysClockFreq+0x208>)
 800364c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800364e:	e0d8      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003650:	4b6f      	ldr	r3, [pc, #444]	; (8003810 <HAL_RCC_GetSysClockFreq+0x200>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003658:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365a:	4b6d      	ldr	r3, [pc, #436]	; (8003810 <HAL_RCC_GetSysClockFreq+0x200>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d063      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003666:	4b6a      	ldr	r3, [pc, #424]	; (8003810 <HAL_RCC_GetSysClockFreq+0x200>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	099b      	lsrs	r3, r3, #6
 800366c:	2200      	movs	r2, #0
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003670:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
 800367a:	2300      	movs	r3, #0
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
 800367e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003682:	4622      	mov	r2, r4
 8003684:	462b      	mov	r3, r5
 8003686:	f04f 0000 	mov.w	r0, #0
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	0159      	lsls	r1, r3, #5
 8003690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003694:	0150      	lsls	r0, r2, #5
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4621      	mov	r1, r4
 800369c:	1a51      	subs	r1, r2, r1
 800369e:	6139      	str	r1, [r7, #16]
 80036a0:	4629      	mov	r1, r5
 80036a2:	eb63 0301 	sbc.w	r3, r3, r1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036b4:	4659      	mov	r1, fp
 80036b6:	018b      	lsls	r3, r1, #6
 80036b8:	4651      	mov	r1, sl
 80036ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036be:	4651      	mov	r1, sl
 80036c0:	018a      	lsls	r2, r1, #6
 80036c2:	4651      	mov	r1, sl
 80036c4:	ebb2 0801 	subs.w	r8, r2, r1
 80036c8:	4659      	mov	r1, fp
 80036ca:	eb63 0901 	sbc.w	r9, r3, r1
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e2:	4690      	mov	r8, r2
 80036e4:	4699      	mov	r9, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	eb18 0303 	adds.w	r3, r8, r3
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	462b      	mov	r3, r5
 80036f0:	eb49 0303 	adc.w	r3, r9, r3
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003702:	4629      	mov	r1, r5
 8003704:	024b      	lsls	r3, r1, #9
 8003706:	4621      	mov	r1, r4
 8003708:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800370c:	4621      	mov	r1, r4
 800370e:	024a      	lsls	r2, r1, #9
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003716:	2200      	movs	r2, #0
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
 800371a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800371c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003720:	f7fd fa42 	bl	8000ba8 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4613      	mov	r3, r2
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800372c:	e058      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372e:	4b38      	ldr	r3, [pc, #224]	; (8003810 <HAL_RCC_GetSysClockFreq+0x200>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	2200      	movs	r2, #0
 8003736:	4618      	mov	r0, r3
 8003738:	4611      	mov	r1, r2
 800373a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	f04f 0000 	mov.w	r0, #0
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	0159      	lsls	r1, r3, #5
 8003756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800375a:	0150      	lsls	r0, r2, #5
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4641      	mov	r1, r8
 8003762:	ebb2 0a01 	subs.w	sl, r2, r1
 8003766:	4649      	mov	r1, r9
 8003768:	eb63 0b01 	sbc.w	fp, r3, r1
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800377c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003780:	ebb2 040a 	subs.w	r4, r2, sl
 8003784:	eb63 050b 	sbc.w	r5, r3, fp
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	00eb      	lsls	r3, r5, #3
 8003792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003796:	00e2      	lsls	r2, r4, #3
 8003798:	4614      	mov	r4, r2
 800379a:	461d      	mov	r5, r3
 800379c:	4643      	mov	r3, r8
 800379e:	18e3      	adds	r3, r4, r3
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	464b      	mov	r3, r9
 80037a4:	eb45 0303 	adc.w	r3, r5, r3
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037b6:	4629      	mov	r1, r5
 80037b8:	028b      	lsls	r3, r1, #10
 80037ba:	4621      	mov	r1, r4
 80037bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037c0:	4621      	mov	r1, r4
 80037c2:	028a      	lsls	r2, r1, #10
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ca:	2200      	movs	r2, #0
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	61fa      	str	r2, [r7, #28]
 80037d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d4:	f7fd f9e8 	bl	8000ba8 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4613      	mov	r3, r2
 80037de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	3301      	adds	r3, #1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037fa:	e002      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_RCC_GetSysClockFreq+0x204>)
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003804:	4618      	mov	r0, r3
 8003806:	3750      	adds	r7, #80	; 0x50
 8003808:	46bd      	mov	sp, r7
 800380a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800
 8003814:	00f42400 	.word	0x00f42400
 8003818:	007a1200 	.word	0x007a1200

0800381c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_RCC_GetHCLKFreq+0x14>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000000 	.word	0x20000000

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003838:	f7ff fff0 	bl	800381c <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0a9b      	lsrs	r3, r3, #10
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	080079e0 	.word	0x080079e0

0800385c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003860:	f7ff ffdc 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003864:	4602      	mov	r2, r0
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	0b5b      	lsrs	r3, r3, #13
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	4903      	ldr	r1, [pc, #12]	; (8003880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003878:	4618      	mov	r0, r3
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	080079e0 	.word	0x080079e0

08003884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e03f      	b.n	8003916 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd ff04 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f829 	bl	8003920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b0c0      	sub	sp, #256	; 0x100
 8003926:	af00      	add	r7, sp, #0
 8003928:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	68d9      	ldr	r1, [r3, #12]
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	ea40 0301 	orr.w	r3, r0, r1
 8003948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	431a      	orrs	r2, r3
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003978:	f021 010c 	bic.w	r1, r1, #12
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003986:	430b      	orrs	r3, r1
 8003988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	6999      	ldr	r1, [r3, #24]
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	ea40 0301 	orr.w	r3, r0, r1
 80039a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b8f      	ldr	r3, [pc, #572]	; (8003bec <UART_SetConfig+0x2cc>)
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d005      	beq.n	80039c0 <UART_SetConfig+0xa0>
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b8d      	ldr	r3, [pc, #564]	; (8003bf0 <UART_SetConfig+0x2d0>)
 80039bc:	429a      	cmp	r2, r3
 80039be:	d104      	bne.n	80039ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7ff ff4c 	bl	800385c <HAL_RCC_GetPCLK2Freq>
 80039c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039c8:	e003      	b.n	80039d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ca:	f7ff ff33 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 80039ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039dc:	f040 810c 	bne.w	8003bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039f2:	4622      	mov	r2, r4
 80039f4:	462b      	mov	r3, r5
 80039f6:	1891      	adds	r1, r2, r2
 80039f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80039fa:	415b      	adcs	r3, r3
 80039fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a02:	4621      	mov	r1, r4
 8003a04:	eb12 0801 	adds.w	r8, r2, r1
 8003a08:	4629      	mov	r1, r5
 8003a0a:	eb43 0901 	adc.w	r9, r3, r1
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a22:	4690      	mov	r8, r2
 8003a24:	4699      	mov	r9, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	eb18 0303 	adds.w	r3, r8, r3
 8003a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a30:	462b      	mov	r3, r5
 8003a32:	eb49 0303 	adc.w	r3, r9, r3
 8003a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a4e:	460b      	mov	r3, r1
 8003a50:	18db      	adds	r3, r3, r3
 8003a52:	653b      	str	r3, [r7, #80]	; 0x50
 8003a54:	4613      	mov	r3, r2
 8003a56:	eb42 0303 	adc.w	r3, r2, r3
 8003a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a64:	f7fd f8a0 	bl	8000ba8 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	011c      	lsls	r4, r3, #4
 8003a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a90:	415b      	adcs	r3, r3
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a98:	4641      	mov	r1, r8
 8003a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab8:	4692      	mov	sl, r2
 8003aba:	469b      	mov	fp, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	eb1a 0303 	adds.w	r3, sl, r3
 8003ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8003acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003adc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	18db      	adds	r3, r3, r3
 8003ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8003aea:	4613      	mov	r3, r2
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
 8003af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003afa:	f7fd f855 	bl	8000ba8 <__aeabi_uldivmod>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4611      	mov	r1, r2
 8003b04:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003b06:	fba3 2301 	umull	r2, r3, r3, r1
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2264      	movs	r2, #100	; 0x64
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	1acb      	subs	r3, r1, r3
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b28:	441c      	add	r4, r3
 8003b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	1891      	adds	r1, r2, r2
 8003b42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b44:	415b      	adcs	r3, r3
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	1851      	adds	r1, r2, r1
 8003b50:	6339      	str	r1, [r7, #48]	; 0x30
 8003b52:	4649      	mov	r1, r9
 8003b54:	414b      	adcs	r3, r1
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b64:	4659      	mov	r1, fp
 8003b66:	00cb      	lsls	r3, r1, #3
 8003b68:	4651      	mov	r1, sl
 8003b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6e:	4651      	mov	r1, sl
 8003b70:	00ca      	lsls	r2, r1, #3
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	4642      	mov	r2, r8
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b80:	464b      	mov	r3, r9
 8003b82:	460a      	mov	r2, r1
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	18db      	adds	r3, r3, r3
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	eb42 0303 	adc.w	r3, r2, r3
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bb6:	f7fc fff7 	bl	8000ba8 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2164      	movs	r1, #100	; 0x64
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	3332      	adds	r3, #50	; 0x32
 8003bd2:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <UART_SetConfig+0x2d4>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 0207 	and.w	r2, r3, #7
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4422      	add	r2, r4
 8003be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be8:	e105      	b.n	8003df6 <UART_SetConfig+0x4d6>
 8003bea:	bf00      	nop
 8003bec:	40011000 	.word	0x40011000
 8003bf0:	40011400 	.word	0x40011400
 8003bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c0a:	4642      	mov	r2, r8
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	1891      	adds	r1, r2, r2
 8003c10:	6239      	str	r1, [r7, #32]
 8003c12:	415b      	adcs	r3, r3
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c1a:	4641      	mov	r1, r8
 8003c1c:	1854      	adds	r4, r2, r1
 8003c1e:	4649      	mov	r1, r9
 8003c20:	eb43 0501 	adc.w	r5, r3, r1
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	00eb      	lsls	r3, r5, #3
 8003c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c32:	00e2      	lsls	r2, r4, #3
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	18e3      	adds	r3, r4, r3
 8003c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c40:	464b      	mov	r3, r9
 8003c42:	eb45 0303 	adc.w	r3, r5, r3
 8003c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c66:	4629      	mov	r1, r5
 8003c68:	008b      	lsls	r3, r1, #2
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c70:	4621      	mov	r1, r4
 8003c72:	008a      	lsls	r2, r1, #2
 8003c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c78:	f7fc ff96 	bl	8000ba8 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b60      	ldr	r3, [pc, #384]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	011c      	lsls	r4, r3, #4
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	61b9      	str	r1, [r7, #24]
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cac:	4641      	mov	r1, r8
 8003cae:	1851      	adds	r1, r2, r1
 8003cb0:	6139      	str	r1, [r7, #16]
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	414b      	adcs	r3, r1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	00cb      	lsls	r3, r1, #3
 8003cc8:	4651      	mov	r1, sl
 8003cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cce:	4651      	mov	r1, sl
 8003cd0:	00ca      	lsls	r2, r1, #3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4642      	mov	r2, r8
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d04:	4649      	mov	r1, r9
 8003d06:	008b      	lsls	r3, r1, #2
 8003d08:	4641      	mov	r1, r8
 8003d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d0e:	4641      	mov	r1, r8
 8003d10:	008a      	lsls	r2, r1, #2
 8003d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d16:	f7fc ff47 	bl	8000ba8 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003d20:	fba3 1302 	umull	r1, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	2164      	movs	r1, #100	; 0x64
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	3332      	adds	r3, #50	; 0x32
 8003d32:	4a34      	ldr	r2, [pc, #208]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d3e:	441c      	add	r4, r3
 8003d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d44:	2200      	movs	r2, #0
 8003d46:	673b      	str	r3, [r7, #112]	; 0x70
 8003d48:	677a      	str	r2, [r7, #116]	; 0x74
 8003d4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d4e:	4642      	mov	r2, r8
 8003d50:	464b      	mov	r3, r9
 8003d52:	1891      	adds	r1, r2, r2
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	415b      	adcs	r3, r3
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d5e:	4641      	mov	r1, r8
 8003d60:	1851      	adds	r1, r2, r1
 8003d62:	6039      	str	r1, [r7, #0]
 8003d64:	4649      	mov	r1, r9
 8003d66:	414b      	adcs	r3, r1
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d76:	4659      	mov	r1, fp
 8003d78:	00cb      	lsls	r3, r1, #3
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d80:	4651      	mov	r1, sl
 8003d82:	00ca      	lsls	r2, r1, #3
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4642      	mov	r2, r8
 8003d8c:	189b      	adds	r3, r3, r2
 8003d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d90:	464b      	mov	r3, r9
 8003d92:	460a      	mov	r2, r1
 8003d94:	eb42 0303 	adc.w	r3, r2, r3
 8003d98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	663b      	str	r3, [r7, #96]	; 0x60
 8003da4:	667a      	str	r2, [r7, #100]	; 0x64
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003db2:	4649      	mov	r1, r9
 8003db4:	008b      	lsls	r3, r1, #2
 8003db6:	4641      	mov	r1, r8
 8003db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	008a      	lsls	r2, r1, #2
 8003dc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dc4:	f7fc fef0 	bl	8000ba8 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003dce:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2164      	movs	r1, #100	; 0x64
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	3332      	adds	r3, #50	; 0x32
 8003de0:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <UART_SetConfig+0x4e4>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4422      	add	r2, r4
 8003df4:	609a      	str	r2, [r3, #8]
}
 8003df6:	bf00      	nop
 8003df8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e02:	bf00      	nop
 8003e04:	51eb851f 	.word	0x51eb851f

08003e08 <arm_rfft_32_fast_init_f32>:
 8003e08:	b178      	cbz	r0, 8003e2a <arm_rfft_32_fast_init_f32+0x22>
 8003e0a:	b430      	push	{r4, r5}
 8003e0c:	4908      	ldr	r1, [pc, #32]	; (8003e30 <arm_rfft_32_fast_init_f32+0x28>)
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <arm_rfft_32_fast_init_f32+0x2c>)
 8003e10:	2310      	movs	r3, #16
 8003e12:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003e16:	8003      	strh	r3, [r0, #0]
 8003e18:	2520      	movs	r5, #32
 8003e1a:	2414      	movs	r4, #20
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <arm_rfft_32_fast_init_f32+0x30>)
 8003e1e:	8205      	strh	r5, [r0, #16]
 8003e20:	8184      	strh	r4, [r0, #12]
 8003e22:	6143      	str	r3, [r0, #20]
 8003e24:	bc30      	pop	{r4, r5}
 8003e26:	2000      	movs	r0, #0
 8003e28:	4770      	bx	lr
 8003e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2e:	4770      	bx	lr
 8003e30:	080089a0 	.word	0x080089a0
 8003e34:	0800d2d8 	.word	0x0800d2d8
 8003e38:	08016058 	.word	0x08016058

08003e3c <arm_rfft_64_fast_init_f32>:
 8003e3c:	b178      	cbz	r0, 8003e5e <arm_rfft_64_fast_init_f32+0x22>
 8003e3e:	b430      	push	{r4, r5}
 8003e40:	4908      	ldr	r1, [pc, #32]	; (8003e64 <arm_rfft_64_fast_init_f32+0x28>)
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <arm_rfft_64_fast_init_f32+0x2c>)
 8003e44:	2320      	movs	r3, #32
 8003e46:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003e4a:	8003      	strh	r3, [r0, #0]
 8003e4c:	2540      	movs	r5, #64	; 0x40
 8003e4e:	2430      	movs	r4, #48	; 0x30
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <arm_rfft_64_fast_init_f32+0x30>)
 8003e52:	8205      	strh	r5, [r0, #16]
 8003e54:	8184      	strh	r4, [r0, #12]
 8003e56:	6143      	str	r3, [r0, #20]
 8003e58:	bc30      	pop	{r4, r5}
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	4770      	bx	lr
 8003e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e62:	4770      	bx	lr
 8003e64:	0800aaf8 	.word	0x0800aaf8
 8003e68:	08011b58 	.word	0x08011b58
 8003e6c:	0801a8d8 	.word	0x0801a8d8

08003e70 <arm_rfft_256_fast_init_f32>:
 8003e70:	b180      	cbz	r0, 8003e94 <arm_rfft_256_fast_init_f32+0x24>
 8003e72:	b430      	push	{r4, r5}
 8003e74:	4909      	ldr	r1, [pc, #36]	; (8003e9c <arm_rfft_256_fast_init_f32+0x2c>)
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <arm_rfft_256_fast_init_f32+0x30>)
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003e7e:	8003      	strh	r3, [r0, #0]
 8003e80:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003e84:	24d0      	movs	r4, #208	; 0xd0
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <arm_rfft_256_fast_init_f32+0x34>)
 8003e88:	8205      	strh	r5, [r0, #16]
 8003e8a:	8184      	strh	r4, [r0, #12]
 8003e8c:	6143      	str	r3, [r0, #20]
 8003e8e:	bc30      	pop	{r4, r5}
 8003e90:	2000      	movs	r0, #0
 8003e92:	4770      	bx	lr
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	08008800 	.word	0x08008800
 8003ea0:	0800ced8 	.word	0x0800ced8
 8003ea4:	08015c58 	.word	0x08015c58

08003ea8 <arm_rfft_512_fast_init_f32>:
 8003ea8:	b190      	cbz	r0, 8003ed0 <arm_rfft_512_fast_init_f32+0x28>
 8003eaa:	b430      	push	{r4, r5}
 8003eac:	490a      	ldr	r1, [pc, #40]	; (8003ed8 <arm_rfft_512_fast_init_f32+0x30>)
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <arm_rfft_512_fast_init_f32+0x34>)
 8003eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eb4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003eb8:	8003      	strh	r3, [r0, #0]
 8003eba:	f44f 7500 	mov.w	r5, #512	; 0x200
 8003ebe:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <arm_rfft_512_fast_init_f32+0x38>)
 8003ec4:	8205      	strh	r5, [r0, #16]
 8003ec6:	8184      	strh	r4, [r0, #12]
 8003ec8:	6143      	str	r3, [r0, #20]
 8003eca:	bc30      	pop	{r4, r5}
 8003ecc:	2000      	movs	r0, #0
 8003ece:	4770      	bx	lr
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	0800a788 	.word	0x0800a788
 8003edc:	08011358 	.word	0x08011358
 8003ee0:	0801a0d8 	.word	0x0801a0d8

08003ee4 <arm_rfft_1024_fast_init_f32>:
 8003ee4:	b190      	cbz	r0, 8003f0c <arm_rfft_1024_fast_init_f32+0x28>
 8003ee6:	b430      	push	{r4, r5}
 8003ee8:	490a      	ldr	r1, [pc, #40]	; (8003f14 <arm_rfft_1024_fast_init_f32+0x30>)
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <arm_rfft_1024_fast_init_f32+0x34>)
 8003eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ef0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003ef4:	8003      	strh	r3, [r0, #0]
 8003ef6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003efa:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <arm_rfft_1024_fast_init_f32+0x38>)
 8003f00:	8205      	strh	r5, [r0, #16]
 8003f02:	8184      	strh	r4, [r0, #12]
 8003f04:	6143      	str	r3, [r0, #20]
 8003f06:	bc30      	pop	{r4, r5}
 8003f08:	2000      	movs	r0, #0
 8003f0a:	4770      	bx	lr
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	0800ab58 	.word	0x0800ab58
 8003f18:	08011c58 	.word	0x08011c58
 8003f1c:	08012c58 	.word	0x08012c58

08003f20 <arm_rfft_2048_fast_init_f32>:
 8003f20:	b190      	cbz	r0, 8003f48 <arm_rfft_2048_fast_init_f32+0x28>
 8003f22:	b430      	push	{r4, r5}
 8003f24:	490a      	ldr	r1, [pc, #40]	; (8003f50 <arm_rfft_2048_fast_init_f32+0x30>)
 8003f26:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <arm_rfft_2048_fast_init_f32+0x34>)
 8003f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f2c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003f30:	8003      	strh	r3, [r0, #0]
 8003f32:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003f36:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <arm_rfft_2048_fast_init_f32+0x38>)
 8003f3c:	8205      	strh	r5, [r0, #16]
 8003f3e:	8184      	strh	r4, [r0, #12]
 8003f40:	6143      	str	r3, [r0, #20]
 8003f42:	bc30      	pop	{r4, r5}
 8003f44:	2000      	movs	r0, #0
 8003f46:	4770      	bx	lr
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	080079f0 	.word	0x080079f0
 8003f54:	0800aed8 	.word	0x0800aed8
 8003f58:	08013c58 	.word	0x08013c58

08003f5c <arm_rfft_4096_fast_init_f32>:
 8003f5c:	b190      	cbz	r0, 8003f84 <arm_rfft_4096_fast_init_f32+0x28>
 8003f5e:	b430      	push	{r4, r5}
 8003f60:	490a      	ldr	r1, [pc, #40]	; (8003f8c <arm_rfft_4096_fast_init_f32+0x30>)
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <arm_rfft_4096_fast_init_f32+0x34>)
 8003f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f68:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003f6c:	8003      	strh	r3, [r0, #0]
 8003f6e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8003f72:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <arm_rfft_4096_fast_init_f32+0x38>)
 8003f78:	8205      	strh	r5, [r0, #16]
 8003f7a:	8184      	strh	r4, [r0, #12]
 8003f7c:	6143      	str	r3, [r0, #20]
 8003f7e:	bc30      	pop	{r4, r5}
 8003f80:	2000      	movs	r0, #0
 8003f82:	4770      	bx	lr
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	080089c8 	.word	0x080089c8
 8003f90:	0800d358 	.word	0x0800d358
 8003f94:	080160d8 	.word	0x080160d8

08003f98 <arm_rfft_fast_init_f32>:
 8003f98:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003f9c:	d01f      	beq.n	8003fde <arm_rfft_fast_init_f32+0x46>
 8003f9e:	d90b      	bls.n	8003fb8 <arm_rfft_fast_init_f32+0x20>
 8003fa0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003fa4:	d019      	beq.n	8003fda <arm_rfft_fast_init_f32+0x42>
 8003fa6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003faa:	d012      	beq.n	8003fd2 <arm_rfft_fast_init_f32+0x3a>
 8003fac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003fb0:	d00d      	beq.n	8003fce <arm_rfft_fast_init_f32+0x36>
 8003fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb6:	4770      	bx	lr
 8003fb8:	2940      	cmp	r1, #64	; 0x40
 8003fba:	d00c      	beq.n	8003fd6 <arm_rfft_fast_init_f32+0x3e>
 8003fbc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003fc0:	d003      	beq.n	8003fca <arm_rfft_fast_init_f32+0x32>
 8003fc2:	2920      	cmp	r1, #32
 8003fc4:	d1f5      	bne.n	8003fb2 <arm_rfft_fast_init_f32+0x1a>
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <arm_rfft_fast_init_f32+0x4c>)
 8003fc8:	4718      	bx	r3
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <arm_rfft_fast_init_f32+0x50>)
 8003fcc:	4718      	bx	r3
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <arm_rfft_fast_init_f32+0x54>)
 8003fd0:	4718      	bx	r3
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <arm_rfft_fast_init_f32+0x58>)
 8003fd4:	4718      	bx	r3
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <arm_rfft_fast_init_f32+0x5c>)
 8003fd8:	e7f6      	b.n	8003fc8 <arm_rfft_fast_init_f32+0x30>
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <arm_rfft_fast_init_f32+0x60>)
 8003fdc:	e7f4      	b.n	8003fc8 <arm_rfft_fast_init_f32+0x30>
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <arm_rfft_fast_init_f32+0x64>)
 8003fe0:	e7f2      	b.n	8003fc8 <arm_rfft_fast_init_f32+0x30>
 8003fe2:	bf00      	nop
 8003fe4:	08003e09 	.word	0x08003e09
 8003fe8:	08003e71 	.word	0x08003e71
 8003fec:	08003ee5 	.word	0x08003ee5
 8003ff0:	08003f5d 	.word	0x08003f5d
 8003ff4:	08003e3d 	.word	0x08003e3d
 8003ff8:	08003f21 	.word	0x08003f21
 8003ffc:	08003ea9 	.word	0x08003ea9

08004000 <stage_rfft_f32>:
 8004000:	b410      	push	{r4}
 8004002:	edd1 7a00 	vldr	s15, [r1]
 8004006:	ed91 7a01 	vldr	s14, [r1, #4]
 800400a:	8804      	ldrh	r4, [r0, #0]
 800400c:	6940      	ldr	r0, [r0, #20]
 800400e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004012:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004016:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800401a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800401e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004022:	3c01      	subs	r4, #1
 8004024:	ee26 7a84 	vmul.f32	s14, s13, s8
 8004028:	ee67 7a84 	vmul.f32	s15, s15, s8
 800402c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8004030:	ed82 7a00 	vstr	s14, [r2]
 8004034:	edc2 7a01 	vstr	s15, [r2, #4]
 8004038:	3010      	adds	r0, #16
 800403a:	3210      	adds	r2, #16
 800403c:	3b08      	subs	r3, #8
 800403e:	3110      	adds	r1, #16
 8004040:	ed11 5a02 	vldr	s10, [r1, #-8]
 8004044:	ed93 7a02 	vldr	s14, [r3, #8]
 8004048:	ed50 6a02 	vldr	s13, [r0, #-8]
 800404c:	edd3 4a03 	vldr	s9, [r3, #12]
 8004050:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004054:	ed10 6a01 	vldr	s12, [r0, #-4]
 8004058:	ee77 5a45 	vsub.f32	s11, s14, s10
 800405c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004060:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8004064:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8004068:	ee66 5a25 	vmul.f32	s11, s12, s11
 800406c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004070:	ee37 7a23 	vadd.f32	s14, s14, s7
 8004074:	ee66 6a85 	vmul.f32	s13, s13, s10
 8004078:	ee26 6a05 	vmul.f32	s12, s12, s10
 800407c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004080:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004084:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004088:	ee27 7a04 	vmul.f32	s14, s14, s8
 800408c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004090:	3c01      	subs	r4, #1
 8004092:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004096:	ed42 7a01 	vstr	s15, [r2, #-4]
 800409a:	f1a3 0308 	sub.w	r3, r3, #8
 800409e:	f101 0108 	add.w	r1, r1, #8
 80040a2:	f100 0008 	add.w	r0, r0, #8
 80040a6:	f102 0208 	add.w	r2, r2, #8
 80040aa:	d1c9      	bne.n	8004040 <stage_rfft_f32+0x40>
 80040ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop

080040b4 <merge_rfft_f32>:
 80040b4:	b410      	push	{r4}
 80040b6:	edd1 7a00 	vldr	s15, [r1]
 80040ba:	edd1 6a01 	vldr	s13, [r1, #4]
 80040be:	8804      	ldrh	r4, [r0, #0]
 80040c0:	6940      	ldr	r0, [r0, #20]
 80040c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80040c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80040ca:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80040ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 80040d2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80040d6:	3c01      	subs	r4, #1
 80040d8:	ed82 7a00 	vstr	s14, [r2]
 80040dc:	edc2 7a01 	vstr	s15, [r2, #4]
 80040e0:	b3dc      	cbz	r4, 800415a <merge_rfft_f32+0xa6>
 80040e2:	00e3      	lsls	r3, r4, #3
 80040e4:	3b08      	subs	r3, #8
 80040e6:	440b      	add	r3, r1
 80040e8:	3010      	adds	r0, #16
 80040ea:	3210      	adds	r2, #16
 80040ec:	3110      	adds	r1, #16
 80040ee:	ed11 5a02 	vldr	s10, [r1, #-8]
 80040f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80040f6:	ed50 6a02 	vldr	s13, [r0, #-8]
 80040fa:	edd3 4a03 	vldr	s9, [r3, #12]
 80040fe:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004102:	ed10 6a01 	vldr	s12, [r0, #-4]
 8004106:	ee75 5a47 	vsub.f32	s11, s10, s14
 800410a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800410e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8004112:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8004116:	ee66 5a25 	vmul.f32	s11, s12, s11
 800411a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800411e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8004122:	ee66 6a85 	vmul.f32	s13, s13, s10
 8004126:	ee26 6a05 	vmul.f32	s12, s12, s10
 800412a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800412e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8004132:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004136:	ee27 7a04 	vmul.f32	s14, s14, s8
 800413a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800413e:	3c01      	subs	r4, #1
 8004140:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004144:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004148:	f1a3 0308 	sub.w	r3, r3, #8
 800414c:	f101 0108 	add.w	r1, r1, #8
 8004150:	f100 0008 	add.w	r0, r0, #8
 8004154:	f102 0208 	add.w	r2, r2, #8
 8004158:	d1c9      	bne.n	80040ee <merge_rfft_f32+0x3a>
 800415a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800415e:	4770      	bx	lr

08004160 <arm_rfft_fast_f32>:
 8004160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004164:	8a05      	ldrh	r5, [r0, #16]
 8004166:	086d      	lsrs	r5, r5, #1
 8004168:	8005      	strh	r5, [r0, #0]
 800416a:	4604      	mov	r4, r0
 800416c:	4616      	mov	r6, r2
 800416e:	461d      	mov	r5, r3
 8004170:	b14b      	cbz	r3, 8004186 <arm_rfft_fast_f32+0x26>
 8004172:	f7ff ff9f 	bl	80040b4 <merge_rfft_f32>
 8004176:	462a      	mov	r2, r5
 8004178:	4631      	mov	r1, r6
 800417a:	4620      	mov	r0, r4
 800417c:	2301      	movs	r3, #1
 800417e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004182:	f000 bb33 	b.w	80047ec <arm_cfft_f32>
 8004186:	460f      	mov	r7, r1
 8004188:	461a      	mov	r2, r3
 800418a:	2301      	movs	r3, #1
 800418c:	f000 fb2e 	bl	80047ec <arm_cfft_f32>
 8004190:	4632      	mov	r2, r6
 8004192:	4639      	mov	r1, r7
 8004194:	4620      	mov	r0, r4
 8004196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800419a:	f7ff bf31 	b.w	8004000 <stage_rfft_f32>
 800419e:	bf00      	nop

080041a0 <arm_cfft_radix8by2_f32>:
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	ed2d 8b08 	vpush	{d8-d11}
 80041a8:	4607      	mov	r7, r0
 80041aa:	4608      	mov	r0, r1
 80041ac:	f8b7 c000 	ldrh.w	ip, [r7]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80041b6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80041ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80041be:	f000 80b0 	beq.w	8004322 <arm_cfft_radix8by2_f32+0x182>
 80041c2:	008c      	lsls	r4, r1, #2
 80041c4:	3410      	adds	r4, #16
 80041c6:	f100 0310 	add.w	r3, r0, #16
 80041ca:	1906      	adds	r6, r0, r4
 80041cc:	3210      	adds	r2, #16
 80041ce:	4444      	add	r4, r8
 80041d0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80041d4:	f108 0510 	add.w	r5, r8, #16
 80041d8:	ed15 2a04 	vldr	s4, [r5, #-16]
 80041dc:	ed55 2a03 	vldr	s5, [r5, #-12]
 80041e0:	ed54 4a04 	vldr	s9, [r4, #-16]
 80041e4:	ed14 4a03 	vldr	s8, [r4, #-12]
 80041e8:	ed14 6a02 	vldr	s12, [r4, #-8]
 80041ec:	ed54 5a01 	vldr	s11, [r4, #-4]
 80041f0:	ed53 3a04 	vldr	s7, [r3, #-16]
 80041f4:	ed15 0a02 	vldr	s0, [r5, #-8]
 80041f8:	ed55 0a01 	vldr	s1, [r5, #-4]
 80041fc:	ed56 6a04 	vldr	s13, [r6, #-16]
 8004200:	ed16 3a03 	vldr	s6, [r6, #-12]
 8004204:	ed13 7a03 	vldr	s14, [r3, #-12]
 8004208:	ed13 5a02 	vldr	s10, [r3, #-8]
 800420c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004210:	ed16 1a02 	vldr	s2, [r6, #-8]
 8004214:	ed56 1a01 	vldr	s3, [r6, #-4]
 8004218:	ee73 ba82 	vadd.f32	s23, s7, s4
 800421c:	ee37 ba22 	vadd.f32	s22, s14, s5
 8004220:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8004224:	ee33 9a04 	vadd.f32	s18, s6, s8
 8004228:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800422c:	ee75 aa00 	vadd.f32	s21, s10, s0
 8004230:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8004234:	ee71 8a06 	vadd.f32	s17, s2, s12
 8004238:	ed43 ba04 	vstr	s23, [r3, #-16]
 800423c:	ed03 ba03 	vstr	s22, [r3, #-12]
 8004240:	ed43 aa02 	vstr	s21, [r3, #-8]
 8004244:	ed03 aa01 	vstr	s20, [r3, #-4]
 8004248:	ed06 8a01 	vstr	s16, [r6, #-4]
 800424c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004250:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004254:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004258:	ee37 7a62 	vsub.f32	s14, s14, s5
 800425c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8004260:	ee34 4a43 	vsub.f32	s8, s8, s6
 8004264:	ed52 6a03 	vldr	s13, [r2, #-12]
 8004268:	ed12 3a04 	vldr	s6, [r2, #-16]
 800426c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8004270:	ee27 8a26 	vmul.f32	s16, s14, s13
 8004274:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8004278:	ee23 2a83 	vmul.f32	s4, s7, s6
 800427c:	ee64 4a83 	vmul.f32	s9, s9, s6
 8004280:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8004284:	ee27 7a03 	vmul.f32	s14, s14, s6
 8004288:	ee64 6a26 	vmul.f32	s13, s8, s13
 800428c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8004290:	ee37 7a63 	vsub.f32	s14, s14, s7
 8004294:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004298:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800429c:	ee32 3a08 	vadd.f32	s6, s4, s16
 80042a0:	ed05 7a03 	vstr	s14, [r5, #-12]
 80042a4:	ed05 3a04 	vstr	s6, [r5, #-16]
 80042a8:	ed04 4a04 	vstr	s8, [r4, #-16]
 80042ac:	ed44 6a03 	vstr	s13, [r4, #-12]
 80042b0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80042b4:	ee76 6a41 	vsub.f32	s13, s12, s2
 80042b8:	ee35 5a40 	vsub.f32	s10, s10, s0
 80042bc:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80042c0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80042c4:	ed52 5a02 	vldr	s11, [r2, #-8]
 80042c8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80042cc:	ee66 4a87 	vmul.f32	s9, s13, s14
 80042d0:	ee25 4a25 	vmul.f32	s8, s10, s11
 80042d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80042d8:	ee25 5a07 	vmul.f32	s10, s10, s14
 80042dc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80042e0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80042e4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80042e8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80042ec:	ee74 5a23 	vadd.f32	s11, s8, s7
 80042f0:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80042f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80042f8:	3310      	adds	r3, #16
 80042fa:	4563      	cmp	r3, ip
 80042fc:	ed45 5a02 	vstr	s11, [r5, #-8]
 8004300:	f106 0610 	add.w	r6, r6, #16
 8004304:	ed45 7a01 	vstr	s15, [r5, #-4]
 8004308:	f102 0210 	add.w	r2, r2, #16
 800430c:	ed04 6a02 	vstr	s12, [r4, #-8]
 8004310:	ed04 7a01 	vstr	s14, [r4, #-4]
 8004314:	f105 0510 	add.w	r5, r5, #16
 8004318:	f104 0410 	add.w	r4, r4, #16
 800431c:	f47f af5c 	bne.w	80041d8 <arm_cfft_radix8by2_f32+0x38>
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	b28c      	uxth	r4, r1
 8004324:	4621      	mov	r1, r4
 8004326:	2302      	movs	r3, #2
 8004328:	f000 faf8 	bl	800491c <arm_radix8_butterfly_f32>
 800432c:	ecbd 8b08 	vpop	{d8-d11}
 8004330:	4621      	mov	r1, r4
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4640      	mov	r0, r8
 8004336:	2302      	movs	r3, #2
 8004338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800433c:	f000 baee 	b.w	800491c <arm_radix8_butterfly_f32>

08004340 <arm_cfft_radix8by4_f32>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	ed2d 8b0a 	vpush	{d8-d12}
 8004348:	b08d      	sub	sp, #52	; 0x34
 800434a:	460d      	mov	r5, r1
 800434c:	910b      	str	r1, [sp, #44]	; 0x2c
 800434e:	8801      	ldrh	r1, [r0, #0]
 8004350:	6842      	ldr	r2, [r0, #4]
 8004352:	900a      	str	r0, [sp, #40]	; 0x28
 8004354:	0849      	lsrs	r1, r1, #1
 8004356:	008b      	lsls	r3, r1, #2
 8004358:	18ee      	adds	r6, r5, r3
 800435a:	18f0      	adds	r0, r6, r3
 800435c:	edd0 5a00 	vldr	s11, [r0]
 8004360:	edd5 7a00 	vldr	s15, [r5]
 8004364:	ed96 7a00 	vldr	s14, [r6]
 8004368:	edd0 3a01 	vldr	s7, [r0, #4]
 800436c:	ed96 4a01 	vldr	s8, [r6, #4]
 8004370:	ed95 5a01 	vldr	s10, [r5, #4]
 8004374:	9008      	str	r0, [sp, #32]
 8004376:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800437a:	18c7      	adds	r7, r0, r3
 800437c:	edd7 4a00 	vldr	s9, [r7]
 8004380:	ed97 3a01 	vldr	s6, [r7, #4]
 8004384:	9701      	str	r7, [sp, #4]
 8004386:	ee77 6a06 	vadd.f32	s13, s14, s12
 800438a:	462c      	mov	r4, r5
 800438c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004390:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004394:	ee16 ca90 	vmov	ip, s13
 8004398:	f844 cb08 	str.w	ip, [r4], #8
 800439c:	ee75 6a23 	vadd.f32	s13, s10, s7
 80043a0:	edd6 5a01 	vldr	s11, [r6, #4]
 80043a4:	edd7 2a01 	vldr	s5, [r7, #4]
 80043a8:	9404      	str	r4, [sp, #16]
 80043aa:	ee35 5a63 	vsub.f32	s10, s10, s7
 80043ae:	ee74 3a27 	vadd.f32	s7, s8, s15
 80043b2:	ee36 6a47 	vsub.f32	s12, s12, s14
 80043b6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80043ba:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80043be:	0849      	lsrs	r1, r1, #1
 80043c0:	f102 0e08 	add.w	lr, r2, #8
 80043c4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80043c8:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80043cc:	9109      	str	r1, [sp, #36]	; 0x24
 80043ce:	ee35 4a47 	vsub.f32	s8, s10, s14
 80043d2:	f1a1 0902 	sub.w	r9, r1, #2
 80043d6:	f8cd e00c 	str.w	lr, [sp, #12]
 80043da:	4631      	mov	r1, r6
 80043dc:	ee13 ea90 	vmov	lr, s7
 80043e0:	ee36 6a64 	vsub.f32	s12, s12, s9
 80043e4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80043e8:	4604      	mov	r4, r0
 80043ea:	edc5 5a01 	vstr	s11, [r5, #4]
 80043ee:	ee37 7a05 	vadd.f32	s14, s14, s10
 80043f2:	f841 eb08 	str.w	lr, [r1], #8
 80043f6:	ee34 5a24 	vadd.f32	s10, s8, s9
 80043fa:	ee16 ea10 	vmov	lr, s12
 80043fe:	ed86 5a01 	vstr	s10, [r6, #4]
 8004402:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004406:	f844 eb08 	str.w	lr, [r4], #8
 800440a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800440e:	edc0 6a01 	vstr	s13, [r0, #4]
 8004412:	9405      	str	r4, [sp, #20]
 8004414:	4604      	mov	r4, r0
 8004416:	ee17 0a90 	vmov	r0, s15
 800441a:	9106      	str	r1, [sp, #24]
 800441c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004420:	f102 0110 	add.w	r1, r2, #16
 8004424:	46bc      	mov	ip, r7
 8004426:	9100      	str	r1, [sp, #0]
 8004428:	f847 0b08 	str.w	r0, [r7], #8
 800442c:	f102 0118 	add.w	r1, r2, #24
 8004430:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8004434:	9102      	str	r1, [sp, #8]
 8004436:	ed8c 7a01 	vstr	s14, [ip, #4]
 800443a:	9007      	str	r0, [sp, #28]
 800443c:	f000 8134 	beq.w	80046a8 <arm_cfft_radix8by4_f32+0x368>
 8004440:	f102 0920 	add.w	r9, r2, #32
 8004444:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8004448:	9a01      	ldr	r2, [sp, #4]
 800444a:	f8dd a000 	ldr.w	sl, [sp]
 800444e:	3b0c      	subs	r3, #12
 8004450:	4683      	mov	fp, r0
 8004452:	4463      	add	r3, ip
 8004454:	f105 0e10 	add.w	lr, r5, #16
 8004458:	f1a4 010c 	sub.w	r1, r4, #12
 800445c:	f104 0510 	add.w	r5, r4, #16
 8004460:	f1a6 0c0c 	sub.w	ip, r6, #12
 8004464:	f1a2 040c 	sub.w	r4, r2, #12
 8004468:	f106 0010 	add.w	r0, r6, #16
 800446c:	3210      	adds	r2, #16
 800446e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8004472:	ed55 5a02 	vldr	s11, [r5, #-8]
 8004476:	ed50 7a02 	vldr	s15, [r0, #-8]
 800447a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800447e:	ed55 6a01 	vldr	s13, [r5, #-4]
 8004482:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8004486:	ed12 1a01 	vldr	s2, [r2, #-4]
 800448a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800448e:	ee35 4a25 	vadd.f32	s8, s10, s11
 8004492:	ee30 6a26 	vadd.f32	s12, s0, s13
 8004496:	ee37 7a84 	vadd.f32	s14, s15, s8
 800449a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800449e:	ee37 7a21 	vadd.f32	s14, s14, s3
 80044a2:	ee75 5a65 	vsub.f32	s11, s10, s11
 80044a6:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80044aa:	ed10 7a01 	vldr	s14, [r0, #-4]
 80044ae:	ed52 6a01 	vldr	s13, [r2, #-4]
 80044b2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80044b6:	ee78 aa25 	vadd.f32	s21, s16, s11
 80044ba:	ee37 7a26 	vadd.f32	s14, s14, s13
 80044be:	ee70 3a67 	vsub.f32	s7, s0, s15
 80044c2:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80044c6:	ed94 7a02 	vldr	s14, [r4, #8]
 80044ca:	ed9c 2a02 	vldr	s4, [ip, #8]
 80044ce:	ed91 ba02 	vldr	s22, [r1, #8]
 80044d2:	edd3 9a02 	vldr	s19, [r3, #8]
 80044d6:	edd4 2a01 	vldr	s5, [r4, #4]
 80044da:	ed9c 9a01 	vldr	s18, [ip, #4]
 80044de:	ed93 5a01 	vldr	s10, [r3, #4]
 80044e2:	edd1 0a01 	vldr	s1, [r1, #4]
 80044e6:	ee72 6a07 	vadd.f32	s13, s4, s14
 80044ea:	ee32 2a47 	vsub.f32	s4, s4, s14
 80044ee:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80044f2:	ee79 4a22 	vadd.f32	s9, s18, s5
 80044f6:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80044fa:	ee79 2a62 	vsub.f32	s5, s18, s5
 80044fe:	ed8c 7a02 	vstr	s14, [ip, #8]
 8004502:	ed91 7a01 	vldr	s14, [r1, #4]
 8004506:	edd3 8a01 	vldr	s17, [r3, #4]
 800450a:	ee34 7a87 	vadd.f32	s14, s9, s14
 800450e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8004512:	ee37 7a28 	vadd.f32	s14, s14, s17
 8004516:	ee32 9a60 	vsub.f32	s18, s4, s1
 800451a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800451e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8004522:	ed1a aa02 	vldr	s20, [sl, #-8]
 8004526:	ee73 8a22 	vadd.f32	s17, s6, s5
 800452a:	ee39 9a05 	vadd.f32	s18, s18, s10
 800452e:	ee7a aac1 	vsub.f32	s21, s21, s2
 8004532:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004536:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800453a:	ee69 ba07 	vmul.f32	s23, s18, s14
 800453e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8004542:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8004546:	ee63 ca87 	vmul.f32	s25, s7, s14
 800454a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800454e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8004552:	ee68 8a87 	vmul.f32	s17, s17, s14
 8004556:	ee73 3aea 	vsub.f32	s7, s7, s21
 800455a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800455e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8004562:	ee3b aaca 	vsub.f32	s20, s23, s20
 8004566:	ee34 4a67 	vsub.f32	s8, s8, s15
 800456a:	ee76 6acb 	vsub.f32	s13, s13, s22
 800456e:	ee36 6a48 	vsub.f32	s12, s12, s16
 8004572:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8004576:	ed00 7a02 	vstr	s14, [r0, #-8]
 800457a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800457e:	edc1 8a01 	vstr	s17, [r1, #4]
 8004582:	ed81 aa02 	vstr	s20, [r1, #8]
 8004586:	ed59 3a04 	vldr	s7, [r9, #-16]
 800458a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800458e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8004592:	ed59 6a03 	vldr	s13, [r9, #-12]
 8004596:	ee34 4a61 	vsub.f32	s8, s8, s3
 800459a:	ee36 6a41 	vsub.f32	s12, s12, s2
 800459e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80045a2:	ee66 9a26 	vmul.f32	s19, s12, s13
 80045a6:	ee24 9a23 	vmul.f32	s18, s8, s7
 80045aa:	ee26 6a23 	vmul.f32	s12, s12, s7
 80045ae:	ee24 4a26 	vmul.f32	s8, s8, s13
 80045b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80045b6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80045ba:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80045be:	ee36 6a44 	vsub.f32	s12, s12, s8
 80045c2:	ee37 7a64 	vsub.f32	s14, s14, s9
 80045c6:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80045ca:	ee79 3a29 	vadd.f32	s7, s18, s19
 80045ce:	ee75 6a60 	vsub.f32	s13, s10, s1
 80045d2:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80045d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80045da:	ed45 3a02 	vstr	s7, [r5, #-8]
 80045de:	ed05 6a01 	vstr	s12, [r5, #-4]
 80045e2:	ed84 7a01 	vstr	s14, [r4, #4]
 80045e6:	ed84 4a02 	vstr	s8, [r4, #8]
 80045ea:	ee35 6a81 	vadd.f32	s12, s11, s2
 80045ee:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80045f2:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80045f6:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80045fa:	ee33 3a62 	vsub.f32	s6, s6, s5
 80045fe:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8004602:	ee67 2a26 	vmul.f32	s5, s14, s13
 8004606:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800460a:	ee26 5a25 	vmul.f32	s10, s12, s11
 800460e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004612:	ee26 6a26 	vmul.f32	s12, s12, s13
 8004616:	ee27 7a25 	vmul.f32	s14, s14, s11
 800461a:	ee63 6a26 	vmul.f32	s13, s6, s13
 800461e:	ee23 3a25 	vmul.f32	s6, s6, s11
 8004622:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004626:	ee75 5a24 	vadd.f32	s11, s10, s9
 800462a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800462e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004632:	f1bb 0b01 	subs.w	fp, fp, #1
 8004636:	ed42 5a02 	vstr	s11, [r2, #-8]
 800463a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800463e:	f10e 0e08 	add.w	lr, lr, #8
 8004642:	ed83 3a02 	vstr	s6, [r3, #8]
 8004646:	ed83 7a01 	vstr	s14, [r3, #4]
 800464a:	f1ac 0c08 	sub.w	ip, ip, #8
 800464e:	f10a 0a08 	add.w	sl, sl, #8
 8004652:	f100 0008 	add.w	r0, r0, #8
 8004656:	f1a1 0108 	sub.w	r1, r1, #8
 800465a:	f109 0910 	add.w	r9, r9, #16
 800465e:	f105 0508 	add.w	r5, r5, #8
 8004662:	f1a4 0408 	sub.w	r4, r4, #8
 8004666:	f108 0818 	add.w	r8, r8, #24
 800466a:	f102 0208 	add.w	r2, r2, #8
 800466e:	f1a3 0308 	sub.w	r3, r3, #8
 8004672:	f47f aefc 	bne.w	800446e <arm_cfft_radix8by4_f32+0x12e>
 8004676:	9907      	ldr	r1, [sp, #28]
 8004678:	9800      	ldr	r0, [sp, #0]
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004680:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004684:	9100      	str	r1, [sp, #0]
 8004686:	9904      	ldr	r1, [sp, #16]
 8004688:	4419      	add	r1, r3
 800468a:	9104      	str	r1, [sp, #16]
 800468c:	9903      	ldr	r1, [sp, #12]
 800468e:	4419      	add	r1, r3
 8004690:	9103      	str	r1, [sp, #12]
 8004692:	9906      	ldr	r1, [sp, #24]
 8004694:	4419      	add	r1, r3
 8004696:	9106      	str	r1, [sp, #24]
 8004698:	9905      	ldr	r1, [sp, #20]
 800469a:	441f      	add	r7, r3
 800469c:	4419      	add	r1, r3
 800469e:	9b02      	ldr	r3, [sp, #8]
 80046a0:	9105      	str	r1, [sp, #20]
 80046a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046a6:	9302      	str	r3, [sp, #8]
 80046a8:	9904      	ldr	r1, [sp, #16]
 80046aa:	9805      	ldr	r0, [sp, #20]
 80046ac:	ed91 4a00 	vldr	s8, [r1]
 80046b0:	edd0 6a00 	vldr	s13, [r0]
 80046b4:	9b06      	ldr	r3, [sp, #24]
 80046b6:	ed97 3a00 	vldr	s6, [r7]
 80046ba:	edd3 7a00 	vldr	s15, [r3]
 80046be:	edd0 4a01 	vldr	s9, [r0, #4]
 80046c2:	edd1 3a01 	vldr	s7, [r1, #4]
 80046c6:	ed97 2a01 	vldr	s4, [r7, #4]
 80046ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80046ce:	9a03      	ldr	r2, [sp, #12]
 80046d0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80046d4:	ee34 6a26 	vadd.f32	s12, s8, s13
 80046d8:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80046dc:	ee37 5a86 	vadd.f32	s10, s15, s12
 80046e0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80046e4:	ee35 5a03 	vadd.f32	s10, s10, s6
 80046e8:	ee74 6a66 	vsub.f32	s13, s8, s13
 80046ec:	ed81 5a00 	vstr	s10, [r1]
 80046f0:	ed93 5a01 	vldr	s10, [r3, #4]
 80046f4:	edd7 4a01 	vldr	s9, [r7, #4]
 80046f8:	ee35 5a85 	vadd.f32	s10, s11, s10
 80046fc:	ee37 4a26 	vadd.f32	s8, s14, s13
 8004700:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004704:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8004708:	ed81 5a01 	vstr	s10, [r1, #4]
 800470c:	edd2 1a00 	vldr	s3, [r2]
 8004710:	edd2 2a01 	vldr	s5, [r2, #4]
 8004714:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004718:	ee34 4a42 	vsub.f32	s8, s8, s4
 800471c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004720:	ee64 4a21 	vmul.f32	s9, s8, s3
 8004724:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004728:	ee65 2a22 	vmul.f32	s5, s10, s5
 800472c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004730:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004734:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004738:	edc3 2a00 	vstr	s5, [r3]
 800473c:	ed83 5a01 	vstr	s10, [r3, #4]
 8004740:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8004744:	9b00      	ldr	r3, [sp, #0]
 8004746:	ee36 6a43 	vsub.f32	s12, s12, s6
 800474a:	ed93 4a01 	vldr	s8, [r3, #4]
 800474e:	ed93 5a00 	vldr	s10, [r3]
 8004752:	9b02      	ldr	r3, [sp, #8]
 8004754:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004758:	ee66 4a05 	vmul.f32	s9, s12, s10
 800475c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004760:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004764:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004768:	ee35 6a46 	vsub.f32	s12, s10, s12
 800476c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8004770:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004774:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004778:	ed80 6a01 	vstr	s12, [r0, #4]
 800477c:	edc0 5a00 	vstr	s11, [r0]
 8004780:	edd3 5a01 	vldr	s11, [r3, #4]
 8004784:	edd3 6a00 	vldr	s13, [r3]
 8004788:	ee37 7a02 	vadd.f32	s14, s14, s4
 800478c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8004790:	ee27 6a26 	vmul.f32	s12, s14, s13
 8004794:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004798:	ee27 7a25 	vmul.f32	s14, s14, s11
 800479c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80047a0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80047a4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80047a8:	ed87 7a01 	vstr	s14, [r7, #4]
 80047ac:	edc7 7a00 	vstr	s15, [r7]
 80047b0:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 80047b4:	4621      	mov	r1, r4
 80047b6:	686a      	ldr	r2, [r5, #4]
 80047b8:	2304      	movs	r3, #4
 80047ba:	f000 f8af 	bl	800491c <arm_radix8_butterfly_f32>
 80047be:	4630      	mov	r0, r6
 80047c0:	4621      	mov	r1, r4
 80047c2:	686a      	ldr	r2, [r5, #4]
 80047c4:	2304      	movs	r3, #4
 80047c6:	f000 f8a9 	bl	800491c <arm_radix8_butterfly_f32>
 80047ca:	9808      	ldr	r0, [sp, #32]
 80047cc:	686a      	ldr	r2, [r5, #4]
 80047ce:	4621      	mov	r1, r4
 80047d0:	2304      	movs	r3, #4
 80047d2:	f000 f8a3 	bl	800491c <arm_radix8_butterfly_f32>
 80047d6:	686a      	ldr	r2, [r5, #4]
 80047d8:	9801      	ldr	r0, [sp, #4]
 80047da:	4621      	mov	r1, r4
 80047dc:	2304      	movs	r3, #4
 80047de:	b00d      	add	sp, #52	; 0x34
 80047e0:	ecbd 8b0a 	vpop	{d8-d12}
 80047e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	f000 b898 	b.w	800491c <arm_radix8_butterfly_f32>

080047ec <arm_cfft_f32>:
 80047ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f0:	2a01      	cmp	r2, #1
 80047f2:	4606      	mov	r6, r0
 80047f4:	4617      	mov	r7, r2
 80047f6:	460c      	mov	r4, r1
 80047f8:	4698      	mov	r8, r3
 80047fa:	8805      	ldrh	r5, [r0, #0]
 80047fc:	d056      	beq.n	80048ac <arm_cfft_f32+0xc0>
 80047fe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004802:	d063      	beq.n	80048cc <arm_cfft_f32+0xe0>
 8004804:	d916      	bls.n	8004834 <arm_cfft_f32+0x48>
 8004806:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800480a:	d01a      	beq.n	8004842 <arm_cfft_f32+0x56>
 800480c:	d947      	bls.n	800489e <arm_cfft_f32+0xb2>
 800480e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004812:	d05b      	beq.n	80048cc <arm_cfft_f32+0xe0>
 8004814:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004818:	d105      	bne.n	8004826 <arm_cfft_f32+0x3a>
 800481a:	2301      	movs	r3, #1
 800481c:	6872      	ldr	r2, [r6, #4]
 800481e:	4629      	mov	r1, r5
 8004820:	4620      	mov	r0, r4
 8004822:	f000 f87b 	bl	800491c <arm_radix8_butterfly_f32>
 8004826:	f1b8 0f00 	cmp.w	r8, #0
 800482a:	d111      	bne.n	8004850 <arm_cfft_f32+0x64>
 800482c:	2f01      	cmp	r7, #1
 800482e:	d016      	beq.n	800485e <arm_cfft_f32+0x72>
 8004830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004834:	2d20      	cmp	r5, #32
 8004836:	d049      	beq.n	80048cc <arm_cfft_f32+0xe0>
 8004838:	d935      	bls.n	80048a6 <arm_cfft_f32+0xba>
 800483a:	2d40      	cmp	r5, #64	; 0x40
 800483c:	d0ed      	beq.n	800481a <arm_cfft_f32+0x2e>
 800483e:	2d80      	cmp	r5, #128	; 0x80
 8004840:	d1f1      	bne.n	8004826 <arm_cfft_f32+0x3a>
 8004842:	4621      	mov	r1, r4
 8004844:	4630      	mov	r0, r6
 8004846:	f7ff fcab 	bl	80041a0 <arm_cfft_radix8by2_f32>
 800484a:	f1b8 0f00 	cmp.w	r8, #0
 800484e:	d0ed      	beq.n	800482c <arm_cfft_f32+0x40>
 8004850:	68b2      	ldr	r2, [r6, #8]
 8004852:	89b1      	ldrh	r1, [r6, #12]
 8004854:	4620      	mov	r0, r4
 8004856:	f000 f841 	bl	80048dc <arm_bitreversal_32>
 800485a:	2f01      	cmp	r7, #1
 800485c:	d1e8      	bne.n	8004830 <arm_cfft_f32+0x44>
 800485e:	ee07 5a90 	vmov	s15, r5
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800486a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800486e:	2d00      	cmp	r5, #0
 8004870:	d0de      	beq.n	8004830 <arm_cfft_f32+0x44>
 8004872:	f104 0108 	add.w	r1, r4, #8
 8004876:	2300      	movs	r3, #0
 8004878:	3301      	adds	r3, #1
 800487a:	429d      	cmp	r5, r3
 800487c:	f101 0108 	add.w	r1, r1, #8
 8004880:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004884:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004888:	ee27 7a26 	vmul.f32	s14, s14, s13
 800488c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004890:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004894:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004898:	d1ee      	bne.n	8004878 <arm_cfft_f32+0x8c>
 800489a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800489e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80048a2:	d0ba      	beq.n	800481a <arm_cfft_f32+0x2e>
 80048a4:	e7bf      	b.n	8004826 <arm_cfft_f32+0x3a>
 80048a6:	2d10      	cmp	r5, #16
 80048a8:	d0cb      	beq.n	8004842 <arm_cfft_f32+0x56>
 80048aa:	e7bc      	b.n	8004826 <arm_cfft_f32+0x3a>
 80048ac:	b19d      	cbz	r5, 80048d6 <arm_cfft_f32+0xea>
 80048ae:	f101 030c 	add.w	r3, r1, #12
 80048b2:	2200      	movs	r2, #0
 80048b4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80048b8:	3201      	adds	r2, #1
 80048ba:	eef1 7a67 	vneg.f32	s15, s15
 80048be:	4295      	cmp	r5, r2
 80048c0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80048c4:	f103 0308 	add.w	r3, r3, #8
 80048c8:	d1f4      	bne.n	80048b4 <arm_cfft_f32+0xc8>
 80048ca:	e798      	b.n	80047fe <arm_cfft_f32+0x12>
 80048cc:	4621      	mov	r1, r4
 80048ce:	4630      	mov	r0, r6
 80048d0:	f7ff fd36 	bl	8004340 <arm_cfft_radix8by4_f32>
 80048d4:	e7a7      	b.n	8004826 <arm_cfft_f32+0x3a>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0aa      	beq.n	8004830 <arm_cfft_f32+0x44>
 80048da:	e7b9      	b.n	8004850 <arm_cfft_f32+0x64>

080048dc <arm_bitreversal_32>:
 80048dc:	b1e9      	cbz	r1, 800491a <arm_bitreversal_32+0x3e>
 80048de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e0:	2500      	movs	r5, #0
 80048e2:	f102 0e02 	add.w	lr, r2, #2
 80048e6:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80048ea:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80048ee:	08a4      	lsrs	r4, r4, #2
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80048f6:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80048fa:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80048fe:	00a6      	lsls	r6, r4, #2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8004906:	3304      	adds	r3, #4
 8004908:	1d34      	adds	r4, r6, #4
 800490a:	3502      	adds	r5, #2
 800490c:	58c6      	ldr	r6, [r0, r3]
 800490e:	5907      	ldr	r7, [r0, r4]
 8004910:	50c7      	str	r7, [r0, r3]
 8004912:	428d      	cmp	r5, r1
 8004914:	5106      	str	r6, [r0, r4]
 8004916:	d3e6      	bcc.n	80048e6 <arm_bitreversal_32+0xa>
 8004918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491a:	4770      	bx	lr

0800491c <arm_radix8_butterfly_f32>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	ed2d 8b10 	vpush	{d8-d15}
 8004924:	b095      	sub	sp, #84	; 0x54
 8004926:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800492a:	4603      	mov	r3, r0
 800492c:	3304      	adds	r3, #4
 800492e:	ed9f bab9 	vldr	s22, [pc, #740]	; 8004c14 <arm_radix8_butterfly_f32+0x2f8>
 8004932:	9012      	str	r0, [sp, #72]	; 0x48
 8004934:	468b      	mov	fp, r1
 8004936:	9313      	str	r3, [sp, #76]	; 0x4c
 8004938:	4689      	mov	r9, r1
 800493a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800493e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004940:	960f      	str	r6, [sp, #60]	; 0x3c
 8004942:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8004946:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800494a:	eb03 0508 	add.w	r5, r3, r8
 800494e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8004952:	eb05 040e 	add.w	r4, r5, lr
 8004956:	0137      	lsls	r7, r6, #4
 8004958:	eba6 030a 	sub.w	r3, r6, sl
 800495c:	eb04 000e 	add.w	r0, r4, lr
 8004960:	44b2      	add	sl, r6
 8004962:	1d3a      	adds	r2, r7, #4
 8004964:	9702      	str	r7, [sp, #8]
 8004966:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800496a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800496e:	ebae 0c06 	sub.w	ip, lr, r6
 8004972:	9703      	str	r7, [sp, #12]
 8004974:	eb03 0708 	add.w	r7, r3, r8
 8004978:	9701      	str	r7, [sp, #4]
 800497a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800497e:	9706      	str	r7, [sp, #24]
 8004980:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004982:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004986:	f10e 0104 	add.w	r1, lr, #4
 800498a:	4439      	add	r1, r7
 800498c:	443a      	add	r2, r7
 800498e:	0137      	lsls	r7, r6, #4
 8004990:	00f6      	lsls	r6, r6, #3
 8004992:	9704      	str	r7, [sp, #16]
 8004994:	9605      	str	r6, [sp, #20]
 8004996:	9f01      	ldr	r7, [sp, #4]
 8004998:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800499a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800499e:	f04f 0c00 	mov.w	ip, #0
 80049a2:	edd4 6a00 	vldr	s13, [r4]
 80049a6:	edd7 1a00 	vldr	s3, [r7]
 80049aa:	ed16 aa01 	vldr	s20, [r6, #-4]
 80049ae:	edd5 5a00 	vldr	s11, [r5]
 80049b2:	ed52 9a01 	vldr	s19, [r2, #-4]
 80049b6:	ed90 6a00 	vldr	s12, [r0]
 80049ba:	ed51 7a01 	vldr	s15, [r1, #-4]
 80049be:	ed93 3a00 	vldr	s6, [r3]
 80049c2:	ee39 0a86 	vadd.f32	s0, s19, s12
 80049c6:	ee33 2a21 	vadd.f32	s4, s6, s3
 80049ca:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80049ce:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80049d2:	ee35 7a02 	vadd.f32	s14, s10, s4
 80049d6:	ee34 4a80 	vadd.f32	s8, s9, s0
 80049da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80049de:	ee74 6a07 	vadd.f32	s13, s8, s14
 80049e2:	ee34 4a47 	vsub.f32	s8, s8, s14
 80049e6:	ed46 6a01 	vstr	s13, [r6, #-4]
 80049ea:	ed85 4a00 	vstr	s8, [r5]
 80049ee:	edd1 6a00 	vldr	s13, [r1]
 80049f2:	ed94 9a01 	vldr	s18, [r4, #4]
 80049f6:	edd3 2a01 	vldr	s5, [r3, #4]
 80049fa:	edd7 8a01 	vldr	s17, [r7, #4]
 80049fe:	edd6 0a00 	vldr	s1, [r6]
 8004a02:	edd5 3a01 	vldr	s7, [r5, #4]
 8004a06:	ed90 8a01 	vldr	s16, [r0, #4]
 8004a0a:	ed92 7a00 	vldr	s14, [r2]
 8004a0e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004a12:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8004a16:	ee72 aae8 	vsub.f32	s21, s5, s17
 8004a1a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8004a1e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8004a22:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004a26:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8004a2a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8004a2e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8004a32:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8004a36:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8004a3a:	ee77 0a08 	vadd.f32	s1, s14, s16
 8004a3e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8004a42:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004a46:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8004a4a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8004a4e:	ee76 6a89 	vadd.f32	s13, s13, s18
 8004a52:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8004a56:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004a5a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004a5e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8004a62:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8004a66:	ee33 2a20 	vadd.f32	s4, s6, s1
 8004a6a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004a6e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8004a72:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8004a76:	ee77 0a01 	vadd.f32	s1, s14, s2
 8004a7a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8004a7e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8004a82:	ee73 1a84 	vadd.f32	s3, s7, s8
 8004a86:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004a8a:	ee76 3a27 	vadd.f32	s7, s12, s15
 8004a8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004a92:	ee32 8a00 	vadd.f32	s16, s4, s0
 8004a96:	ee33 1a45 	vsub.f32	s2, s6, s10
 8004a9a:	ee32 2a40 	vsub.f32	s4, s4, s0
 8004a9e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004aa2:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8004aa6:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8004aaa:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004aae:	ee34 6a67 	vsub.f32	s12, s8, s15
 8004ab2:	ee75 4a87 	vadd.f32	s9, s11, s14
 8004ab6:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8004aba:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004abe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004ac2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8004ac6:	44dc      	add	ip, fp
 8004ac8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004acc:	45e1      	cmp	r9, ip
 8004ace:	ed86 8a00 	vstr	s16, [r6]
 8004ad2:	ed85 2a01 	vstr	s4, [r5, #4]
 8004ad6:	4456      	add	r6, sl
 8004ad8:	ed02 0a01 	vstr	s0, [r2, #-4]
 8004adc:	4455      	add	r5, sl
 8004ade:	edc0 6a00 	vstr	s13, [r0]
 8004ae2:	ed82 1a00 	vstr	s2, [r2]
 8004ae6:	ed80 5a01 	vstr	s10, [r0, #4]
 8004aea:	4452      	add	r2, sl
 8004aec:	ed01 3a01 	vstr	s6, [r1, #-4]
 8004af0:	4450      	add	r0, sl
 8004af2:	edc7 2a00 	vstr	s5, [r7]
 8004af6:	edc4 4a00 	vstr	s9, [r4]
 8004afa:	ed83 7a00 	vstr	s14, [r3]
 8004afe:	edc1 5a00 	vstr	s11, [r1]
 8004b02:	edc7 3a01 	vstr	s7, [r7, #4]
 8004b06:	4451      	add	r1, sl
 8004b08:	ed84 6a01 	vstr	s12, [r4, #4]
 8004b0c:	4457      	add	r7, sl
 8004b0e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004b12:	4454      	add	r4, sl
 8004b14:	4453      	add	r3, sl
 8004b16:	f63f af44 	bhi.w	80049a2 <arm_radix8_butterfly_f32+0x86>
 8004b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b1c:	2b07      	cmp	r3, #7
 8004b1e:	f240 81b7 	bls.w	8004e90 <arm_radix8_butterfly_f32+0x574>
 8004b22:	9b06      	ldr	r3, [sp, #24]
 8004b24:	9903      	ldr	r1, [sp, #12]
 8004b26:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004b28:	9e05      	ldr	r6, [sp, #20]
 8004b2a:	9a04      	ldr	r2, [sp, #16]
 8004b2c:	f103 0c08 	add.w	ip, r3, #8
 8004b30:	9b02      	ldr	r3, [sp, #8]
 8004b32:	3108      	adds	r1, #8
 8004b34:	f108 0808 	add.w	r8, r8, #8
 8004b38:	1841      	adds	r1, r0, r1
 8004b3a:	3608      	adds	r6, #8
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4444      	add	r4, r8
 8004b42:	18c3      	adds	r3, r0, r3
 8004b44:	9109      	str	r1, [sp, #36]	; 0x24
 8004b46:	1981      	adds	r1, r0, r6
 8004b48:	f10e 0e08 	add.w	lr, lr, #8
 8004b4c:	3208      	adds	r2, #8
 8004b4e:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b50:	9107      	str	r1, [sp, #28]
 8004b52:	4604      	mov	r4, r0
 8004b54:	4601      	mov	r1, r0
 8004b56:	9304      	str	r3, [sp, #16]
 8004b58:	f100 030c 	add.w	r3, r0, #12
 8004b5c:	4474      	add	r4, lr
 8004b5e:	f04f 0801 	mov.w	r8, #1
 8004b62:	1882      	adds	r2, r0, r2
 8004b64:	4461      	add	r1, ip
 8004b66:	9305      	str	r3, [sp, #20]
 8004b68:	464b      	mov	r3, r9
 8004b6a:	940a      	str	r4, [sp, #40]	; 0x28
 8004b6c:	46c1      	mov	r9, r8
 8004b6e:	9208      	str	r2, [sp, #32]
 8004b70:	46d8      	mov	r8, fp
 8004b72:	9106      	str	r1, [sp, #24]
 8004b74:	f04f 0e00 	mov.w	lr, #0
 8004b78:	469b      	mov	fp, r3
 8004b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b7e:	449e      	add	lr, r3
 8004b80:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8004b84:	441a      	add	r2, r3
 8004b86:	920e      	str	r2, [sp, #56]	; 0x38
 8004b88:	441a      	add	r2, r3
 8004b8a:	18d4      	adds	r4, r2, r3
 8004b8c:	18e5      	adds	r5, r4, r3
 8004b8e:	18ee      	adds	r6, r5, r3
 8004b90:	18f7      	adds	r7, r6, r3
 8004b92:	eb07 0c03 	add.w	ip, r7, r3
 8004b96:	920d      	str	r2, [sp, #52]	; 0x34
 8004b98:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8004b9c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8004ba0:	910c      	str	r1, [sp, #48]	; 0x30
 8004ba2:	4419      	add	r1, r3
 8004ba4:	9103      	str	r1, [sp, #12]
 8004ba6:	4419      	add	r1, r3
 8004ba8:	18ca      	adds	r2, r1, r3
 8004baa:	9202      	str	r2, [sp, #8]
 8004bac:	441a      	add	r2, r3
 8004bae:	18d0      	adds	r0, r2, r3
 8004bb0:	ed92 ea01 	vldr	s28, [r2, #4]
 8004bb4:	9a02      	ldr	r2, [sp, #8]
 8004bb6:	edd4 7a00 	vldr	s15, [r4]
 8004bba:	edd2 da01 	vldr	s27, [r2, #4]
 8004bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bc0:	ed91 da01 	vldr	s26, [r1, #4]
 8004bc4:	ed92 ca01 	vldr	s24, [r2, #4]
 8004bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004bca:	9903      	ldr	r1, [sp, #12]
 8004bcc:	edcd 7a03 	vstr	s15, [sp, #12]
 8004bd0:	edd2 7a00 	vldr	s15, [r2]
 8004bd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bd6:	edcd 7a02 	vstr	s15, [sp, #8]
 8004bda:	edd2 7a00 	vldr	s15, [r2]
 8004bde:	edd0 ea01 	vldr	s29, [r0, #4]
 8004be2:	edd1 ca01 	vldr	s25, [r1, #4]
 8004be6:	eddc ba00 	vldr	s23, [ip]
 8004bea:	edd7 aa00 	vldr	s21, [r7]
 8004bee:	ed96 aa00 	vldr	s20, [r6]
 8004bf2:	edd5 9a00 	vldr	s19, [r5]
 8004bf6:	edcd 7a01 	vstr	s15, [sp, #4]
 8004bfa:	4403      	add	r3, r0
 8004bfc:	ed93 fa01 	vldr	s30, [r3, #4]
 8004c00:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8004c04:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8004c08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c10:	46cc      	mov	ip, r9
 8004c12:	e001      	b.n	8004c18 <arm_radix8_butterfly_f32+0x2fc>
 8004c14:	3f3504f3 	.word	0x3f3504f3
 8004c18:	ed91 6a00 	vldr	s12, [r1]
 8004c1c:	ed93 5a00 	vldr	s10, [r3]
 8004c20:	edd0 fa00 	vldr	s31, [r0]
 8004c24:	edd4 7a00 	vldr	s15, [r4]
 8004c28:	ed95 7a00 	vldr	s14, [r5]
 8004c2c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8004c30:	ed17 3a01 	vldr	s6, [r7, #-4]
 8004c34:	ed92 2a00 	vldr	s4, [r2]
 8004c38:	ed96 0a00 	vldr	s0, [r6]
 8004c3c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004c40:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004c44:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8004c48:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004c4c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004c50:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004c54:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004c58:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004c5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c60:	ed06 6a01 	vstr	s12, [r6, #-4]
 8004c64:	edd4 8a01 	vldr	s17, [r4, #4]
 8004c68:	ed92 9a01 	vldr	s18, [r2, #4]
 8004c6c:	edd7 0a00 	vldr	s1, [r7]
 8004c70:	edd1 2a01 	vldr	s5, [r1, #4]
 8004c74:	ed95 7a01 	vldr	s14, [r5, #4]
 8004c78:	ed93 6a01 	vldr	s12, [r3, #4]
 8004c7c:	edd0 5a01 	vldr	s11, [r0, #4]
 8004c80:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004c84:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8004c88:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004c8c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8004c90:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004c94:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004c98:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004c9c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004ca0:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004ca4:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004ca8:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004cac:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8004cb0:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004cb4:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8004cb8:	ee32 1a08 	vadd.f32	s2, s4, s16
 8004cbc:	ee72 fa87 	vadd.f32	s31, s5, s14
 8004cc0:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004cc4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004cc8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004ccc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004cd0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004cd4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004cd8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8004cdc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8004ce0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004ce4:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004ce8:	ee74 0a22 	vadd.f32	s1, s8, s5
 8004cec:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004cf0:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004cf4:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004cf8:	ee32 4a64 	vsub.f32	s8, s4, s9
 8004cfc:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004d00:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004d04:	ee33 9a49 	vsub.f32	s18, s6, s18
 8004d08:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8004d0c:	ee35 3a85 	vadd.f32	s6, s11, s10
 8004d10:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004d14:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004d18:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004d1c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8004d20:	ee30 7a68 	vsub.f32	s14, s0, s17
 8004d24:	ee35 8a03 	vadd.f32	s16, s10, s6
 8004d28:	ee38 0a80 	vadd.f32	s0, s17, s0
 8004d2c:	ee73 3a82 	vadd.f32	s7, s7, s4
 8004d30:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8004d34:	ed9d 2a01 	vldr	s4, [sp, #4]
 8004d38:	eddd 1a02 	vldr	s3, [sp, #8]
 8004d3c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8004d40:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8004d44:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8004d48:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8004d4c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004d50:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8004d54:	ee76 5a49 	vsub.f32	s11, s12, s18
 8004d58:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8004d5c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8004d60:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8004d64:	ee21 4a84 	vmul.f32	s8, s3, s8
 8004d68:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8004d6c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8004d70:	ee22 2a08 	vmul.f32	s4, s4, s16
 8004d74:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004d78:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8004d7c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8004d80:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8004d84:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8004d88:	ee74 0a60 	vsub.f32	s1, s8, s1
 8004d8c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004d90:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8004d94:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8004d98:	ee72 1a21 	vadd.f32	s3, s4, s3
 8004d9c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8004da0:	ee38 2a89 	vadd.f32	s4, s17, s18
 8004da4:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8004da8:	ee38 8a04 	vadd.f32	s16, s16, s8
 8004dac:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8004db0:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8004db4:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8004db8:	eddd 5a03 	vldr	s11, [sp, #12]
 8004dbc:	edc6 fa00 	vstr	s31, [r6]
 8004dc0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8004dc4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004dc8:	ee30 0a45 	vsub.f32	s0, s0, s10
 8004dcc:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8004dd0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8004dd4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8004dd8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8004ddc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8004de0:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004de4:	ee74 4a89 	vadd.f32	s9, s9, s18
 8004de8:	ee34 3a43 	vsub.f32	s6, s8, s6
 8004dec:	ee78 8a85 	vadd.f32	s17, s17, s10
 8004df0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004df4:	44c4      	add	ip, r8
 8004df6:	45e3      	cmp	fp, ip
 8004df8:	edc3 3a00 	vstr	s7, [r3]
 8004dfc:	edc3 6a01 	vstr	s13, [r3, #4]
 8004e00:	4456      	add	r6, sl
 8004e02:	ed07 1a01 	vstr	s2, [r7, #-4]
 8004e06:	edc7 0a00 	vstr	s1, [r7]
 8004e0a:	4453      	add	r3, sl
 8004e0c:	ed80 2a00 	vstr	s4, [r0]
 8004e10:	edc0 2a01 	vstr	s5, [r0, #4]
 8004e14:	4457      	add	r7, sl
 8004e16:	edc2 1a00 	vstr	s3, [r2]
 8004e1a:	ed82 7a01 	vstr	s14, [r2, #4]
 8004e1e:	4450      	add	r0, sl
 8004e20:	ed85 8a00 	vstr	s16, [r5]
 8004e24:	ed85 0a01 	vstr	s0, [r5, #4]
 8004e28:	4452      	add	r2, sl
 8004e2a:	edc1 4a00 	vstr	s9, [r1]
 8004e2e:	4455      	add	r5, sl
 8004e30:	ed81 3a01 	vstr	s6, [r1, #4]
 8004e34:	edc4 8a00 	vstr	s17, [r4]
 8004e38:	ed84 6a01 	vstr	s12, [r4, #4]
 8004e3c:	4451      	add	r1, sl
 8004e3e:	4454      	add	r4, sl
 8004e40:	f63f aeea 	bhi.w	8004c18 <arm_radix8_butterfly_f32+0x2fc>
 8004e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e46:	3308      	adds	r3, #8
 8004e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e52:	3308      	adds	r3, #8
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	9b08      	ldr	r3, [sp, #32]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	9308      	str	r3, [sp, #32]
 8004e5c:	9b07      	ldr	r3, [sp, #28]
 8004e5e:	3308      	adds	r3, #8
 8004e60:	9307      	str	r3, [sp, #28]
 8004e62:	9b06      	ldr	r3, [sp, #24]
 8004e64:	3308      	adds	r3, #8
 8004e66:	9306      	str	r3, [sp, #24]
 8004e68:	9b05      	ldr	r3, [sp, #20]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	9305      	str	r3, [sp, #20]
 8004e6e:	9b04      	ldr	r3, [sp, #16]
 8004e70:	3308      	adds	r3, #8
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e76:	f109 0901 	add.w	r9, r9, #1
 8004e7a:	454b      	cmp	r3, r9
 8004e7c:	f47f ae7d 	bne.w	8004b7a <arm_radix8_butterfly_f32+0x25e>
 8004e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	46d9      	mov	r9, fp
 8004e88:	9310      	str	r3, [sp, #64]	; 0x40
 8004e8a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8004e8e:	e554      	b.n	800493a <arm_radix8_butterfly_f32+0x1e>
 8004e90:	b015      	add	sp, #84	; 0x54
 8004e92:	ecbd 8b10 	vpop	{d8-d15}
 8004e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9a:	bf00      	nop

08004e9c <__errno>:
 8004e9c:	4b01      	ldr	r3, [pc, #4]	; (8004ea4 <__errno+0x8>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c

08004ea8 <__libc_init_array>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4d0d      	ldr	r5, [pc, #52]	; (8004ee0 <__libc_init_array+0x38>)
 8004eac:	4c0d      	ldr	r4, [pc, #52]	; (8004ee4 <__libc_init_array+0x3c>)
 8004eae:	1b64      	subs	r4, r4, r5
 8004eb0:	10a4      	asrs	r4, r4, #2
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	42a6      	cmp	r6, r4
 8004eb6:	d109      	bne.n	8004ecc <__libc_init_array+0x24>
 8004eb8:	4d0b      	ldr	r5, [pc, #44]	; (8004ee8 <__libc_init_array+0x40>)
 8004eba:	4c0c      	ldr	r4, [pc, #48]	; (8004eec <__libc_init_array+0x44>)
 8004ebc:	f002 fd72 	bl	80079a4 <_init>
 8004ec0:	1b64      	subs	r4, r4, r5
 8004ec2:	10a4      	asrs	r4, r4, #2
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	42a6      	cmp	r6, r4
 8004ec8:	d105      	bne.n	8004ed6 <__libc_init_array+0x2e>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed0:	4798      	blx	r3
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7ee      	b.n	8004eb4 <__libc_init_array+0xc>
 8004ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eda:	4798      	blx	r3
 8004edc:	3601      	adds	r6, #1
 8004ede:	e7f2      	b.n	8004ec6 <__libc_init_array+0x1e>
 8004ee0:	0801adbc 	.word	0x0801adbc
 8004ee4:	0801adbc 	.word	0x0801adbc
 8004ee8:	0801adbc 	.word	0x0801adbc
 8004eec:	0801adc0 	.word	0x0801adc0

08004ef0 <memset>:
 8004ef0:	4402      	add	r2, r0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d100      	bne.n	8004efa <memset+0xa>
 8004ef8:	4770      	bx	lr
 8004efa:	f803 1b01 	strb.w	r1, [r3], #1
 8004efe:	e7f9      	b.n	8004ef4 <memset+0x4>

08004f00 <__cvt>:
 8004f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	ec55 4b10 	vmov	r4, r5, d0
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	460e      	mov	r6, r1
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	462b      	mov	r3, r5
 8004f10:	bfbb      	ittet	lt
 8004f12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f16:	461d      	movlt	r5, r3
 8004f18:	2300      	movge	r3, #0
 8004f1a:	232d      	movlt	r3, #45	; 0x2d
 8004f1c:	700b      	strb	r3, [r1, #0]
 8004f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f24:	4691      	mov	r9, r2
 8004f26:	f023 0820 	bic.w	r8, r3, #32
 8004f2a:	bfbc      	itt	lt
 8004f2c:	4622      	movlt	r2, r4
 8004f2e:	4614      	movlt	r4, r2
 8004f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f34:	d005      	beq.n	8004f42 <__cvt+0x42>
 8004f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f3a:	d100      	bne.n	8004f3e <__cvt+0x3e>
 8004f3c:	3601      	adds	r6, #1
 8004f3e:	2102      	movs	r1, #2
 8004f40:	e000      	b.n	8004f44 <__cvt+0x44>
 8004f42:	2103      	movs	r1, #3
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	ab02      	add	r3, sp, #8
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	ec45 4b10 	vmov	d0, r4, r5
 8004f50:	4653      	mov	r3, sl
 8004f52:	4632      	mov	r2, r6
 8004f54:	f000 fce4 	bl	8005920 <_dtoa_r>
 8004f58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	d102      	bne.n	8004f66 <__cvt+0x66>
 8004f60:	f019 0f01 	tst.w	r9, #1
 8004f64:	d022      	beq.n	8004fac <__cvt+0xac>
 8004f66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f6a:	eb07 0906 	add.w	r9, r7, r6
 8004f6e:	d110      	bne.n	8004f92 <__cvt+0x92>
 8004f70:	783b      	ldrb	r3, [r7, #0]
 8004f72:	2b30      	cmp	r3, #48	; 0x30
 8004f74:	d10a      	bne.n	8004f8c <__cvt+0x8c>
 8004f76:	2200      	movs	r2, #0
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	f7fb fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f82:	b918      	cbnz	r0, 8004f8c <__cvt+0x8c>
 8004f84:	f1c6 0601 	rsb	r6, r6, #1
 8004f88:	f8ca 6000 	str.w	r6, [sl]
 8004f8c:	f8da 3000 	ldr.w	r3, [sl]
 8004f90:	4499      	add	r9, r3
 8004f92:	2200      	movs	r2, #0
 8004f94:	2300      	movs	r3, #0
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f9e:	b108      	cbz	r0, 8004fa4 <__cvt+0xa4>
 8004fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fa4:	2230      	movs	r2, #48	; 0x30
 8004fa6:	9b03      	ldr	r3, [sp, #12]
 8004fa8:	454b      	cmp	r3, r9
 8004faa:	d307      	bcc.n	8004fbc <__cvt+0xbc>
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fb0:	1bdb      	subs	r3, r3, r7
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	b004      	add	sp, #16
 8004fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbc:	1c59      	adds	r1, r3, #1
 8004fbe:	9103      	str	r1, [sp, #12]
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e7f0      	b.n	8004fa6 <__cvt+0xa6>

08004fc4 <__exponent>:
 8004fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	bfb8      	it	lt
 8004fcc:	4249      	neglt	r1, r1
 8004fce:	f803 2b02 	strb.w	r2, [r3], #2
 8004fd2:	bfb4      	ite	lt
 8004fd4:	222d      	movlt	r2, #45	; 0x2d
 8004fd6:	222b      	movge	r2, #43	; 0x2b
 8004fd8:	2909      	cmp	r1, #9
 8004fda:	7042      	strb	r2, [r0, #1]
 8004fdc:	dd2a      	ble.n	8005034 <__exponent+0x70>
 8004fde:	f10d 0407 	add.w	r4, sp, #7
 8004fe2:	46a4      	mov	ip, r4
 8004fe4:	270a      	movs	r7, #10
 8004fe6:	46a6      	mov	lr, r4
 8004fe8:	460a      	mov	r2, r1
 8004fea:	fb91 f6f7 	sdiv	r6, r1, r7
 8004fee:	fb07 1516 	mls	r5, r7, r6, r1
 8004ff2:	3530      	adds	r5, #48	; 0x30
 8004ff4:	2a63      	cmp	r2, #99	; 0x63
 8004ff6:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ffa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ffe:	4631      	mov	r1, r6
 8005000:	dcf1      	bgt.n	8004fe6 <__exponent+0x22>
 8005002:	3130      	adds	r1, #48	; 0x30
 8005004:	f1ae 0502 	sub.w	r5, lr, #2
 8005008:	f804 1c01 	strb.w	r1, [r4, #-1]
 800500c:	1c44      	adds	r4, r0, #1
 800500e:	4629      	mov	r1, r5
 8005010:	4561      	cmp	r1, ip
 8005012:	d30a      	bcc.n	800502a <__exponent+0x66>
 8005014:	f10d 0209 	add.w	r2, sp, #9
 8005018:	eba2 020e 	sub.w	r2, r2, lr
 800501c:	4565      	cmp	r5, ip
 800501e:	bf88      	it	hi
 8005020:	2200      	movhi	r2, #0
 8005022:	4413      	add	r3, r2
 8005024:	1a18      	subs	r0, r3, r0
 8005026:	b003      	add	sp, #12
 8005028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800502e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005032:	e7ed      	b.n	8005010 <__exponent+0x4c>
 8005034:	2330      	movs	r3, #48	; 0x30
 8005036:	3130      	adds	r1, #48	; 0x30
 8005038:	7083      	strb	r3, [r0, #2]
 800503a:	70c1      	strb	r1, [r0, #3]
 800503c:	1d03      	adds	r3, r0, #4
 800503e:	e7f1      	b.n	8005024 <__exponent+0x60>

08005040 <_printf_float>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	ed2d 8b02 	vpush	{d8}
 8005048:	b08d      	sub	sp, #52	; 0x34
 800504a:	460c      	mov	r4, r1
 800504c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005050:	4616      	mov	r6, r2
 8005052:	461f      	mov	r7, r3
 8005054:	4605      	mov	r5, r0
 8005056:	f001 fb47 	bl	80066e8 <_localeconv_r>
 800505a:	f8d0 a000 	ldr.w	sl, [r0]
 800505e:	4650      	mov	r0, sl
 8005060:	f7fb f8b6 	bl	80001d0 <strlen>
 8005064:	2300      	movs	r3, #0
 8005066:	930a      	str	r3, [sp, #40]	; 0x28
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	9305      	str	r3, [sp, #20]
 800506c:	f8d8 3000 	ldr.w	r3, [r8]
 8005070:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005074:	3307      	adds	r3, #7
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	f103 0208 	add.w	r2, r3, #8
 800507e:	f8c8 2000 	str.w	r2, [r8]
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800508a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800508e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005092:	9307      	str	r3, [sp, #28]
 8005094:	f8cd 8018 	str.w	r8, [sp, #24]
 8005098:	ee08 0a10 	vmov	s16, r0
 800509c:	4b9f      	ldr	r3, [pc, #636]	; (800531c <_printf_float+0x2dc>)
 800509e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050a2:	f04f 32ff 	mov.w	r2, #4294967295
 80050a6:	f7fb fd41 	bl	8000b2c <__aeabi_dcmpun>
 80050aa:	bb88      	cbnz	r0, 8005110 <_printf_float+0xd0>
 80050ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050b0:	4b9a      	ldr	r3, [pc, #616]	; (800531c <_printf_float+0x2dc>)
 80050b2:	f04f 32ff 	mov.w	r2, #4294967295
 80050b6:	f7fb fd1b 	bl	8000af0 <__aeabi_dcmple>
 80050ba:	bb48      	cbnz	r0, 8005110 <_printf_float+0xd0>
 80050bc:	2200      	movs	r2, #0
 80050be:	2300      	movs	r3, #0
 80050c0:	4640      	mov	r0, r8
 80050c2:	4649      	mov	r1, r9
 80050c4:	f7fb fd0a 	bl	8000adc <__aeabi_dcmplt>
 80050c8:	b110      	cbz	r0, 80050d0 <_printf_float+0x90>
 80050ca:	232d      	movs	r3, #45	; 0x2d
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d0:	4b93      	ldr	r3, [pc, #588]	; (8005320 <_printf_float+0x2e0>)
 80050d2:	4894      	ldr	r0, [pc, #592]	; (8005324 <_printf_float+0x2e4>)
 80050d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050d8:	bf94      	ite	ls
 80050da:	4698      	movls	r8, r3
 80050dc:	4680      	movhi	r8, r0
 80050de:	2303      	movs	r3, #3
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	9b05      	ldr	r3, [sp, #20]
 80050e4:	f023 0204 	bic.w	r2, r3, #4
 80050e8:	6022      	str	r2, [r4, #0]
 80050ea:	f04f 0900 	mov.w	r9, #0
 80050ee:	9700      	str	r7, [sp, #0]
 80050f0:	4633      	mov	r3, r6
 80050f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80050f4:	4621      	mov	r1, r4
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 f9d8 	bl	80054ac <_printf_common>
 80050fc:	3001      	adds	r0, #1
 80050fe:	f040 8090 	bne.w	8005222 <_printf_float+0x1e2>
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	b00d      	add	sp, #52	; 0x34
 8005108:	ecbd 8b02 	vpop	{d8}
 800510c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005110:	4642      	mov	r2, r8
 8005112:	464b      	mov	r3, r9
 8005114:	4640      	mov	r0, r8
 8005116:	4649      	mov	r1, r9
 8005118:	f7fb fd08 	bl	8000b2c <__aeabi_dcmpun>
 800511c:	b140      	cbz	r0, 8005130 <_printf_float+0xf0>
 800511e:	464b      	mov	r3, r9
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfbc      	itt	lt
 8005124:	232d      	movlt	r3, #45	; 0x2d
 8005126:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800512a:	487f      	ldr	r0, [pc, #508]	; (8005328 <_printf_float+0x2e8>)
 800512c:	4b7f      	ldr	r3, [pc, #508]	; (800532c <_printf_float+0x2ec>)
 800512e:	e7d1      	b.n	80050d4 <_printf_float+0x94>
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005136:	9206      	str	r2, [sp, #24]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	d13f      	bne.n	80051bc <_printf_float+0x17c>
 800513c:	2306      	movs	r3, #6
 800513e:	6063      	str	r3, [r4, #4]
 8005140:	9b05      	ldr	r3, [sp, #20]
 8005142:	6861      	ldr	r1, [r4, #4]
 8005144:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005148:	2300      	movs	r3, #0
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	ab0a      	add	r3, sp, #40	; 0x28
 800514e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005152:	ab09      	add	r3, sp, #36	; 0x24
 8005154:	ec49 8b10 	vmov	d0, r8, r9
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff fecd 	bl	8004f00 <__cvt>
 8005166:	9b06      	ldr	r3, [sp, #24]
 8005168:	9909      	ldr	r1, [sp, #36]	; 0x24
 800516a:	2b47      	cmp	r3, #71	; 0x47
 800516c:	4680      	mov	r8, r0
 800516e:	d108      	bne.n	8005182 <_printf_float+0x142>
 8005170:	1cc8      	adds	r0, r1, #3
 8005172:	db02      	blt.n	800517a <_printf_float+0x13a>
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	4299      	cmp	r1, r3
 8005178:	dd41      	ble.n	80051fe <_printf_float+0x1be>
 800517a:	f1ab 0b02 	sub.w	fp, fp, #2
 800517e:	fa5f fb8b 	uxtb.w	fp, fp
 8005182:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005186:	d820      	bhi.n	80051ca <_printf_float+0x18a>
 8005188:	3901      	subs	r1, #1
 800518a:	465a      	mov	r2, fp
 800518c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005190:	9109      	str	r1, [sp, #36]	; 0x24
 8005192:	f7ff ff17 	bl	8004fc4 <__exponent>
 8005196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005198:	1813      	adds	r3, r2, r0
 800519a:	2a01      	cmp	r2, #1
 800519c:	4681      	mov	r9, r0
 800519e:	6123      	str	r3, [r4, #16]
 80051a0:	dc02      	bgt.n	80051a8 <_printf_float+0x168>
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	07d2      	lsls	r2, r2, #31
 80051a6:	d501      	bpl.n	80051ac <_printf_float+0x16c>
 80051a8:	3301      	adds	r3, #1
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d09c      	beq.n	80050ee <_printf_float+0xae>
 80051b4:	232d      	movs	r3, #45	; 0x2d
 80051b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ba:	e798      	b.n	80050ee <_printf_float+0xae>
 80051bc:	9a06      	ldr	r2, [sp, #24]
 80051be:	2a47      	cmp	r2, #71	; 0x47
 80051c0:	d1be      	bne.n	8005140 <_printf_float+0x100>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1bc      	bne.n	8005140 <_printf_float+0x100>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e7b9      	b.n	800513e <_printf_float+0xfe>
 80051ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051ce:	d118      	bne.n	8005202 <_printf_float+0x1c2>
 80051d0:	2900      	cmp	r1, #0
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	dd0b      	ble.n	80051ee <_printf_float+0x1ae>
 80051d6:	6121      	str	r1, [r4, #16]
 80051d8:	b913      	cbnz	r3, 80051e0 <_printf_float+0x1a0>
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	07d0      	lsls	r0, r2, #31
 80051de:	d502      	bpl.n	80051e6 <_printf_float+0x1a6>
 80051e0:	3301      	adds	r3, #1
 80051e2:	440b      	add	r3, r1
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80051e8:	f04f 0900 	mov.w	r9, #0
 80051ec:	e7de      	b.n	80051ac <_printf_float+0x16c>
 80051ee:	b913      	cbnz	r3, 80051f6 <_printf_float+0x1b6>
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	07d2      	lsls	r2, r2, #31
 80051f4:	d501      	bpl.n	80051fa <_printf_float+0x1ba>
 80051f6:	3302      	adds	r3, #2
 80051f8:	e7f4      	b.n	80051e4 <_printf_float+0x1a4>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e7f2      	b.n	80051e4 <_printf_float+0x1a4>
 80051fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005204:	4299      	cmp	r1, r3
 8005206:	db05      	blt.n	8005214 <_printf_float+0x1d4>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	6121      	str	r1, [r4, #16]
 800520c:	07d8      	lsls	r0, r3, #31
 800520e:	d5ea      	bpl.n	80051e6 <_printf_float+0x1a6>
 8005210:	1c4b      	adds	r3, r1, #1
 8005212:	e7e7      	b.n	80051e4 <_printf_float+0x1a4>
 8005214:	2900      	cmp	r1, #0
 8005216:	bfd4      	ite	le
 8005218:	f1c1 0202 	rsble	r2, r1, #2
 800521c:	2201      	movgt	r2, #1
 800521e:	4413      	add	r3, r2
 8005220:	e7e0      	b.n	80051e4 <_printf_float+0x1a4>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	055a      	lsls	r2, r3, #21
 8005226:	d407      	bmi.n	8005238 <_printf_float+0x1f8>
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	4642      	mov	r2, r8
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	d12c      	bne.n	8005290 <_printf_float+0x250>
 8005236:	e764      	b.n	8005102 <_printf_float+0xc2>
 8005238:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800523c:	f240 80e0 	bls.w	8005400 <_printf_float+0x3c0>
 8005240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005244:	2200      	movs	r2, #0
 8005246:	2300      	movs	r3, #0
 8005248:	f7fb fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800524c:	2800      	cmp	r0, #0
 800524e:	d034      	beq.n	80052ba <_printf_float+0x27a>
 8005250:	4a37      	ldr	r2, [pc, #220]	; (8005330 <_printf_float+0x2f0>)
 8005252:	2301      	movs	r3, #1
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f af51 	beq.w	8005102 <_printf_float+0xc2>
 8005260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005264:	429a      	cmp	r2, r3
 8005266:	db02      	blt.n	800526e <_printf_float+0x22e>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	07d8      	lsls	r0, r3, #31
 800526c:	d510      	bpl.n	8005290 <_printf_float+0x250>
 800526e:	ee18 3a10 	vmov	r3, s16
 8005272:	4652      	mov	r2, sl
 8005274:	4631      	mov	r1, r6
 8005276:	4628      	mov	r0, r5
 8005278:	47b8      	blx	r7
 800527a:	3001      	adds	r0, #1
 800527c:	f43f af41 	beq.w	8005102 <_printf_float+0xc2>
 8005280:	f04f 0800 	mov.w	r8, #0
 8005284:	f104 091a 	add.w	r9, r4, #26
 8005288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	4543      	cmp	r3, r8
 800528e:	dc09      	bgt.n	80052a4 <_printf_float+0x264>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	079b      	lsls	r3, r3, #30
 8005294:	f100 8105 	bmi.w	80054a2 <_printf_float+0x462>
 8005298:	68e0      	ldr	r0, [r4, #12]
 800529a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800529c:	4298      	cmp	r0, r3
 800529e:	bfb8      	it	lt
 80052a0:	4618      	movlt	r0, r3
 80052a2:	e730      	b.n	8005106 <_printf_float+0xc6>
 80052a4:	2301      	movs	r3, #1
 80052a6:	464a      	mov	r2, r9
 80052a8:	4631      	mov	r1, r6
 80052aa:	4628      	mov	r0, r5
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	f43f af27 	beq.w	8005102 <_printf_float+0xc2>
 80052b4:	f108 0801 	add.w	r8, r8, #1
 80052b8:	e7e6      	b.n	8005288 <_printf_float+0x248>
 80052ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dc39      	bgt.n	8005334 <_printf_float+0x2f4>
 80052c0:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <_printf_float+0x2f0>)
 80052c2:	2301      	movs	r3, #1
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f af19 	beq.w	8005102 <_printf_float+0xc2>
 80052d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d4:	4313      	orrs	r3, r2
 80052d6:	d102      	bne.n	80052de <_printf_float+0x29e>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	07d9      	lsls	r1, r3, #31
 80052dc:	d5d8      	bpl.n	8005290 <_printf_float+0x250>
 80052de:	ee18 3a10 	vmov	r3, s16
 80052e2:	4652      	mov	r2, sl
 80052e4:	4631      	mov	r1, r6
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	f43f af09 	beq.w	8005102 <_printf_float+0xc2>
 80052f0:	f04f 0900 	mov.w	r9, #0
 80052f4:	f104 0a1a 	add.w	sl, r4, #26
 80052f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fa:	425b      	negs	r3, r3
 80052fc:	454b      	cmp	r3, r9
 80052fe:	dc01      	bgt.n	8005304 <_printf_float+0x2c4>
 8005300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005302:	e792      	b.n	800522a <_printf_float+0x1ea>
 8005304:	2301      	movs	r3, #1
 8005306:	4652      	mov	r2, sl
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	f43f aef7 	beq.w	8005102 <_printf_float+0xc2>
 8005314:	f109 0901 	add.w	r9, r9, #1
 8005318:	e7ee      	b.n	80052f8 <_printf_float+0x2b8>
 800531a:	bf00      	nop
 800531c:	7fefffff 	.word	0x7fefffff
 8005320:	0801a9dc 	.word	0x0801a9dc
 8005324:	0801a9e0 	.word	0x0801a9e0
 8005328:	0801a9e8 	.word	0x0801a9e8
 800532c:	0801a9e4 	.word	0x0801a9e4
 8005330:	0801a9ec 	.word	0x0801a9ec
 8005334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005338:	429a      	cmp	r2, r3
 800533a:	bfa8      	it	ge
 800533c:	461a      	movge	r2, r3
 800533e:	2a00      	cmp	r2, #0
 8005340:	4691      	mov	r9, r2
 8005342:	dc37      	bgt.n	80053b4 <_printf_float+0x374>
 8005344:	f04f 0b00 	mov.w	fp, #0
 8005348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800534c:	f104 021a 	add.w	r2, r4, #26
 8005350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005352:	9305      	str	r3, [sp, #20]
 8005354:	eba3 0309 	sub.w	r3, r3, r9
 8005358:	455b      	cmp	r3, fp
 800535a:	dc33      	bgt.n	80053c4 <_printf_float+0x384>
 800535c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005360:	429a      	cmp	r2, r3
 8005362:	db3b      	blt.n	80053dc <_printf_float+0x39c>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07da      	lsls	r2, r3, #31
 8005368:	d438      	bmi.n	80053dc <_printf_float+0x39c>
 800536a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800536c:	9a05      	ldr	r2, [sp, #20]
 800536e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005370:	1a9a      	subs	r2, r3, r2
 8005372:	eba3 0901 	sub.w	r9, r3, r1
 8005376:	4591      	cmp	r9, r2
 8005378:	bfa8      	it	ge
 800537a:	4691      	movge	r9, r2
 800537c:	f1b9 0f00 	cmp.w	r9, #0
 8005380:	dc35      	bgt.n	80053ee <_printf_float+0x3ae>
 8005382:	f04f 0800 	mov.w	r8, #0
 8005386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800538a:	f104 0a1a 	add.w	sl, r4, #26
 800538e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	eba3 0309 	sub.w	r3, r3, r9
 8005398:	4543      	cmp	r3, r8
 800539a:	f77f af79 	ble.w	8005290 <_printf_float+0x250>
 800539e:	2301      	movs	r3, #1
 80053a0:	4652      	mov	r2, sl
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f aeaa 	beq.w	8005102 <_printf_float+0xc2>
 80053ae:	f108 0801 	add.w	r8, r8, #1
 80053b2:	e7ec      	b.n	800538e <_printf_float+0x34e>
 80053b4:	4613      	mov	r3, r2
 80053b6:	4631      	mov	r1, r6
 80053b8:	4642      	mov	r2, r8
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b8      	blx	r7
 80053be:	3001      	adds	r0, #1
 80053c0:	d1c0      	bne.n	8005344 <_printf_float+0x304>
 80053c2:	e69e      	b.n	8005102 <_printf_float+0xc2>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	9205      	str	r2, [sp, #20]
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f ae97 	beq.w	8005102 <_printf_float+0xc2>
 80053d4:	9a05      	ldr	r2, [sp, #20]
 80053d6:	f10b 0b01 	add.w	fp, fp, #1
 80053da:	e7b9      	b.n	8005350 <_printf_float+0x310>
 80053dc:	ee18 3a10 	vmov	r3, s16
 80053e0:	4652      	mov	r2, sl
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	d1be      	bne.n	800536a <_printf_float+0x32a>
 80053ec:	e689      	b.n	8005102 <_printf_float+0xc2>
 80053ee:	9a05      	ldr	r2, [sp, #20]
 80053f0:	464b      	mov	r3, r9
 80053f2:	4442      	add	r2, r8
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	d1c1      	bne.n	8005382 <_printf_float+0x342>
 80053fe:	e680      	b.n	8005102 <_printf_float+0xc2>
 8005400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005402:	2a01      	cmp	r2, #1
 8005404:	dc01      	bgt.n	800540a <_printf_float+0x3ca>
 8005406:	07db      	lsls	r3, r3, #31
 8005408:	d538      	bpl.n	800547c <_printf_float+0x43c>
 800540a:	2301      	movs	r3, #1
 800540c:	4642      	mov	r2, r8
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f ae74 	beq.w	8005102 <_printf_float+0xc2>
 800541a:	ee18 3a10 	vmov	r3, s16
 800541e:	4652      	mov	r2, sl
 8005420:	4631      	mov	r1, r6
 8005422:	4628      	mov	r0, r5
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	f43f ae6b 	beq.w	8005102 <_printf_float+0xc2>
 800542c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005430:	2200      	movs	r2, #0
 8005432:	2300      	movs	r3, #0
 8005434:	f7fb fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8005438:	b9d8      	cbnz	r0, 8005472 <_printf_float+0x432>
 800543a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543c:	f108 0201 	add.w	r2, r8, #1
 8005440:	3b01      	subs	r3, #1
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	d10e      	bne.n	800546a <_printf_float+0x42a>
 800544c:	e659      	b.n	8005102 <_printf_float+0xc2>
 800544e:	2301      	movs	r3, #1
 8005450:	4652      	mov	r2, sl
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f ae52 	beq.w	8005102 <_printf_float+0xc2>
 800545e:	f108 0801 	add.w	r8, r8, #1
 8005462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005464:	3b01      	subs	r3, #1
 8005466:	4543      	cmp	r3, r8
 8005468:	dcf1      	bgt.n	800544e <_printf_float+0x40e>
 800546a:	464b      	mov	r3, r9
 800546c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005470:	e6dc      	b.n	800522c <_printf_float+0x1ec>
 8005472:	f04f 0800 	mov.w	r8, #0
 8005476:	f104 0a1a 	add.w	sl, r4, #26
 800547a:	e7f2      	b.n	8005462 <_printf_float+0x422>
 800547c:	2301      	movs	r3, #1
 800547e:	4642      	mov	r2, r8
 8005480:	e7df      	b.n	8005442 <_printf_float+0x402>
 8005482:	2301      	movs	r3, #1
 8005484:	464a      	mov	r2, r9
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	47b8      	blx	r7
 800548c:	3001      	adds	r0, #1
 800548e:	f43f ae38 	beq.w	8005102 <_printf_float+0xc2>
 8005492:	f108 0801 	add.w	r8, r8, #1
 8005496:	68e3      	ldr	r3, [r4, #12]
 8005498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800549a:	1a5b      	subs	r3, r3, r1
 800549c:	4543      	cmp	r3, r8
 800549e:	dcf0      	bgt.n	8005482 <_printf_float+0x442>
 80054a0:	e6fa      	b.n	8005298 <_printf_float+0x258>
 80054a2:	f04f 0800 	mov.w	r8, #0
 80054a6:	f104 0919 	add.w	r9, r4, #25
 80054aa:	e7f4      	b.n	8005496 <_printf_float+0x456>

080054ac <_printf_common>:
 80054ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b0:	4616      	mov	r6, r2
 80054b2:	4699      	mov	r9, r3
 80054b4:	688a      	ldr	r2, [r1, #8]
 80054b6:	690b      	ldr	r3, [r1, #16]
 80054b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054bc:	4293      	cmp	r3, r2
 80054be:	bfb8      	it	lt
 80054c0:	4613      	movlt	r3, r2
 80054c2:	6033      	str	r3, [r6, #0]
 80054c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054c8:	4607      	mov	r7, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	b10a      	cbz	r2, 80054d2 <_printf_common+0x26>
 80054ce:	3301      	adds	r3, #1
 80054d0:	6033      	str	r3, [r6, #0]
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	0699      	lsls	r1, r3, #26
 80054d6:	bf42      	ittt	mi
 80054d8:	6833      	ldrmi	r3, [r6, #0]
 80054da:	3302      	addmi	r3, #2
 80054dc:	6033      	strmi	r3, [r6, #0]
 80054de:	6825      	ldr	r5, [r4, #0]
 80054e0:	f015 0506 	ands.w	r5, r5, #6
 80054e4:	d106      	bne.n	80054f4 <_printf_common+0x48>
 80054e6:	f104 0a19 	add.w	sl, r4, #25
 80054ea:	68e3      	ldr	r3, [r4, #12]
 80054ec:	6832      	ldr	r2, [r6, #0]
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	42ab      	cmp	r3, r5
 80054f2:	dc26      	bgt.n	8005542 <_printf_common+0x96>
 80054f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054f8:	1e13      	subs	r3, r2, #0
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	bf18      	it	ne
 80054fe:	2301      	movne	r3, #1
 8005500:	0692      	lsls	r2, r2, #26
 8005502:	d42b      	bmi.n	800555c <_printf_common+0xb0>
 8005504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005508:	4649      	mov	r1, r9
 800550a:	4638      	mov	r0, r7
 800550c:	47c0      	blx	r8
 800550e:	3001      	adds	r0, #1
 8005510:	d01e      	beq.n	8005550 <_printf_common+0xa4>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	68e5      	ldr	r5, [r4, #12]
 8005516:	6832      	ldr	r2, [r6, #0]
 8005518:	f003 0306 	and.w	r3, r3, #6
 800551c:	2b04      	cmp	r3, #4
 800551e:	bf08      	it	eq
 8005520:	1aad      	subeq	r5, r5, r2
 8005522:	68a3      	ldr	r3, [r4, #8]
 8005524:	6922      	ldr	r2, [r4, #16]
 8005526:	bf0c      	ite	eq
 8005528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800552c:	2500      	movne	r5, #0
 800552e:	4293      	cmp	r3, r2
 8005530:	bfc4      	itt	gt
 8005532:	1a9b      	subgt	r3, r3, r2
 8005534:	18ed      	addgt	r5, r5, r3
 8005536:	2600      	movs	r6, #0
 8005538:	341a      	adds	r4, #26
 800553a:	42b5      	cmp	r5, r6
 800553c:	d11a      	bne.n	8005574 <_printf_common+0xc8>
 800553e:	2000      	movs	r0, #0
 8005540:	e008      	b.n	8005554 <_printf_common+0xa8>
 8005542:	2301      	movs	r3, #1
 8005544:	4652      	mov	r2, sl
 8005546:	4649      	mov	r1, r9
 8005548:	4638      	mov	r0, r7
 800554a:	47c0      	blx	r8
 800554c:	3001      	adds	r0, #1
 800554e:	d103      	bne.n	8005558 <_printf_common+0xac>
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005558:	3501      	adds	r5, #1
 800555a:	e7c6      	b.n	80054ea <_printf_common+0x3e>
 800555c:	18e1      	adds	r1, r4, r3
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	2030      	movs	r0, #48	; 0x30
 8005562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005566:	4422      	add	r2, r4
 8005568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800556c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005570:	3302      	adds	r3, #2
 8005572:	e7c7      	b.n	8005504 <_printf_common+0x58>
 8005574:	2301      	movs	r3, #1
 8005576:	4622      	mov	r2, r4
 8005578:	4649      	mov	r1, r9
 800557a:	4638      	mov	r0, r7
 800557c:	47c0      	blx	r8
 800557e:	3001      	adds	r0, #1
 8005580:	d0e6      	beq.n	8005550 <_printf_common+0xa4>
 8005582:	3601      	adds	r6, #1
 8005584:	e7d9      	b.n	800553a <_printf_common+0x8e>
	...

08005588 <_printf_i>:
 8005588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800558c:	7e0f      	ldrb	r7, [r1, #24]
 800558e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005590:	2f78      	cmp	r7, #120	; 0x78
 8005592:	4691      	mov	r9, r2
 8005594:	4680      	mov	r8, r0
 8005596:	460c      	mov	r4, r1
 8005598:	469a      	mov	sl, r3
 800559a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800559e:	d807      	bhi.n	80055b0 <_printf_i+0x28>
 80055a0:	2f62      	cmp	r7, #98	; 0x62
 80055a2:	d80a      	bhi.n	80055ba <_printf_i+0x32>
 80055a4:	2f00      	cmp	r7, #0
 80055a6:	f000 80d8 	beq.w	800575a <_printf_i+0x1d2>
 80055aa:	2f58      	cmp	r7, #88	; 0x58
 80055ac:	f000 80a3 	beq.w	80056f6 <_printf_i+0x16e>
 80055b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055b8:	e03a      	b.n	8005630 <_printf_i+0xa8>
 80055ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055be:	2b15      	cmp	r3, #21
 80055c0:	d8f6      	bhi.n	80055b0 <_printf_i+0x28>
 80055c2:	a101      	add	r1, pc, #4	; (adr r1, 80055c8 <_printf_i+0x40>)
 80055c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055c8:	08005621 	.word	0x08005621
 80055cc:	08005635 	.word	0x08005635
 80055d0:	080055b1 	.word	0x080055b1
 80055d4:	080055b1 	.word	0x080055b1
 80055d8:	080055b1 	.word	0x080055b1
 80055dc:	080055b1 	.word	0x080055b1
 80055e0:	08005635 	.word	0x08005635
 80055e4:	080055b1 	.word	0x080055b1
 80055e8:	080055b1 	.word	0x080055b1
 80055ec:	080055b1 	.word	0x080055b1
 80055f0:	080055b1 	.word	0x080055b1
 80055f4:	08005741 	.word	0x08005741
 80055f8:	08005665 	.word	0x08005665
 80055fc:	08005723 	.word	0x08005723
 8005600:	080055b1 	.word	0x080055b1
 8005604:	080055b1 	.word	0x080055b1
 8005608:	08005763 	.word	0x08005763
 800560c:	080055b1 	.word	0x080055b1
 8005610:	08005665 	.word	0x08005665
 8005614:	080055b1 	.word	0x080055b1
 8005618:	080055b1 	.word	0x080055b1
 800561c:	0800572b 	.word	0x0800572b
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	1d1a      	adds	r2, r3, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	602a      	str	r2, [r5, #0]
 8005628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800562c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005630:	2301      	movs	r3, #1
 8005632:	e0a3      	b.n	800577c <_printf_i+0x1f4>
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	6829      	ldr	r1, [r5, #0]
 8005638:	0606      	lsls	r6, r0, #24
 800563a:	f101 0304 	add.w	r3, r1, #4
 800563e:	d50a      	bpl.n	8005656 <_printf_i+0xce>
 8005640:	680e      	ldr	r6, [r1, #0]
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	2e00      	cmp	r6, #0
 8005646:	da03      	bge.n	8005650 <_printf_i+0xc8>
 8005648:	232d      	movs	r3, #45	; 0x2d
 800564a:	4276      	negs	r6, r6
 800564c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005650:	485e      	ldr	r0, [pc, #376]	; (80057cc <_printf_i+0x244>)
 8005652:	230a      	movs	r3, #10
 8005654:	e019      	b.n	800568a <_printf_i+0x102>
 8005656:	680e      	ldr	r6, [r1, #0]
 8005658:	602b      	str	r3, [r5, #0]
 800565a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800565e:	bf18      	it	ne
 8005660:	b236      	sxthne	r6, r6
 8005662:	e7ef      	b.n	8005644 <_printf_i+0xbc>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	6820      	ldr	r0, [r4, #0]
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	6029      	str	r1, [r5, #0]
 800566c:	0601      	lsls	r1, r0, #24
 800566e:	d501      	bpl.n	8005674 <_printf_i+0xec>
 8005670:	681e      	ldr	r6, [r3, #0]
 8005672:	e002      	b.n	800567a <_printf_i+0xf2>
 8005674:	0646      	lsls	r6, r0, #25
 8005676:	d5fb      	bpl.n	8005670 <_printf_i+0xe8>
 8005678:	881e      	ldrh	r6, [r3, #0]
 800567a:	4854      	ldr	r0, [pc, #336]	; (80057cc <_printf_i+0x244>)
 800567c:	2f6f      	cmp	r7, #111	; 0x6f
 800567e:	bf0c      	ite	eq
 8005680:	2308      	moveq	r3, #8
 8005682:	230a      	movne	r3, #10
 8005684:	2100      	movs	r1, #0
 8005686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800568a:	6865      	ldr	r5, [r4, #4]
 800568c:	60a5      	str	r5, [r4, #8]
 800568e:	2d00      	cmp	r5, #0
 8005690:	bfa2      	ittt	ge
 8005692:	6821      	ldrge	r1, [r4, #0]
 8005694:	f021 0104 	bicge.w	r1, r1, #4
 8005698:	6021      	strge	r1, [r4, #0]
 800569a:	b90e      	cbnz	r6, 80056a0 <_printf_i+0x118>
 800569c:	2d00      	cmp	r5, #0
 800569e:	d04d      	beq.n	800573c <_printf_i+0x1b4>
 80056a0:	4615      	mov	r5, r2
 80056a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056a6:	fb03 6711 	mls	r7, r3, r1, r6
 80056aa:	5dc7      	ldrb	r7, [r0, r7]
 80056ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056b0:	4637      	mov	r7, r6
 80056b2:	42bb      	cmp	r3, r7
 80056b4:	460e      	mov	r6, r1
 80056b6:	d9f4      	bls.n	80056a2 <_printf_i+0x11a>
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d10b      	bne.n	80056d4 <_printf_i+0x14c>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07de      	lsls	r6, r3, #31
 80056c0:	d508      	bpl.n	80056d4 <_printf_i+0x14c>
 80056c2:	6923      	ldr	r3, [r4, #16]
 80056c4:	6861      	ldr	r1, [r4, #4]
 80056c6:	4299      	cmp	r1, r3
 80056c8:	bfde      	ittt	le
 80056ca:	2330      	movle	r3, #48	; 0x30
 80056cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056d4:	1b52      	subs	r2, r2, r5
 80056d6:	6122      	str	r2, [r4, #16]
 80056d8:	f8cd a000 	str.w	sl, [sp]
 80056dc:	464b      	mov	r3, r9
 80056de:	aa03      	add	r2, sp, #12
 80056e0:	4621      	mov	r1, r4
 80056e2:	4640      	mov	r0, r8
 80056e4:	f7ff fee2 	bl	80054ac <_printf_common>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d14c      	bne.n	8005786 <_printf_i+0x1fe>
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	b004      	add	sp, #16
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	4835      	ldr	r0, [pc, #212]	; (80057cc <_printf_i+0x244>)
 80056f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056fc:	6829      	ldr	r1, [r5, #0]
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	f851 6b04 	ldr.w	r6, [r1], #4
 8005704:	6029      	str	r1, [r5, #0]
 8005706:	061d      	lsls	r5, r3, #24
 8005708:	d514      	bpl.n	8005734 <_printf_i+0x1ac>
 800570a:	07df      	lsls	r7, r3, #31
 800570c:	bf44      	itt	mi
 800570e:	f043 0320 	orrmi.w	r3, r3, #32
 8005712:	6023      	strmi	r3, [r4, #0]
 8005714:	b91e      	cbnz	r6, 800571e <_printf_i+0x196>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	f023 0320 	bic.w	r3, r3, #32
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	2310      	movs	r3, #16
 8005720:	e7b0      	b.n	8005684 <_printf_i+0xfc>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	f043 0320 	orr.w	r3, r3, #32
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	2378      	movs	r3, #120	; 0x78
 800572c:	4828      	ldr	r0, [pc, #160]	; (80057d0 <_printf_i+0x248>)
 800572e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005732:	e7e3      	b.n	80056fc <_printf_i+0x174>
 8005734:	0659      	lsls	r1, r3, #25
 8005736:	bf48      	it	mi
 8005738:	b2b6      	uxthmi	r6, r6
 800573a:	e7e6      	b.n	800570a <_printf_i+0x182>
 800573c:	4615      	mov	r5, r2
 800573e:	e7bb      	b.n	80056b8 <_printf_i+0x130>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	6826      	ldr	r6, [r4, #0]
 8005744:	6961      	ldr	r1, [r4, #20]
 8005746:	1d18      	adds	r0, r3, #4
 8005748:	6028      	str	r0, [r5, #0]
 800574a:	0635      	lsls	r5, r6, #24
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	d501      	bpl.n	8005754 <_printf_i+0x1cc>
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	e002      	b.n	800575a <_printf_i+0x1d2>
 8005754:	0670      	lsls	r0, r6, #25
 8005756:	d5fb      	bpl.n	8005750 <_printf_i+0x1c8>
 8005758:	8019      	strh	r1, [r3, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	6123      	str	r3, [r4, #16]
 800575e:	4615      	mov	r5, r2
 8005760:	e7ba      	b.n	80056d8 <_printf_i+0x150>
 8005762:	682b      	ldr	r3, [r5, #0]
 8005764:	1d1a      	adds	r2, r3, #4
 8005766:	602a      	str	r2, [r5, #0]
 8005768:	681d      	ldr	r5, [r3, #0]
 800576a:	6862      	ldr	r2, [r4, #4]
 800576c:	2100      	movs	r1, #0
 800576e:	4628      	mov	r0, r5
 8005770:	f7fa fd36 	bl	80001e0 <memchr>
 8005774:	b108      	cbz	r0, 800577a <_printf_i+0x1f2>
 8005776:	1b40      	subs	r0, r0, r5
 8005778:	6060      	str	r0, [r4, #4]
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	2300      	movs	r3, #0
 8005780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005784:	e7a8      	b.n	80056d8 <_printf_i+0x150>
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	462a      	mov	r2, r5
 800578a:	4649      	mov	r1, r9
 800578c:	4640      	mov	r0, r8
 800578e:	47d0      	blx	sl
 8005790:	3001      	adds	r0, #1
 8005792:	d0ab      	beq.n	80056ec <_printf_i+0x164>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	079b      	lsls	r3, r3, #30
 8005798:	d413      	bmi.n	80057c2 <_printf_i+0x23a>
 800579a:	68e0      	ldr	r0, [r4, #12]
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	4298      	cmp	r0, r3
 80057a0:	bfb8      	it	lt
 80057a2:	4618      	movlt	r0, r3
 80057a4:	e7a4      	b.n	80056f0 <_printf_i+0x168>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4632      	mov	r2, r6
 80057aa:	4649      	mov	r1, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	47d0      	blx	sl
 80057b0:	3001      	adds	r0, #1
 80057b2:	d09b      	beq.n	80056ec <_printf_i+0x164>
 80057b4:	3501      	adds	r5, #1
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	9903      	ldr	r1, [sp, #12]
 80057ba:	1a5b      	subs	r3, r3, r1
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dcf2      	bgt.n	80057a6 <_printf_i+0x21e>
 80057c0:	e7eb      	b.n	800579a <_printf_i+0x212>
 80057c2:	2500      	movs	r5, #0
 80057c4:	f104 0619 	add.w	r6, r4, #25
 80057c8:	e7f5      	b.n	80057b6 <_printf_i+0x22e>
 80057ca:	bf00      	nop
 80057cc:	0801a9ee 	.word	0x0801a9ee
 80057d0:	0801a9ff 	.word	0x0801a9ff

080057d4 <iprintf>:
 80057d4:	b40f      	push	{r0, r1, r2, r3}
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <iprintf+0x2c>)
 80057d8:	b513      	push	{r0, r1, r4, lr}
 80057da:	681c      	ldr	r4, [r3, #0]
 80057dc:	b124      	cbz	r4, 80057e8 <iprintf+0x14>
 80057de:	69a3      	ldr	r3, [r4, #24]
 80057e0:	b913      	cbnz	r3, 80057e8 <iprintf+0x14>
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 fee2 	bl	80065ac <__sinit>
 80057e8:	ab05      	add	r3, sp, #20
 80057ea:	9a04      	ldr	r2, [sp, #16]
 80057ec:	68a1      	ldr	r1, [r4, #8]
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	4620      	mov	r0, r4
 80057f2:	f001 fc3b 	bl	800706c <_vfiprintf_r>
 80057f6:	b002      	add	sp, #8
 80057f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057fc:	b004      	add	sp, #16
 80057fe:	4770      	bx	lr
 8005800:	2000000c 	.word	0x2000000c

08005804 <quorem>:
 8005804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	6903      	ldr	r3, [r0, #16]
 800580a:	690c      	ldr	r4, [r1, #16]
 800580c:	42a3      	cmp	r3, r4
 800580e:	4607      	mov	r7, r0
 8005810:	f2c0 8081 	blt.w	8005916 <quorem+0x112>
 8005814:	3c01      	subs	r4, #1
 8005816:	f101 0814 	add.w	r8, r1, #20
 800581a:	f100 0514 	add.w	r5, r0, #20
 800581e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800582c:	3301      	adds	r3, #1
 800582e:	429a      	cmp	r2, r3
 8005830:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005834:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005838:	fbb2 f6f3 	udiv	r6, r2, r3
 800583c:	d331      	bcc.n	80058a2 <quorem+0x9e>
 800583e:	f04f 0e00 	mov.w	lr, #0
 8005842:	4640      	mov	r0, r8
 8005844:	46ac      	mov	ip, r5
 8005846:	46f2      	mov	sl, lr
 8005848:	f850 2b04 	ldr.w	r2, [r0], #4
 800584c:	b293      	uxth	r3, r2
 800584e:	fb06 e303 	mla	r3, r6, r3, lr
 8005852:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005856:	b29b      	uxth	r3, r3
 8005858:	ebaa 0303 	sub.w	r3, sl, r3
 800585c:	f8dc a000 	ldr.w	sl, [ip]
 8005860:	0c12      	lsrs	r2, r2, #16
 8005862:	fa13 f38a 	uxtah	r3, r3, sl
 8005866:	fb06 e202 	mla	r2, r6, r2, lr
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	9b00      	ldr	r3, [sp, #0]
 800586e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005872:	b292      	uxth	r2, r2
 8005874:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800587c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005880:	4581      	cmp	r9, r0
 8005882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005886:	f84c 3b04 	str.w	r3, [ip], #4
 800588a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800588e:	d2db      	bcs.n	8005848 <quorem+0x44>
 8005890:	f855 300b 	ldr.w	r3, [r5, fp]
 8005894:	b92b      	cbnz	r3, 80058a2 <quorem+0x9e>
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	3b04      	subs	r3, #4
 800589a:	429d      	cmp	r5, r3
 800589c:	461a      	mov	r2, r3
 800589e:	d32e      	bcc.n	80058fe <quorem+0xfa>
 80058a0:	613c      	str	r4, [r7, #16]
 80058a2:	4638      	mov	r0, r7
 80058a4:	f001 f9c0 	bl	8006c28 <__mcmp>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	db24      	blt.n	80058f6 <quorem+0xf2>
 80058ac:	3601      	adds	r6, #1
 80058ae:	4628      	mov	r0, r5
 80058b0:	f04f 0c00 	mov.w	ip, #0
 80058b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80058b8:	f8d0 e000 	ldr.w	lr, [r0]
 80058bc:	b293      	uxth	r3, r2
 80058be:	ebac 0303 	sub.w	r3, ip, r3
 80058c2:	0c12      	lsrs	r2, r2, #16
 80058c4:	fa13 f38e 	uxtah	r3, r3, lr
 80058c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058d6:	45c1      	cmp	r9, r8
 80058d8:	f840 3b04 	str.w	r3, [r0], #4
 80058dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058e0:	d2e8      	bcs.n	80058b4 <quorem+0xb0>
 80058e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ea:	b922      	cbnz	r2, 80058f6 <quorem+0xf2>
 80058ec:	3b04      	subs	r3, #4
 80058ee:	429d      	cmp	r5, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	d30a      	bcc.n	800590a <quorem+0x106>
 80058f4:	613c      	str	r4, [r7, #16]
 80058f6:	4630      	mov	r0, r6
 80058f8:	b003      	add	sp, #12
 80058fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	3b04      	subs	r3, #4
 8005902:	2a00      	cmp	r2, #0
 8005904:	d1cc      	bne.n	80058a0 <quorem+0x9c>
 8005906:	3c01      	subs	r4, #1
 8005908:	e7c7      	b.n	800589a <quorem+0x96>
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	3b04      	subs	r3, #4
 800590e:	2a00      	cmp	r2, #0
 8005910:	d1f0      	bne.n	80058f4 <quorem+0xf0>
 8005912:	3c01      	subs	r4, #1
 8005914:	e7eb      	b.n	80058ee <quorem+0xea>
 8005916:	2000      	movs	r0, #0
 8005918:	e7ee      	b.n	80058f8 <quorem+0xf4>
 800591a:	0000      	movs	r0, r0
 800591c:	0000      	movs	r0, r0
	...

08005920 <_dtoa_r>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	ed2d 8b04 	vpush	{d8-d9}
 8005928:	ec57 6b10 	vmov	r6, r7, d0
 800592c:	b093      	sub	sp, #76	; 0x4c
 800592e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005934:	9106      	str	r1, [sp, #24]
 8005936:	ee10 aa10 	vmov	sl, s0
 800593a:	4604      	mov	r4, r0
 800593c:	9209      	str	r2, [sp, #36]	; 0x24
 800593e:	930c      	str	r3, [sp, #48]	; 0x30
 8005940:	46bb      	mov	fp, r7
 8005942:	b975      	cbnz	r5, 8005962 <_dtoa_r+0x42>
 8005944:	2010      	movs	r0, #16
 8005946:	f000 fed7 	bl	80066f8 <malloc>
 800594a:	4602      	mov	r2, r0
 800594c:	6260      	str	r0, [r4, #36]	; 0x24
 800594e:	b920      	cbnz	r0, 800595a <_dtoa_r+0x3a>
 8005950:	4ba7      	ldr	r3, [pc, #668]	; (8005bf0 <_dtoa_r+0x2d0>)
 8005952:	21ea      	movs	r1, #234	; 0xea
 8005954:	48a7      	ldr	r0, [pc, #668]	; (8005bf4 <_dtoa_r+0x2d4>)
 8005956:	f001 fddf 	bl	8007518 <__assert_func>
 800595a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800595e:	6005      	str	r5, [r0, #0]
 8005960:	60c5      	str	r5, [r0, #12]
 8005962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005964:	6819      	ldr	r1, [r3, #0]
 8005966:	b151      	cbz	r1, 800597e <_dtoa_r+0x5e>
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	604a      	str	r2, [r1, #4]
 800596c:	2301      	movs	r3, #1
 800596e:	4093      	lsls	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
 8005972:	4620      	mov	r0, r4
 8005974:	f000 ff16 	bl	80067a4 <_Bfree>
 8005978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	1e3b      	subs	r3, r7, #0
 8005980:	bfaa      	itet	ge
 8005982:	2300      	movge	r3, #0
 8005984:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005988:	f8c8 3000 	strge.w	r3, [r8]
 800598c:	4b9a      	ldr	r3, [pc, #616]	; (8005bf8 <_dtoa_r+0x2d8>)
 800598e:	bfbc      	itt	lt
 8005990:	2201      	movlt	r2, #1
 8005992:	f8c8 2000 	strlt.w	r2, [r8]
 8005996:	ea33 030b 	bics.w	r3, r3, fp
 800599a:	d11b      	bne.n	80059d4 <_dtoa_r+0xb4>
 800599c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800599e:	f242 730f 	movw	r3, #9999	; 0x270f
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059a8:	4333      	orrs	r3, r6
 80059aa:	f000 8592 	beq.w	80064d2 <_dtoa_r+0xbb2>
 80059ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b0:	b963      	cbnz	r3, 80059cc <_dtoa_r+0xac>
 80059b2:	4b92      	ldr	r3, [pc, #584]	; (8005bfc <_dtoa_r+0x2dc>)
 80059b4:	e022      	b.n	80059fc <_dtoa_r+0xdc>
 80059b6:	4b92      	ldr	r3, [pc, #584]	; (8005c00 <_dtoa_r+0x2e0>)
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	3308      	adds	r3, #8
 80059bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	9801      	ldr	r0, [sp, #4]
 80059c2:	b013      	add	sp, #76	; 0x4c
 80059c4:	ecbd 8b04 	vpop	{d8-d9}
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	4b8b      	ldr	r3, [pc, #556]	; (8005bfc <_dtoa_r+0x2dc>)
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	3303      	adds	r3, #3
 80059d2:	e7f3      	b.n	80059bc <_dtoa_r+0x9c>
 80059d4:	2200      	movs	r2, #0
 80059d6:	2300      	movs	r3, #0
 80059d8:	4650      	mov	r0, sl
 80059da:	4659      	mov	r1, fp
 80059dc:	f7fb f874 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e0:	ec4b ab19 	vmov	d9, sl, fp
 80059e4:	4680      	mov	r8, r0
 80059e6:	b158      	cbz	r0, 8005a00 <_dtoa_r+0xe0>
 80059e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ea:	2301      	movs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 856b 	beq.w	80064cc <_dtoa_r+0xbac>
 80059f6:	4883      	ldr	r0, [pc, #524]	; (8005c04 <_dtoa_r+0x2e4>)
 80059f8:	6018      	str	r0, [r3, #0]
 80059fa:	1e43      	subs	r3, r0, #1
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	e7df      	b.n	80059c0 <_dtoa_r+0xa0>
 8005a00:	ec4b ab10 	vmov	d0, sl, fp
 8005a04:	aa10      	add	r2, sp, #64	; 0x40
 8005a06:	a911      	add	r1, sp, #68	; 0x44
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f001 f9b3 	bl	8006d74 <__d2b>
 8005a0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005a12:	ee08 0a10 	vmov	s16, r0
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f000 8084 	beq.w	8005b24 <_dtoa_r+0x204>
 8005a1c:	ee19 3a90 	vmov	r3, s19
 8005a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a28:	4656      	mov	r6, sl
 8005a2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005a36:	4b74      	ldr	r3, [pc, #464]	; (8005c08 <_dtoa_r+0x2e8>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	f7fa fc23 	bl	8000288 <__aeabi_dsub>
 8005a42:	a365      	add	r3, pc, #404	; (adr r3, 8005bd8 <_dtoa_r+0x2b8>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fdd6 	bl	80005f8 <__aeabi_dmul>
 8005a4c:	a364      	add	r3, pc, #400	; (adr r3, 8005be0 <_dtoa_r+0x2c0>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f7fa fc1b 	bl	800028c <__adddf3>
 8005a56:	4606      	mov	r6, r0
 8005a58:	4628      	mov	r0, r5
 8005a5a:	460f      	mov	r7, r1
 8005a5c:	f7fa fd62 	bl	8000524 <__aeabi_i2d>
 8005a60:	a361      	add	r3, pc, #388	; (adr r3, 8005be8 <_dtoa_r+0x2c8>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fa fdc7 	bl	80005f8 <__aeabi_dmul>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4630      	mov	r0, r6
 8005a70:	4639      	mov	r1, r7
 8005a72:	f7fa fc0b 	bl	800028c <__adddf3>
 8005a76:	4606      	mov	r6, r0
 8005a78:	460f      	mov	r7, r1
 8005a7a:	f7fb f86d 	bl	8000b58 <__aeabi_d2iz>
 8005a7e:	2200      	movs	r2, #0
 8005a80:	9000      	str	r0, [sp, #0]
 8005a82:	2300      	movs	r3, #0
 8005a84:	4630      	mov	r0, r6
 8005a86:	4639      	mov	r1, r7
 8005a88:	f7fb f828 	bl	8000adc <__aeabi_dcmplt>
 8005a8c:	b150      	cbz	r0, 8005aa4 <_dtoa_r+0x184>
 8005a8e:	9800      	ldr	r0, [sp, #0]
 8005a90:	f7fa fd48 	bl	8000524 <__aeabi_i2d>
 8005a94:	4632      	mov	r2, r6
 8005a96:	463b      	mov	r3, r7
 8005a98:	f7fb f816 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a9c:	b910      	cbnz	r0, 8005aa4 <_dtoa_r+0x184>
 8005a9e:	9b00      	ldr	r3, [sp, #0]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	9b00      	ldr	r3, [sp, #0]
 8005aa6:	2b16      	cmp	r3, #22
 8005aa8:	d85a      	bhi.n	8005b60 <_dtoa_r+0x240>
 8005aaa:	9a00      	ldr	r2, [sp, #0]
 8005aac:	4b57      	ldr	r3, [pc, #348]	; (8005c0c <_dtoa_r+0x2ec>)
 8005aae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	ec51 0b19 	vmov	r0, r1, d9
 8005aba:	f7fb f80f 	bl	8000adc <__aeabi_dcmplt>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d050      	beq.n	8005b64 <_dtoa_r+0x244>
 8005ac2:	9b00      	ldr	r3, [sp, #0]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	930b      	str	r3, [sp, #44]	; 0x2c
 8005acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ace:	1b5d      	subs	r5, r3, r5
 8005ad0:	1e6b      	subs	r3, r5, #1
 8005ad2:	9305      	str	r3, [sp, #20]
 8005ad4:	bf45      	ittet	mi
 8005ad6:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ada:	9304      	strmi	r3, [sp, #16]
 8005adc:	2300      	movpl	r3, #0
 8005ade:	2300      	movmi	r3, #0
 8005ae0:	bf4c      	ite	mi
 8005ae2:	9305      	strmi	r3, [sp, #20]
 8005ae4:	9304      	strpl	r3, [sp, #16]
 8005ae6:	9b00      	ldr	r3, [sp, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	db3d      	blt.n	8005b68 <_dtoa_r+0x248>
 8005aec:	9b05      	ldr	r3, [sp, #20]
 8005aee:	9a00      	ldr	r2, [sp, #0]
 8005af0:	920a      	str	r2, [sp, #40]	; 0x28
 8005af2:	4413      	add	r3, r2
 8005af4:	9305      	str	r3, [sp, #20]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9307      	str	r3, [sp, #28]
 8005afa:	9b06      	ldr	r3, [sp, #24]
 8005afc:	2b09      	cmp	r3, #9
 8005afe:	f200 8089 	bhi.w	8005c14 <_dtoa_r+0x2f4>
 8005b02:	2b05      	cmp	r3, #5
 8005b04:	bfc4      	itt	gt
 8005b06:	3b04      	subgt	r3, #4
 8005b08:	9306      	strgt	r3, [sp, #24]
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	f1a3 0302 	sub.w	r3, r3, #2
 8005b10:	bfcc      	ite	gt
 8005b12:	2500      	movgt	r5, #0
 8005b14:	2501      	movle	r5, #1
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	f200 8087 	bhi.w	8005c2a <_dtoa_r+0x30a>
 8005b1c:	e8df f003 	tbb	[pc, r3]
 8005b20:	59383a2d 	.word	0x59383a2d
 8005b24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b28:	441d      	add	r5, r3
 8005b2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	bfc1      	itttt	gt
 8005b32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005b3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b42:	bfda      	itte	le
 8005b44:	f1c3 0320 	rsble	r3, r3, #32
 8005b48:	fa06 f003 	lslle.w	r0, r6, r3
 8005b4c:	4318      	orrgt	r0, r3
 8005b4e:	f7fa fcd9 	bl	8000504 <__aeabi_ui2d>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4606      	mov	r6, r0
 8005b56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b5a:	3d01      	subs	r5, #1
 8005b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8005b5e:	e76a      	b.n	8005a36 <_dtoa_r+0x116>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e7b2      	b.n	8005aca <_dtoa_r+0x1aa>
 8005b64:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b66:	e7b1      	b.n	8005acc <_dtoa_r+0x1ac>
 8005b68:	9b04      	ldr	r3, [sp, #16]
 8005b6a:	9a00      	ldr	r2, [sp, #0]
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	9304      	str	r3, [sp, #16]
 8005b70:	4253      	negs	r3, r2
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	2300      	movs	r3, #0
 8005b76:	930a      	str	r3, [sp, #40]	; 0x28
 8005b78:	e7bf      	b.n	8005afa <_dtoa_r+0x1da>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9308      	str	r3, [sp, #32]
 8005b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dc55      	bgt.n	8005c30 <_dtoa_r+0x310>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b8e:	e00c      	b.n	8005baa <_dtoa_r+0x28a>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e7f3      	b.n	8005b7c <_dtoa_r+0x25c>
 8005b94:	2300      	movs	r3, #0
 8005b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b98:	9308      	str	r3, [sp, #32]
 8005b9a:	9b00      	ldr	r3, [sp, #0]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	9302      	str	r3, [sp, #8]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	9303      	str	r3, [sp, #12]
 8005ba6:	bfb8      	it	lt
 8005ba8:	2301      	movlt	r3, #1
 8005baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005bac:	2200      	movs	r2, #0
 8005bae:	6042      	str	r2, [r0, #4]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	f102 0614 	add.w	r6, r2, #20
 8005bb6:	429e      	cmp	r6, r3
 8005bb8:	6841      	ldr	r1, [r0, #4]
 8005bba:	d93d      	bls.n	8005c38 <_dtoa_r+0x318>
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 fdb1 	bl	8006724 <_Balloc>
 8005bc2:	9001      	str	r0, [sp, #4]
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d13b      	bne.n	8005c40 <_dtoa_r+0x320>
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <_dtoa_r+0x2f0>)
 8005bca:	4602      	mov	r2, r0
 8005bcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005bd0:	e6c0      	b.n	8005954 <_dtoa_r+0x34>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e7df      	b.n	8005b96 <_dtoa_r+0x276>
 8005bd6:	bf00      	nop
 8005bd8:	636f4361 	.word	0x636f4361
 8005bdc:	3fd287a7 	.word	0x3fd287a7
 8005be0:	8b60c8b3 	.word	0x8b60c8b3
 8005be4:	3fc68a28 	.word	0x3fc68a28
 8005be8:	509f79fb 	.word	0x509f79fb
 8005bec:	3fd34413 	.word	0x3fd34413
 8005bf0:	0801aa1d 	.word	0x0801aa1d
 8005bf4:	0801aa34 	.word	0x0801aa34
 8005bf8:	7ff00000 	.word	0x7ff00000
 8005bfc:	0801aa19 	.word	0x0801aa19
 8005c00:	0801aa10 	.word	0x0801aa10
 8005c04:	0801a9ed 	.word	0x0801a9ed
 8005c08:	3ff80000 	.word	0x3ff80000
 8005c0c:	0801ab88 	.word	0x0801ab88
 8005c10:	0801aa8f 	.word	0x0801aa8f
 8005c14:	2501      	movs	r5, #1
 8005c16:	2300      	movs	r3, #0
 8005c18:	9306      	str	r3, [sp, #24]
 8005c1a:	9508      	str	r5, [sp, #32]
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	2312      	movs	r3, #18
 8005c28:	e7b0      	b.n	8005b8c <_dtoa_r+0x26c>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	9308      	str	r3, [sp, #32]
 8005c2e:	e7f5      	b.n	8005c1c <_dtoa_r+0x2fc>
 8005c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c36:	e7b8      	b.n	8005baa <_dtoa_r+0x28a>
 8005c38:	3101      	adds	r1, #1
 8005c3a:	6041      	str	r1, [r0, #4]
 8005c3c:	0052      	lsls	r2, r2, #1
 8005c3e:	e7b8      	b.n	8005bb2 <_dtoa_r+0x292>
 8005c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c42:	9a01      	ldr	r2, [sp, #4]
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	2b0e      	cmp	r3, #14
 8005c4a:	f200 809d 	bhi.w	8005d88 <_dtoa_r+0x468>
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	f000 809a 	beq.w	8005d88 <_dtoa_r+0x468>
 8005c54:	9b00      	ldr	r3, [sp, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	dd32      	ble.n	8005cc0 <_dtoa_r+0x3a0>
 8005c5a:	4ab7      	ldr	r2, [pc, #732]	; (8005f38 <_dtoa_r+0x618>)
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c68:	9b00      	ldr	r3, [sp, #0]
 8005c6a:	05d8      	lsls	r0, r3, #23
 8005c6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005c70:	d516      	bpl.n	8005ca0 <_dtoa_r+0x380>
 8005c72:	4bb2      	ldr	r3, [pc, #712]	; (8005f3c <_dtoa_r+0x61c>)
 8005c74:	ec51 0b19 	vmov	r0, r1, d9
 8005c78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c7c:	f7fa fde6 	bl	800084c <__aeabi_ddiv>
 8005c80:	f007 070f 	and.w	r7, r7, #15
 8005c84:	4682      	mov	sl, r0
 8005c86:	468b      	mov	fp, r1
 8005c88:	2503      	movs	r5, #3
 8005c8a:	4eac      	ldr	r6, [pc, #688]	; (8005f3c <_dtoa_r+0x61c>)
 8005c8c:	b957      	cbnz	r7, 8005ca4 <_dtoa_r+0x384>
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	4650      	mov	r0, sl
 8005c94:	4659      	mov	r1, fp
 8005c96:	f7fa fdd9 	bl	800084c <__aeabi_ddiv>
 8005c9a:	4682      	mov	sl, r0
 8005c9c:	468b      	mov	fp, r1
 8005c9e:	e028      	b.n	8005cf2 <_dtoa_r+0x3d2>
 8005ca0:	2502      	movs	r5, #2
 8005ca2:	e7f2      	b.n	8005c8a <_dtoa_r+0x36a>
 8005ca4:	07f9      	lsls	r1, r7, #31
 8005ca6:	d508      	bpl.n	8005cba <_dtoa_r+0x39a>
 8005ca8:	4640      	mov	r0, r8
 8005caa:	4649      	mov	r1, r9
 8005cac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cb0:	f7fa fca2 	bl	80005f8 <__aeabi_dmul>
 8005cb4:	3501      	adds	r5, #1
 8005cb6:	4680      	mov	r8, r0
 8005cb8:	4689      	mov	r9, r1
 8005cba:	107f      	asrs	r7, r7, #1
 8005cbc:	3608      	adds	r6, #8
 8005cbe:	e7e5      	b.n	8005c8c <_dtoa_r+0x36c>
 8005cc0:	f000 809b 	beq.w	8005dfa <_dtoa_r+0x4da>
 8005cc4:	9b00      	ldr	r3, [sp, #0]
 8005cc6:	4f9d      	ldr	r7, [pc, #628]	; (8005f3c <_dtoa_r+0x61c>)
 8005cc8:	425e      	negs	r6, r3
 8005cca:	4b9b      	ldr	r3, [pc, #620]	; (8005f38 <_dtoa_r+0x618>)
 8005ccc:	f006 020f 	and.w	r2, r6, #15
 8005cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	ec51 0b19 	vmov	r0, r1, d9
 8005cdc:	f7fa fc8c 	bl	80005f8 <__aeabi_dmul>
 8005ce0:	1136      	asrs	r6, r6, #4
 8005ce2:	4682      	mov	sl, r0
 8005ce4:	468b      	mov	fp, r1
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2502      	movs	r5, #2
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	d17a      	bne.n	8005de4 <_dtoa_r+0x4c4>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1d3      	bne.n	8005c9a <_dtoa_r+0x37a>
 8005cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8082 	beq.w	8005dfe <_dtoa_r+0x4de>
 8005cfa:	4b91      	ldr	r3, [pc, #580]	; (8005f40 <_dtoa_r+0x620>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	4650      	mov	r0, sl
 8005d00:	4659      	mov	r1, fp
 8005d02:	f7fa feeb 	bl	8000adc <__aeabi_dcmplt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d079      	beq.n	8005dfe <_dtoa_r+0x4de>
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d076      	beq.n	8005dfe <_dtoa_r+0x4de>
 8005d10:	9b02      	ldr	r3, [sp, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	dd36      	ble.n	8005d84 <_dtoa_r+0x464>
 8005d16:	9b00      	ldr	r3, [sp, #0]
 8005d18:	4650      	mov	r0, sl
 8005d1a:	4659      	mov	r1, fp
 8005d1c:	1e5f      	subs	r7, r3, #1
 8005d1e:	2200      	movs	r2, #0
 8005d20:	4b88      	ldr	r3, [pc, #544]	; (8005f44 <_dtoa_r+0x624>)
 8005d22:	f7fa fc69 	bl	80005f8 <__aeabi_dmul>
 8005d26:	9e02      	ldr	r6, [sp, #8]
 8005d28:	4682      	mov	sl, r0
 8005d2a:	468b      	mov	fp, r1
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f7fa fbf8 	bl	8000524 <__aeabi_i2d>
 8005d34:	4652      	mov	r2, sl
 8005d36:	465b      	mov	r3, fp
 8005d38:	f7fa fc5e 	bl	80005f8 <__aeabi_dmul>
 8005d3c:	4b82      	ldr	r3, [pc, #520]	; (8005f48 <_dtoa_r+0x628>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f7fa faa4 	bl	800028c <__adddf3>
 8005d44:	46d0      	mov	r8, sl
 8005d46:	46d9      	mov	r9, fp
 8005d48:	4682      	mov	sl, r0
 8005d4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	d158      	bne.n	8005e04 <_dtoa_r+0x4e4>
 8005d52:	4b7e      	ldr	r3, [pc, #504]	; (8005f4c <_dtoa_r+0x62c>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	4640      	mov	r0, r8
 8005d58:	4649      	mov	r1, r9
 8005d5a:	f7fa fa95 	bl	8000288 <__aeabi_dsub>
 8005d5e:	4652      	mov	r2, sl
 8005d60:	465b      	mov	r3, fp
 8005d62:	4680      	mov	r8, r0
 8005d64:	4689      	mov	r9, r1
 8005d66:	f7fa fed7 	bl	8000b18 <__aeabi_dcmpgt>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f040 8295 	bne.w	800629a <_dtoa_r+0x97a>
 8005d70:	4652      	mov	r2, sl
 8005d72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	f7fa feaf 	bl	8000adc <__aeabi_dcmplt>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f040 8289 	bne.w	8006296 <_dtoa_r+0x976>
 8005d84:	ec5b ab19 	vmov	sl, fp, d9
 8005d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f2c0 8148 	blt.w	8006020 <_dtoa_r+0x700>
 8005d90:	9a00      	ldr	r2, [sp, #0]
 8005d92:	2a0e      	cmp	r2, #14
 8005d94:	f300 8144 	bgt.w	8006020 <_dtoa_r+0x700>
 8005d98:	4b67      	ldr	r3, [pc, #412]	; (8005f38 <_dtoa_r+0x618>)
 8005d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f280 80d5 	bge.w	8005f54 <_dtoa_r+0x634>
 8005daa:	9b03      	ldr	r3, [sp, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f300 80d1 	bgt.w	8005f54 <_dtoa_r+0x634>
 8005db2:	f040 826f 	bne.w	8006294 <_dtoa_r+0x974>
 8005db6:	4b65      	ldr	r3, [pc, #404]	; (8005f4c <_dtoa_r+0x62c>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	4640      	mov	r0, r8
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	f7fa fc1b 	bl	80005f8 <__aeabi_dmul>
 8005dc2:	4652      	mov	r2, sl
 8005dc4:	465b      	mov	r3, fp
 8005dc6:	f7fa fe9d 	bl	8000b04 <__aeabi_dcmpge>
 8005dca:	9e03      	ldr	r6, [sp, #12]
 8005dcc:	4637      	mov	r7, r6
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	f040 8245 	bne.w	800625e <_dtoa_r+0x93e>
 8005dd4:	9d01      	ldr	r5, [sp, #4]
 8005dd6:	2331      	movs	r3, #49	; 0x31
 8005dd8:	f805 3b01 	strb.w	r3, [r5], #1
 8005ddc:	9b00      	ldr	r3, [sp, #0]
 8005dde:	3301      	adds	r3, #1
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	e240      	b.n	8006266 <_dtoa_r+0x946>
 8005de4:	07f2      	lsls	r2, r6, #31
 8005de6:	d505      	bpl.n	8005df4 <_dtoa_r+0x4d4>
 8005de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dec:	f7fa fc04 	bl	80005f8 <__aeabi_dmul>
 8005df0:	3501      	adds	r5, #1
 8005df2:	2301      	movs	r3, #1
 8005df4:	1076      	asrs	r6, r6, #1
 8005df6:	3708      	adds	r7, #8
 8005df8:	e777      	b.n	8005cea <_dtoa_r+0x3ca>
 8005dfa:	2502      	movs	r5, #2
 8005dfc:	e779      	b.n	8005cf2 <_dtoa_r+0x3d2>
 8005dfe:	9f00      	ldr	r7, [sp, #0]
 8005e00:	9e03      	ldr	r6, [sp, #12]
 8005e02:	e794      	b.n	8005d2e <_dtoa_r+0x40e>
 8005e04:	9901      	ldr	r1, [sp, #4]
 8005e06:	4b4c      	ldr	r3, [pc, #304]	; (8005f38 <_dtoa_r+0x618>)
 8005e08:	4431      	add	r1, r6
 8005e0a:	910d      	str	r1, [sp, #52]	; 0x34
 8005e0c:	9908      	ldr	r1, [sp, #32]
 8005e0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e16:	2900      	cmp	r1, #0
 8005e18:	d043      	beq.n	8005ea2 <_dtoa_r+0x582>
 8005e1a:	494d      	ldr	r1, [pc, #308]	; (8005f50 <_dtoa_r+0x630>)
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f7fa fd15 	bl	800084c <__aeabi_ddiv>
 8005e22:	4652      	mov	r2, sl
 8005e24:	465b      	mov	r3, fp
 8005e26:	f7fa fa2f 	bl	8000288 <__aeabi_dsub>
 8005e2a:	9d01      	ldr	r5, [sp, #4]
 8005e2c:	4682      	mov	sl, r0
 8005e2e:	468b      	mov	fp, r1
 8005e30:	4649      	mov	r1, r9
 8005e32:	4640      	mov	r0, r8
 8005e34:	f7fa fe90 	bl	8000b58 <__aeabi_d2iz>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	f7fa fb73 	bl	8000524 <__aeabi_i2d>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4640      	mov	r0, r8
 8005e44:	4649      	mov	r1, r9
 8005e46:	f7fa fa1f 	bl	8000288 <__aeabi_dsub>
 8005e4a:	3630      	adds	r6, #48	; 0x30
 8005e4c:	f805 6b01 	strb.w	r6, [r5], #1
 8005e50:	4652      	mov	r2, sl
 8005e52:	465b      	mov	r3, fp
 8005e54:	4680      	mov	r8, r0
 8005e56:	4689      	mov	r9, r1
 8005e58:	f7fa fe40 	bl	8000adc <__aeabi_dcmplt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d163      	bne.n	8005f28 <_dtoa_r+0x608>
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	4936      	ldr	r1, [pc, #216]	; (8005f40 <_dtoa_r+0x620>)
 8005e66:	2000      	movs	r0, #0
 8005e68:	f7fa fa0e 	bl	8000288 <__aeabi_dsub>
 8005e6c:	4652      	mov	r2, sl
 8005e6e:	465b      	mov	r3, fp
 8005e70:	f7fa fe34 	bl	8000adc <__aeabi_dcmplt>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f040 80b5 	bne.w	8005fe4 <_dtoa_r+0x6c4>
 8005e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e7c:	429d      	cmp	r5, r3
 8005e7e:	d081      	beq.n	8005d84 <_dtoa_r+0x464>
 8005e80:	4b30      	ldr	r3, [pc, #192]	; (8005f44 <_dtoa_r+0x624>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	4650      	mov	r0, sl
 8005e86:	4659      	mov	r1, fp
 8005e88:	f7fa fbb6 	bl	80005f8 <__aeabi_dmul>
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <_dtoa_r+0x624>)
 8005e8e:	4682      	mov	sl, r0
 8005e90:	468b      	mov	fp, r1
 8005e92:	4640      	mov	r0, r8
 8005e94:	4649      	mov	r1, r9
 8005e96:	2200      	movs	r2, #0
 8005e98:	f7fa fbae 	bl	80005f8 <__aeabi_dmul>
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	4689      	mov	r9, r1
 8005ea0:	e7c6      	b.n	8005e30 <_dtoa_r+0x510>
 8005ea2:	4650      	mov	r0, sl
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	f7fa fba7 	bl	80005f8 <__aeabi_dmul>
 8005eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eac:	9d01      	ldr	r5, [sp, #4]
 8005eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eb0:	4682      	mov	sl, r0
 8005eb2:	468b      	mov	fp, r1
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f7fa fe4e 	bl	8000b58 <__aeabi_d2iz>
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	f7fa fb31 	bl	8000524 <__aeabi_i2d>
 8005ec2:	3630      	adds	r6, #48	; 0x30
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4640      	mov	r0, r8
 8005eca:	4649      	mov	r1, r9
 8005ecc:	f7fa f9dc 	bl	8000288 <__aeabi_dsub>
 8005ed0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ed6:	429d      	cmp	r5, r3
 8005ed8:	4680      	mov	r8, r0
 8005eda:	4689      	mov	r9, r1
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	d124      	bne.n	8005f2c <_dtoa_r+0x60c>
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <_dtoa_r+0x630>)
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	4659      	mov	r1, fp
 8005ee8:	f7fa f9d0 	bl	800028c <__adddf3>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa fe10 	bl	8000b18 <__aeabi_dcmpgt>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d173      	bne.n	8005fe4 <_dtoa_r+0x6c4>
 8005efc:	4652      	mov	r2, sl
 8005efe:	465b      	mov	r3, fp
 8005f00:	4913      	ldr	r1, [pc, #76]	; (8005f50 <_dtoa_r+0x630>)
 8005f02:	2000      	movs	r0, #0
 8005f04:	f7fa f9c0 	bl	8000288 <__aeabi_dsub>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	4649      	mov	r1, r9
 8005f10:	f7fa fde4 	bl	8000adc <__aeabi_dcmplt>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	f43f af35 	beq.w	8005d84 <_dtoa_r+0x464>
 8005f1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f1c:	1e6b      	subs	r3, r5, #1
 8005f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f24:	2b30      	cmp	r3, #48	; 0x30
 8005f26:	d0f8      	beq.n	8005f1a <_dtoa_r+0x5fa>
 8005f28:	9700      	str	r7, [sp, #0]
 8005f2a:	e049      	b.n	8005fc0 <_dtoa_r+0x6a0>
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <_dtoa_r+0x624>)
 8005f2e:	f7fa fb63 	bl	80005f8 <__aeabi_dmul>
 8005f32:	4680      	mov	r8, r0
 8005f34:	4689      	mov	r9, r1
 8005f36:	e7bd      	b.n	8005eb4 <_dtoa_r+0x594>
 8005f38:	0801ab88 	.word	0x0801ab88
 8005f3c:	0801ab60 	.word	0x0801ab60
 8005f40:	3ff00000 	.word	0x3ff00000
 8005f44:	40240000 	.word	0x40240000
 8005f48:	401c0000 	.word	0x401c0000
 8005f4c:	40140000 	.word	0x40140000
 8005f50:	3fe00000 	.word	0x3fe00000
 8005f54:	9d01      	ldr	r5, [sp, #4]
 8005f56:	4656      	mov	r6, sl
 8005f58:	465f      	mov	r7, fp
 8005f5a:	4642      	mov	r2, r8
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	4630      	mov	r0, r6
 8005f60:	4639      	mov	r1, r7
 8005f62:	f7fa fc73 	bl	800084c <__aeabi_ddiv>
 8005f66:	f7fa fdf7 	bl	8000b58 <__aeabi_d2iz>
 8005f6a:	4682      	mov	sl, r0
 8005f6c:	f7fa fada 	bl	8000524 <__aeabi_i2d>
 8005f70:	4642      	mov	r2, r8
 8005f72:	464b      	mov	r3, r9
 8005f74:	f7fa fb40 	bl	80005f8 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f84:	f7fa f980 	bl	8000288 <__aeabi_dsub>
 8005f88:	f805 6b01 	strb.w	r6, [r5], #1
 8005f8c:	9e01      	ldr	r6, [sp, #4]
 8005f8e:	9f03      	ldr	r7, [sp, #12]
 8005f90:	1bae      	subs	r6, r5, r6
 8005f92:	42b7      	cmp	r7, r6
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	d135      	bne.n	8006006 <_dtoa_r+0x6e6>
 8005f9a:	f7fa f977 	bl	800028c <__adddf3>
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	f7fa fdb7 	bl	8000b18 <__aeabi_dcmpgt>
 8005faa:	b9d0      	cbnz	r0, 8005fe2 <_dtoa_r+0x6c2>
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	f7fa fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fb8:	b110      	cbz	r0, 8005fc0 <_dtoa_r+0x6a0>
 8005fba:	f01a 0f01 	tst.w	sl, #1
 8005fbe:	d110      	bne.n	8005fe2 <_dtoa_r+0x6c2>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	ee18 1a10 	vmov	r1, s16
 8005fc6:	f000 fbed 	bl	80067a4 <_Bfree>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9800      	ldr	r0, [sp, #0]
 8005fce:	702b      	strb	r3, [r5, #0]
 8005fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	6018      	str	r0, [r3, #0]
 8005fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f43f acf1 	beq.w	80059c0 <_dtoa_r+0xa0>
 8005fde:	601d      	str	r5, [r3, #0]
 8005fe0:	e4ee      	b.n	80059c0 <_dtoa_r+0xa0>
 8005fe2:	9f00      	ldr	r7, [sp, #0]
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fec:	2a39      	cmp	r2, #57	; 0x39
 8005fee:	d106      	bne.n	8005ffe <_dtoa_r+0x6de>
 8005ff0:	9a01      	ldr	r2, [sp, #4]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d1f7      	bne.n	8005fe6 <_dtoa_r+0x6c6>
 8005ff6:	9901      	ldr	r1, [sp, #4]
 8005ff8:	2230      	movs	r2, #48	; 0x30
 8005ffa:	3701      	adds	r7, #1
 8005ffc:	700a      	strb	r2, [r1, #0]
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	3201      	adds	r2, #1
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	e790      	b.n	8005f28 <_dtoa_r+0x608>
 8006006:	4ba6      	ldr	r3, [pc, #664]	; (80062a0 <_dtoa_r+0x980>)
 8006008:	2200      	movs	r2, #0
 800600a:	f7fa faf5 	bl	80005f8 <__aeabi_dmul>
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	f7fa fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800601a:	2800      	cmp	r0, #0
 800601c:	d09d      	beq.n	8005f5a <_dtoa_r+0x63a>
 800601e:	e7cf      	b.n	8005fc0 <_dtoa_r+0x6a0>
 8006020:	9a08      	ldr	r2, [sp, #32]
 8006022:	2a00      	cmp	r2, #0
 8006024:	f000 80d7 	beq.w	80061d6 <_dtoa_r+0x8b6>
 8006028:	9a06      	ldr	r2, [sp, #24]
 800602a:	2a01      	cmp	r2, #1
 800602c:	f300 80ba 	bgt.w	80061a4 <_dtoa_r+0x884>
 8006030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006032:	2a00      	cmp	r2, #0
 8006034:	f000 80b2 	beq.w	800619c <_dtoa_r+0x87c>
 8006038:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800603c:	9e07      	ldr	r6, [sp, #28]
 800603e:	9d04      	ldr	r5, [sp, #16]
 8006040:	9a04      	ldr	r2, [sp, #16]
 8006042:	441a      	add	r2, r3
 8006044:	9204      	str	r2, [sp, #16]
 8006046:	9a05      	ldr	r2, [sp, #20]
 8006048:	2101      	movs	r1, #1
 800604a:	441a      	add	r2, r3
 800604c:	4620      	mov	r0, r4
 800604e:	9205      	str	r2, [sp, #20]
 8006050:	f000 fc60 	bl	8006914 <__i2b>
 8006054:	4607      	mov	r7, r0
 8006056:	2d00      	cmp	r5, #0
 8006058:	dd0c      	ble.n	8006074 <_dtoa_r+0x754>
 800605a:	9b05      	ldr	r3, [sp, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	dd09      	ble.n	8006074 <_dtoa_r+0x754>
 8006060:	42ab      	cmp	r3, r5
 8006062:	9a04      	ldr	r2, [sp, #16]
 8006064:	bfa8      	it	ge
 8006066:	462b      	movge	r3, r5
 8006068:	1ad2      	subs	r2, r2, r3
 800606a:	9204      	str	r2, [sp, #16]
 800606c:	9a05      	ldr	r2, [sp, #20]
 800606e:	1aed      	subs	r5, r5, r3
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	b31b      	cbz	r3, 80060c0 <_dtoa_r+0x7a0>
 8006078:	9b08      	ldr	r3, [sp, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 80af 	beq.w	80061de <_dtoa_r+0x8be>
 8006080:	2e00      	cmp	r6, #0
 8006082:	dd13      	ble.n	80060ac <_dtoa_r+0x78c>
 8006084:	4639      	mov	r1, r7
 8006086:	4632      	mov	r2, r6
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fd03 	bl	8006a94 <__pow5mult>
 800608e:	ee18 2a10 	vmov	r2, s16
 8006092:	4601      	mov	r1, r0
 8006094:	4607      	mov	r7, r0
 8006096:	4620      	mov	r0, r4
 8006098:	f000 fc52 	bl	8006940 <__multiply>
 800609c:	ee18 1a10 	vmov	r1, s16
 80060a0:	4680      	mov	r8, r0
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 fb7e 	bl	80067a4 <_Bfree>
 80060a8:	ee08 8a10 	vmov	s16, r8
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	1b9a      	subs	r2, r3, r6
 80060b0:	d006      	beq.n	80060c0 <_dtoa_r+0x7a0>
 80060b2:	ee18 1a10 	vmov	r1, s16
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 fcec 	bl	8006a94 <__pow5mult>
 80060bc:	ee08 0a10 	vmov	s16, r0
 80060c0:	2101      	movs	r1, #1
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fc26 	bl	8006914 <__i2b>
 80060c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	4606      	mov	r6, r0
 80060ce:	f340 8088 	ble.w	80061e2 <_dtoa_r+0x8c2>
 80060d2:	461a      	mov	r2, r3
 80060d4:	4601      	mov	r1, r0
 80060d6:	4620      	mov	r0, r4
 80060d8:	f000 fcdc 	bl	8006a94 <__pow5mult>
 80060dc:	9b06      	ldr	r3, [sp, #24]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	4606      	mov	r6, r0
 80060e2:	f340 8081 	ble.w	80061e8 <_dtoa_r+0x8c8>
 80060e6:	f04f 0800 	mov.w	r8, #0
 80060ea:	6933      	ldr	r3, [r6, #16]
 80060ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060f0:	6918      	ldr	r0, [r3, #16]
 80060f2:	f000 fbbf 	bl	8006874 <__hi0bits>
 80060f6:	f1c0 0020 	rsb	r0, r0, #32
 80060fa:	9b05      	ldr	r3, [sp, #20]
 80060fc:	4418      	add	r0, r3
 80060fe:	f010 001f 	ands.w	r0, r0, #31
 8006102:	f000 8092 	beq.w	800622a <_dtoa_r+0x90a>
 8006106:	f1c0 0320 	rsb	r3, r0, #32
 800610a:	2b04      	cmp	r3, #4
 800610c:	f340 808a 	ble.w	8006224 <_dtoa_r+0x904>
 8006110:	f1c0 001c 	rsb	r0, r0, #28
 8006114:	9b04      	ldr	r3, [sp, #16]
 8006116:	4403      	add	r3, r0
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	4403      	add	r3, r0
 800611e:	4405      	add	r5, r0
 8006120:	9305      	str	r3, [sp, #20]
 8006122:	9b04      	ldr	r3, [sp, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	dd07      	ble.n	8006138 <_dtoa_r+0x818>
 8006128:	ee18 1a10 	vmov	r1, s16
 800612c:	461a      	mov	r2, r3
 800612e:	4620      	mov	r0, r4
 8006130:	f000 fd0a 	bl	8006b48 <__lshift>
 8006134:	ee08 0a10 	vmov	s16, r0
 8006138:	9b05      	ldr	r3, [sp, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	dd05      	ble.n	800614a <_dtoa_r+0x82a>
 800613e:	4631      	mov	r1, r6
 8006140:	461a      	mov	r2, r3
 8006142:	4620      	mov	r0, r4
 8006144:	f000 fd00 	bl	8006b48 <__lshift>
 8006148:	4606      	mov	r6, r0
 800614a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d06e      	beq.n	800622e <_dtoa_r+0x90e>
 8006150:	ee18 0a10 	vmov	r0, s16
 8006154:	4631      	mov	r1, r6
 8006156:	f000 fd67 	bl	8006c28 <__mcmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	da67      	bge.n	800622e <_dtoa_r+0x90e>
 800615e:	9b00      	ldr	r3, [sp, #0]
 8006160:	3b01      	subs	r3, #1
 8006162:	ee18 1a10 	vmov	r1, s16
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	220a      	movs	r2, #10
 800616a:	2300      	movs	r3, #0
 800616c:	4620      	mov	r0, r4
 800616e:	f000 fb3b 	bl	80067e8 <__multadd>
 8006172:	9b08      	ldr	r3, [sp, #32]
 8006174:	ee08 0a10 	vmov	s16, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 81b1 	beq.w	80064e0 <_dtoa_r+0xbc0>
 800617e:	2300      	movs	r3, #0
 8006180:	4639      	mov	r1, r7
 8006182:	220a      	movs	r2, #10
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fb2f 	bl	80067e8 <__multadd>
 800618a:	9b02      	ldr	r3, [sp, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	4607      	mov	r7, r0
 8006190:	f300 808e 	bgt.w	80062b0 <_dtoa_r+0x990>
 8006194:	9b06      	ldr	r3, [sp, #24]
 8006196:	2b02      	cmp	r3, #2
 8006198:	dc51      	bgt.n	800623e <_dtoa_r+0x91e>
 800619a:	e089      	b.n	80062b0 <_dtoa_r+0x990>
 800619c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800619e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061a2:	e74b      	b.n	800603c <_dtoa_r+0x71c>
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	1e5e      	subs	r6, r3, #1
 80061a8:	9b07      	ldr	r3, [sp, #28]
 80061aa:	42b3      	cmp	r3, r6
 80061ac:	bfbf      	itttt	lt
 80061ae:	9b07      	ldrlt	r3, [sp, #28]
 80061b0:	9607      	strlt	r6, [sp, #28]
 80061b2:	1af2      	sublt	r2, r6, r3
 80061b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061b6:	bfb6      	itet	lt
 80061b8:	189b      	addlt	r3, r3, r2
 80061ba:	1b9e      	subge	r6, r3, r6
 80061bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	bfb8      	it	lt
 80061c2:	2600      	movlt	r6, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bfb7      	itett	lt
 80061c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80061cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80061d0:	1a9d      	sublt	r5, r3, r2
 80061d2:	2300      	movlt	r3, #0
 80061d4:	e734      	b.n	8006040 <_dtoa_r+0x720>
 80061d6:	9e07      	ldr	r6, [sp, #28]
 80061d8:	9d04      	ldr	r5, [sp, #16]
 80061da:	9f08      	ldr	r7, [sp, #32]
 80061dc:	e73b      	b.n	8006056 <_dtoa_r+0x736>
 80061de:	9a07      	ldr	r2, [sp, #28]
 80061e0:	e767      	b.n	80060b2 <_dtoa_r+0x792>
 80061e2:	9b06      	ldr	r3, [sp, #24]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	dc18      	bgt.n	800621a <_dtoa_r+0x8fa>
 80061e8:	f1ba 0f00 	cmp.w	sl, #0
 80061ec:	d115      	bne.n	800621a <_dtoa_r+0x8fa>
 80061ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061f2:	b993      	cbnz	r3, 800621a <_dtoa_r+0x8fa>
 80061f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061f8:	0d1b      	lsrs	r3, r3, #20
 80061fa:	051b      	lsls	r3, r3, #20
 80061fc:	b183      	cbz	r3, 8006220 <_dtoa_r+0x900>
 80061fe:	9b04      	ldr	r3, [sp, #16]
 8006200:	3301      	adds	r3, #1
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	9b05      	ldr	r3, [sp, #20]
 8006206:	3301      	adds	r3, #1
 8006208:	9305      	str	r3, [sp, #20]
 800620a:	f04f 0801 	mov.w	r8, #1
 800620e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	f47f af6a 	bne.w	80060ea <_dtoa_r+0x7ca>
 8006216:	2001      	movs	r0, #1
 8006218:	e76f      	b.n	80060fa <_dtoa_r+0x7da>
 800621a:	f04f 0800 	mov.w	r8, #0
 800621e:	e7f6      	b.n	800620e <_dtoa_r+0x8ee>
 8006220:	4698      	mov	r8, r3
 8006222:	e7f4      	b.n	800620e <_dtoa_r+0x8ee>
 8006224:	f43f af7d 	beq.w	8006122 <_dtoa_r+0x802>
 8006228:	4618      	mov	r0, r3
 800622a:	301c      	adds	r0, #28
 800622c:	e772      	b.n	8006114 <_dtoa_r+0x7f4>
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	dc37      	bgt.n	80062a4 <_dtoa_r+0x984>
 8006234:	9b06      	ldr	r3, [sp, #24]
 8006236:	2b02      	cmp	r3, #2
 8006238:	dd34      	ble.n	80062a4 <_dtoa_r+0x984>
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	9302      	str	r3, [sp, #8]
 800623e:	9b02      	ldr	r3, [sp, #8]
 8006240:	b96b      	cbnz	r3, 800625e <_dtoa_r+0x93e>
 8006242:	4631      	mov	r1, r6
 8006244:	2205      	movs	r2, #5
 8006246:	4620      	mov	r0, r4
 8006248:	f000 face 	bl	80067e8 <__multadd>
 800624c:	4601      	mov	r1, r0
 800624e:	4606      	mov	r6, r0
 8006250:	ee18 0a10 	vmov	r0, s16
 8006254:	f000 fce8 	bl	8006c28 <__mcmp>
 8006258:	2800      	cmp	r0, #0
 800625a:	f73f adbb 	bgt.w	8005dd4 <_dtoa_r+0x4b4>
 800625e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006260:	9d01      	ldr	r5, [sp, #4]
 8006262:	43db      	mvns	r3, r3
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	4631      	mov	r1, r6
 800626c:	4620      	mov	r0, r4
 800626e:	f000 fa99 	bl	80067a4 <_Bfree>
 8006272:	2f00      	cmp	r7, #0
 8006274:	f43f aea4 	beq.w	8005fc0 <_dtoa_r+0x6a0>
 8006278:	f1b8 0f00 	cmp.w	r8, #0
 800627c:	d005      	beq.n	800628a <_dtoa_r+0x96a>
 800627e:	45b8      	cmp	r8, r7
 8006280:	d003      	beq.n	800628a <_dtoa_r+0x96a>
 8006282:	4641      	mov	r1, r8
 8006284:	4620      	mov	r0, r4
 8006286:	f000 fa8d 	bl	80067a4 <_Bfree>
 800628a:	4639      	mov	r1, r7
 800628c:	4620      	mov	r0, r4
 800628e:	f000 fa89 	bl	80067a4 <_Bfree>
 8006292:	e695      	b.n	8005fc0 <_dtoa_r+0x6a0>
 8006294:	2600      	movs	r6, #0
 8006296:	4637      	mov	r7, r6
 8006298:	e7e1      	b.n	800625e <_dtoa_r+0x93e>
 800629a:	9700      	str	r7, [sp, #0]
 800629c:	4637      	mov	r7, r6
 800629e:	e599      	b.n	8005dd4 <_dtoa_r+0x4b4>
 80062a0:	40240000 	.word	0x40240000
 80062a4:	9b08      	ldr	r3, [sp, #32]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 80ca 	beq.w	8006440 <_dtoa_r+0xb20>
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	9302      	str	r3, [sp, #8]
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	dd05      	ble.n	80062c0 <_dtoa_r+0x9a0>
 80062b4:	4639      	mov	r1, r7
 80062b6:	462a      	mov	r2, r5
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fc45 	bl	8006b48 <__lshift>
 80062be:	4607      	mov	r7, r0
 80062c0:	f1b8 0f00 	cmp.w	r8, #0
 80062c4:	d05b      	beq.n	800637e <_dtoa_r+0xa5e>
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fa2b 	bl	8006724 <_Balloc>
 80062ce:	4605      	mov	r5, r0
 80062d0:	b928      	cbnz	r0, 80062de <_dtoa_r+0x9be>
 80062d2:	4b87      	ldr	r3, [pc, #540]	; (80064f0 <_dtoa_r+0xbd0>)
 80062d4:	4602      	mov	r2, r0
 80062d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062da:	f7ff bb3b 	b.w	8005954 <_dtoa_r+0x34>
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	3202      	adds	r2, #2
 80062e2:	0092      	lsls	r2, r2, #2
 80062e4:	f107 010c 	add.w	r1, r7, #12
 80062e8:	300c      	adds	r0, #12
 80062ea:	f000 fa0d 	bl	8006708 <memcpy>
 80062ee:	2201      	movs	r2, #1
 80062f0:	4629      	mov	r1, r5
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 fc28 	bl	8006b48 <__lshift>
 80062f8:	9b01      	ldr	r3, [sp, #4]
 80062fa:	f103 0901 	add.w	r9, r3, #1
 80062fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006302:	4413      	add	r3, r2
 8006304:	9305      	str	r3, [sp, #20]
 8006306:	f00a 0301 	and.w	r3, sl, #1
 800630a:	46b8      	mov	r8, r7
 800630c:	9304      	str	r3, [sp, #16]
 800630e:	4607      	mov	r7, r0
 8006310:	4631      	mov	r1, r6
 8006312:	ee18 0a10 	vmov	r0, s16
 8006316:	f7ff fa75 	bl	8005804 <quorem>
 800631a:	4641      	mov	r1, r8
 800631c:	9002      	str	r0, [sp, #8]
 800631e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006322:	ee18 0a10 	vmov	r0, s16
 8006326:	f000 fc7f 	bl	8006c28 <__mcmp>
 800632a:	463a      	mov	r2, r7
 800632c:	9003      	str	r0, [sp, #12]
 800632e:	4631      	mov	r1, r6
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fc95 	bl	8006c60 <__mdiff>
 8006336:	68c2      	ldr	r2, [r0, #12]
 8006338:	f109 3bff 	add.w	fp, r9, #4294967295
 800633c:	4605      	mov	r5, r0
 800633e:	bb02      	cbnz	r2, 8006382 <_dtoa_r+0xa62>
 8006340:	4601      	mov	r1, r0
 8006342:	ee18 0a10 	vmov	r0, s16
 8006346:	f000 fc6f 	bl	8006c28 <__mcmp>
 800634a:	4602      	mov	r2, r0
 800634c:	4629      	mov	r1, r5
 800634e:	4620      	mov	r0, r4
 8006350:	9207      	str	r2, [sp, #28]
 8006352:	f000 fa27 	bl	80067a4 <_Bfree>
 8006356:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800635a:	ea43 0102 	orr.w	r1, r3, r2
 800635e:	9b04      	ldr	r3, [sp, #16]
 8006360:	430b      	orrs	r3, r1
 8006362:	464d      	mov	r5, r9
 8006364:	d10f      	bne.n	8006386 <_dtoa_r+0xa66>
 8006366:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800636a:	d02a      	beq.n	80063c2 <_dtoa_r+0xaa2>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	dd02      	ble.n	8006378 <_dtoa_r+0xa58>
 8006372:	9b02      	ldr	r3, [sp, #8]
 8006374:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006378:	f88b a000 	strb.w	sl, [fp]
 800637c:	e775      	b.n	800626a <_dtoa_r+0x94a>
 800637e:	4638      	mov	r0, r7
 8006380:	e7ba      	b.n	80062f8 <_dtoa_r+0x9d8>
 8006382:	2201      	movs	r2, #1
 8006384:	e7e2      	b.n	800634c <_dtoa_r+0xa2c>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	db04      	blt.n	8006396 <_dtoa_r+0xa76>
 800638c:	9906      	ldr	r1, [sp, #24]
 800638e:	430b      	orrs	r3, r1
 8006390:	9904      	ldr	r1, [sp, #16]
 8006392:	430b      	orrs	r3, r1
 8006394:	d122      	bne.n	80063dc <_dtoa_r+0xabc>
 8006396:	2a00      	cmp	r2, #0
 8006398:	ddee      	ble.n	8006378 <_dtoa_r+0xa58>
 800639a:	ee18 1a10 	vmov	r1, s16
 800639e:	2201      	movs	r2, #1
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 fbd1 	bl	8006b48 <__lshift>
 80063a6:	4631      	mov	r1, r6
 80063a8:	ee08 0a10 	vmov	s16, r0
 80063ac:	f000 fc3c 	bl	8006c28 <__mcmp>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	dc03      	bgt.n	80063bc <_dtoa_r+0xa9c>
 80063b4:	d1e0      	bne.n	8006378 <_dtoa_r+0xa58>
 80063b6:	f01a 0f01 	tst.w	sl, #1
 80063ba:	d0dd      	beq.n	8006378 <_dtoa_r+0xa58>
 80063bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063c0:	d1d7      	bne.n	8006372 <_dtoa_r+0xa52>
 80063c2:	2339      	movs	r3, #57	; 0x39
 80063c4:	f88b 3000 	strb.w	r3, [fp]
 80063c8:	462b      	mov	r3, r5
 80063ca:	461d      	mov	r5, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063d2:	2a39      	cmp	r2, #57	; 0x39
 80063d4:	d071      	beq.n	80064ba <_dtoa_r+0xb9a>
 80063d6:	3201      	adds	r2, #1
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	e746      	b.n	800626a <_dtoa_r+0x94a>
 80063dc:	2a00      	cmp	r2, #0
 80063de:	dd07      	ble.n	80063f0 <_dtoa_r+0xad0>
 80063e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063e4:	d0ed      	beq.n	80063c2 <_dtoa_r+0xaa2>
 80063e6:	f10a 0301 	add.w	r3, sl, #1
 80063ea:	f88b 3000 	strb.w	r3, [fp]
 80063ee:	e73c      	b.n	800626a <_dtoa_r+0x94a>
 80063f0:	9b05      	ldr	r3, [sp, #20]
 80063f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80063f6:	4599      	cmp	r9, r3
 80063f8:	d047      	beq.n	800648a <_dtoa_r+0xb6a>
 80063fa:	ee18 1a10 	vmov	r1, s16
 80063fe:	2300      	movs	r3, #0
 8006400:	220a      	movs	r2, #10
 8006402:	4620      	mov	r0, r4
 8006404:	f000 f9f0 	bl	80067e8 <__multadd>
 8006408:	45b8      	cmp	r8, r7
 800640a:	ee08 0a10 	vmov	s16, r0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	f04f 020a 	mov.w	r2, #10
 8006416:	4641      	mov	r1, r8
 8006418:	4620      	mov	r0, r4
 800641a:	d106      	bne.n	800642a <_dtoa_r+0xb0a>
 800641c:	f000 f9e4 	bl	80067e8 <__multadd>
 8006420:	4680      	mov	r8, r0
 8006422:	4607      	mov	r7, r0
 8006424:	f109 0901 	add.w	r9, r9, #1
 8006428:	e772      	b.n	8006310 <_dtoa_r+0x9f0>
 800642a:	f000 f9dd 	bl	80067e8 <__multadd>
 800642e:	4639      	mov	r1, r7
 8006430:	4680      	mov	r8, r0
 8006432:	2300      	movs	r3, #0
 8006434:	220a      	movs	r2, #10
 8006436:	4620      	mov	r0, r4
 8006438:	f000 f9d6 	bl	80067e8 <__multadd>
 800643c:	4607      	mov	r7, r0
 800643e:	e7f1      	b.n	8006424 <_dtoa_r+0xb04>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	9302      	str	r3, [sp, #8]
 8006444:	9d01      	ldr	r5, [sp, #4]
 8006446:	ee18 0a10 	vmov	r0, s16
 800644a:	4631      	mov	r1, r6
 800644c:	f7ff f9da 	bl	8005804 <quorem>
 8006450:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006454:	9b01      	ldr	r3, [sp, #4]
 8006456:	f805 ab01 	strb.w	sl, [r5], #1
 800645a:	1aea      	subs	r2, r5, r3
 800645c:	9b02      	ldr	r3, [sp, #8]
 800645e:	4293      	cmp	r3, r2
 8006460:	dd09      	ble.n	8006476 <_dtoa_r+0xb56>
 8006462:	ee18 1a10 	vmov	r1, s16
 8006466:	2300      	movs	r3, #0
 8006468:	220a      	movs	r2, #10
 800646a:	4620      	mov	r0, r4
 800646c:	f000 f9bc 	bl	80067e8 <__multadd>
 8006470:	ee08 0a10 	vmov	s16, r0
 8006474:	e7e7      	b.n	8006446 <_dtoa_r+0xb26>
 8006476:	9b02      	ldr	r3, [sp, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	bfc8      	it	gt
 800647c:	461d      	movgt	r5, r3
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	bfd8      	it	le
 8006482:	2501      	movle	r5, #1
 8006484:	441d      	add	r5, r3
 8006486:	f04f 0800 	mov.w	r8, #0
 800648a:	ee18 1a10 	vmov	r1, s16
 800648e:	2201      	movs	r2, #1
 8006490:	4620      	mov	r0, r4
 8006492:	f000 fb59 	bl	8006b48 <__lshift>
 8006496:	4631      	mov	r1, r6
 8006498:	ee08 0a10 	vmov	s16, r0
 800649c:	f000 fbc4 	bl	8006c28 <__mcmp>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	dc91      	bgt.n	80063c8 <_dtoa_r+0xaa8>
 80064a4:	d102      	bne.n	80064ac <_dtoa_r+0xb8c>
 80064a6:	f01a 0f01 	tst.w	sl, #1
 80064aa:	d18d      	bne.n	80063c8 <_dtoa_r+0xaa8>
 80064ac:	462b      	mov	r3, r5
 80064ae:	461d      	mov	r5, r3
 80064b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064b4:	2a30      	cmp	r2, #48	; 0x30
 80064b6:	d0fa      	beq.n	80064ae <_dtoa_r+0xb8e>
 80064b8:	e6d7      	b.n	800626a <_dtoa_r+0x94a>
 80064ba:	9a01      	ldr	r2, [sp, #4]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d184      	bne.n	80063ca <_dtoa_r+0xaaa>
 80064c0:	9b00      	ldr	r3, [sp, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	2331      	movs	r3, #49	; 0x31
 80064c8:	7013      	strb	r3, [r2, #0]
 80064ca:	e6ce      	b.n	800626a <_dtoa_r+0x94a>
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <_dtoa_r+0xbd4>)
 80064ce:	f7ff ba95 	b.w	80059fc <_dtoa_r+0xdc>
 80064d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f47f aa6e 	bne.w	80059b6 <_dtoa_r+0x96>
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <_dtoa_r+0xbd8>)
 80064dc:	f7ff ba8e 	b.w	80059fc <_dtoa_r+0xdc>
 80064e0:	9b02      	ldr	r3, [sp, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dcae      	bgt.n	8006444 <_dtoa_r+0xb24>
 80064e6:	9b06      	ldr	r3, [sp, #24]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	f73f aea8 	bgt.w	800623e <_dtoa_r+0x91e>
 80064ee:	e7a9      	b.n	8006444 <_dtoa_r+0xb24>
 80064f0:	0801aa8f 	.word	0x0801aa8f
 80064f4:	0801a9ec 	.word	0x0801a9ec
 80064f8:	0801aa10 	.word	0x0801aa10

080064fc <std>:
 80064fc:	2300      	movs	r3, #0
 80064fe:	b510      	push	{r4, lr}
 8006500:	4604      	mov	r4, r0
 8006502:	e9c0 3300 	strd	r3, r3, [r0]
 8006506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800650a:	6083      	str	r3, [r0, #8]
 800650c:	8181      	strh	r1, [r0, #12]
 800650e:	6643      	str	r3, [r0, #100]	; 0x64
 8006510:	81c2      	strh	r2, [r0, #14]
 8006512:	6183      	str	r3, [r0, #24]
 8006514:	4619      	mov	r1, r3
 8006516:	2208      	movs	r2, #8
 8006518:	305c      	adds	r0, #92	; 0x5c
 800651a:	f7fe fce9 	bl	8004ef0 <memset>
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <std+0x38>)
 8006520:	6263      	str	r3, [r4, #36]	; 0x24
 8006522:	4b05      	ldr	r3, [pc, #20]	; (8006538 <std+0x3c>)
 8006524:	62a3      	str	r3, [r4, #40]	; 0x28
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <std+0x40>)
 8006528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800652a:	4b05      	ldr	r3, [pc, #20]	; (8006540 <std+0x44>)
 800652c:	6224      	str	r4, [r4, #32]
 800652e:	6323      	str	r3, [r4, #48]	; 0x30
 8006530:	bd10      	pop	{r4, pc}
 8006532:	bf00      	nop
 8006534:	080072ed 	.word	0x080072ed
 8006538:	0800730f 	.word	0x0800730f
 800653c:	08007347 	.word	0x08007347
 8006540:	0800736b 	.word	0x0800736b

08006544 <_cleanup_r>:
 8006544:	4901      	ldr	r1, [pc, #4]	; (800654c <_cleanup_r+0x8>)
 8006546:	f000 b8af 	b.w	80066a8 <_fwalk_reent>
 800654a:	bf00      	nop
 800654c:	08007681 	.word	0x08007681

08006550 <__sfmoreglue>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	2268      	movs	r2, #104	; 0x68
 8006554:	1e4d      	subs	r5, r1, #1
 8006556:	4355      	muls	r5, r2
 8006558:	460e      	mov	r6, r1
 800655a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800655e:	f000 fce7 	bl	8006f30 <_malloc_r>
 8006562:	4604      	mov	r4, r0
 8006564:	b140      	cbz	r0, 8006578 <__sfmoreglue+0x28>
 8006566:	2100      	movs	r1, #0
 8006568:	e9c0 1600 	strd	r1, r6, [r0]
 800656c:	300c      	adds	r0, #12
 800656e:	60a0      	str	r0, [r4, #8]
 8006570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006574:	f7fe fcbc 	bl	8004ef0 <memset>
 8006578:	4620      	mov	r0, r4
 800657a:	bd70      	pop	{r4, r5, r6, pc}

0800657c <__sfp_lock_acquire>:
 800657c:	4801      	ldr	r0, [pc, #4]	; (8006584 <__sfp_lock_acquire+0x8>)
 800657e:	f000 b8b8 	b.w	80066f2 <__retarget_lock_acquire_recursive>
 8006582:	bf00      	nop
 8006584:	20002b19 	.word	0x20002b19

08006588 <__sfp_lock_release>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__sfp_lock_release+0x8>)
 800658a:	f000 b8b3 	b.w	80066f4 <__retarget_lock_release_recursive>
 800658e:	bf00      	nop
 8006590:	20002b19 	.word	0x20002b19

08006594 <__sinit_lock_acquire>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__sinit_lock_acquire+0x8>)
 8006596:	f000 b8ac 	b.w	80066f2 <__retarget_lock_acquire_recursive>
 800659a:	bf00      	nop
 800659c:	20002b1a 	.word	0x20002b1a

080065a0 <__sinit_lock_release>:
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <__sinit_lock_release+0x8>)
 80065a2:	f000 b8a7 	b.w	80066f4 <__retarget_lock_release_recursive>
 80065a6:	bf00      	nop
 80065a8:	20002b1a 	.word	0x20002b1a

080065ac <__sinit>:
 80065ac:	b510      	push	{r4, lr}
 80065ae:	4604      	mov	r4, r0
 80065b0:	f7ff fff0 	bl	8006594 <__sinit_lock_acquire>
 80065b4:	69a3      	ldr	r3, [r4, #24]
 80065b6:	b11b      	cbz	r3, 80065c0 <__sinit+0x14>
 80065b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065bc:	f7ff bff0 	b.w	80065a0 <__sinit_lock_release>
 80065c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065c4:	6523      	str	r3, [r4, #80]	; 0x50
 80065c6:	4b13      	ldr	r3, [pc, #76]	; (8006614 <__sinit+0x68>)
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <__sinit+0x6c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	bf04      	itt	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	61a3      	streq	r3, [r4, #24]
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f820 	bl	800661c <__sfp>
 80065dc:	6060      	str	r0, [r4, #4]
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 f81c 	bl	800661c <__sfp>
 80065e4:	60a0      	str	r0, [r4, #8]
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 f818 	bl	800661c <__sfp>
 80065ec:	2200      	movs	r2, #0
 80065ee:	60e0      	str	r0, [r4, #12]
 80065f0:	2104      	movs	r1, #4
 80065f2:	6860      	ldr	r0, [r4, #4]
 80065f4:	f7ff ff82 	bl	80064fc <std>
 80065f8:	68a0      	ldr	r0, [r4, #8]
 80065fa:	2201      	movs	r2, #1
 80065fc:	2109      	movs	r1, #9
 80065fe:	f7ff ff7d 	bl	80064fc <std>
 8006602:	68e0      	ldr	r0, [r4, #12]
 8006604:	2202      	movs	r2, #2
 8006606:	2112      	movs	r1, #18
 8006608:	f7ff ff78 	bl	80064fc <std>
 800660c:	2301      	movs	r3, #1
 800660e:	61a3      	str	r3, [r4, #24]
 8006610:	e7d2      	b.n	80065b8 <__sinit+0xc>
 8006612:	bf00      	nop
 8006614:	0801a9d8 	.word	0x0801a9d8
 8006618:	08006545 	.word	0x08006545

0800661c <__sfp>:
 800661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661e:	4607      	mov	r7, r0
 8006620:	f7ff ffac 	bl	800657c <__sfp_lock_acquire>
 8006624:	4b1e      	ldr	r3, [pc, #120]	; (80066a0 <__sfp+0x84>)
 8006626:	681e      	ldr	r6, [r3, #0]
 8006628:	69b3      	ldr	r3, [r6, #24]
 800662a:	b913      	cbnz	r3, 8006632 <__sfp+0x16>
 800662c:	4630      	mov	r0, r6
 800662e:	f7ff ffbd 	bl	80065ac <__sinit>
 8006632:	3648      	adds	r6, #72	; 0x48
 8006634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006638:	3b01      	subs	r3, #1
 800663a:	d503      	bpl.n	8006644 <__sfp+0x28>
 800663c:	6833      	ldr	r3, [r6, #0]
 800663e:	b30b      	cbz	r3, 8006684 <__sfp+0x68>
 8006640:	6836      	ldr	r6, [r6, #0]
 8006642:	e7f7      	b.n	8006634 <__sfp+0x18>
 8006644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006648:	b9d5      	cbnz	r5, 8006680 <__sfp+0x64>
 800664a:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <__sfp+0x88>)
 800664c:	60e3      	str	r3, [r4, #12]
 800664e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006652:	6665      	str	r5, [r4, #100]	; 0x64
 8006654:	f000 f84c 	bl	80066f0 <__retarget_lock_init_recursive>
 8006658:	f7ff ff96 	bl	8006588 <__sfp_lock_release>
 800665c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006660:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006664:	6025      	str	r5, [r4, #0]
 8006666:	61a5      	str	r5, [r4, #24]
 8006668:	2208      	movs	r2, #8
 800666a:	4629      	mov	r1, r5
 800666c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006670:	f7fe fc3e 	bl	8004ef0 <memset>
 8006674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800667c:	4620      	mov	r0, r4
 800667e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006680:	3468      	adds	r4, #104	; 0x68
 8006682:	e7d9      	b.n	8006638 <__sfp+0x1c>
 8006684:	2104      	movs	r1, #4
 8006686:	4638      	mov	r0, r7
 8006688:	f7ff ff62 	bl	8006550 <__sfmoreglue>
 800668c:	4604      	mov	r4, r0
 800668e:	6030      	str	r0, [r6, #0]
 8006690:	2800      	cmp	r0, #0
 8006692:	d1d5      	bne.n	8006640 <__sfp+0x24>
 8006694:	f7ff ff78 	bl	8006588 <__sfp_lock_release>
 8006698:	230c      	movs	r3, #12
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	e7ee      	b.n	800667c <__sfp+0x60>
 800669e:	bf00      	nop
 80066a0:	0801a9d8 	.word	0x0801a9d8
 80066a4:	ffff0001 	.word	0xffff0001

080066a8 <_fwalk_reent>:
 80066a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ac:	4606      	mov	r6, r0
 80066ae:	4688      	mov	r8, r1
 80066b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066b4:	2700      	movs	r7, #0
 80066b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066ba:	f1b9 0901 	subs.w	r9, r9, #1
 80066be:	d505      	bpl.n	80066cc <_fwalk_reent+0x24>
 80066c0:	6824      	ldr	r4, [r4, #0]
 80066c2:	2c00      	cmp	r4, #0
 80066c4:	d1f7      	bne.n	80066b6 <_fwalk_reent+0xe>
 80066c6:	4638      	mov	r0, r7
 80066c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066cc:	89ab      	ldrh	r3, [r5, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d907      	bls.n	80066e2 <_fwalk_reent+0x3a>
 80066d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066d6:	3301      	adds	r3, #1
 80066d8:	d003      	beq.n	80066e2 <_fwalk_reent+0x3a>
 80066da:	4629      	mov	r1, r5
 80066dc:	4630      	mov	r0, r6
 80066de:	47c0      	blx	r8
 80066e0:	4307      	orrs	r7, r0
 80066e2:	3568      	adds	r5, #104	; 0x68
 80066e4:	e7e9      	b.n	80066ba <_fwalk_reent+0x12>
	...

080066e8 <_localeconv_r>:
 80066e8:	4800      	ldr	r0, [pc, #0]	; (80066ec <_localeconv_r+0x4>)
 80066ea:	4770      	bx	lr
 80066ec:	20000160 	.word	0x20000160

080066f0 <__retarget_lock_init_recursive>:
 80066f0:	4770      	bx	lr

080066f2 <__retarget_lock_acquire_recursive>:
 80066f2:	4770      	bx	lr

080066f4 <__retarget_lock_release_recursive>:
 80066f4:	4770      	bx	lr
	...

080066f8 <malloc>:
 80066f8:	4b02      	ldr	r3, [pc, #8]	; (8006704 <malloc+0xc>)
 80066fa:	4601      	mov	r1, r0
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	f000 bc17 	b.w	8006f30 <_malloc_r>
 8006702:	bf00      	nop
 8006704:	2000000c 	.word	0x2000000c

08006708 <memcpy>:
 8006708:	440a      	add	r2, r1
 800670a:	4291      	cmp	r1, r2
 800670c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006710:	d100      	bne.n	8006714 <memcpy+0xc>
 8006712:	4770      	bx	lr
 8006714:	b510      	push	{r4, lr}
 8006716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800671a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800671e:	4291      	cmp	r1, r2
 8006720:	d1f9      	bne.n	8006716 <memcpy+0xe>
 8006722:	bd10      	pop	{r4, pc}

08006724 <_Balloc>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006728:	4604      	mov	r4, r0
 800672a:	460d      	mov	r5, r1
 800672c:	b976      	cbnz	r6, 800674c <_Balloc+0x28>
 800672e:	2010      	movs	r0, #16
 8006730:	f7ff ffe2 	bl	80066f8 <malloc>
 8006734:	4602      	mov	r2, r0
 8006736:	6260      	str	r0, [r4, #36]	; 0x24
 8006738:	b920      	cbnz	r0, 8006744 <_Balloc+0x20>
 800673a:	4b18      	ldr	r3, [pc, #96]	; (800679c <_Balloc+0x78>)
 800673c:	4818      	ldr	r0, [pc, #96]	; (80067a0 <_Balloc+0x7c>)
 800673e:	2166      	movs	r1, #102	; 0x66
 8006740:	f000 feea 	bl	8007518 <__assert_func>
 8006744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006748:	6006      	str	r6, [r0, #0]
 800674a:	60c6      	str	r6, [r0, #12]
 800674c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800674e:	68f3      	ldr	r3, [r6, #12]
 8006750:	b183      	cbz	r3, 8006774 <_Balloc+0x50>
 8006752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800675a:	b9b8      	cbnz	r0, 800678c <_Balloc+0x68>
 800675c:	2101      	movs	r1, #1
 800675e:	fa01 f605 	lsl.w	r6, r1, r5
 8006762:	1d72      	adds	r2, r6, #5
 8006764:	0092      	lsls	r2, r2, #2
 8006766:	4620      	mov	r0, r4
 8006768:	f000 fb60 	bl	8006e2c <_calloc_r>
 800676c:	b160      	cbz	r0, 8006788 <_Balloc+0x64>
 800676e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006772:	e00e      	b.n	8006792 <_Balloc+0x6e>
 8006774:	2221      	movs	r2, #33	; 0x21
 8006776:	2104      	movs	r1, #4
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fb57 	bl	8006e2c <_calloc_r>
 800677e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006780:	60f0      	str	r0, [r6, #12]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e4      	bne.n	8006752 <_Balloc+0x2e>
 8006788:	2000      	movs	r0, #0
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	6802      	ldr	r2, [r0, #0]
 800678e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006792:	2300      	movs	r3, #0
 8006794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006798:	e7f7      	b.n	800678a <_Balloc+0x66>
 800679a:	bf00      	nop
 800679c:	0801aa1d 	.word	0x0801aa1d
 80067a0:	0801ab00 	.word	0x0801ab00

080067a4 <_Bfree>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067a8:	4605      	mov	r5, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	b976      	cbnz	r6, 80067cc <_Bfree+0x28>
 80067ae:	2010      	movs	r0, #16
 80067b0:	f7ff ffa2 	bl	80066f8 <malloc>
 80067b4:	4602      	mov	r2, r0
 80067b6:	6268      	str	r0, [r5, #36]	; 0x24
 80067b8:	b920      	cbnz	r0, 80067c4 <_Bfree+0x20>
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <_Bfree+0x3c>)
 80067bc:	4809      	ldr	r0, [pc, #36]	; (80067e4 <_Bfree+0x40>)
 80067be:	218a      	movs	r1, #138	; 0x8a
 80067c0:	f000 feaa 	bl	8007518 <__assert_func>
 80067c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067c8:	6006      	str	r6, [r0, #0]
 80067ca:	60c6      	str	r6, [r0, #12]
 80067cc:	b13c      	cbz	r4, 80067de <_Bfree+0x3a>
 80067ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067d0:	6862      	ldr	r2, [r4, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067d8:	6021      	str	r1, [r4, #0]
 80067da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	0801aa1d 	.word	0x0801aa1d
 80067e4:	0801ab00 	.word	0x0801ab00

080067e8 <__multadd>:
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	690d      	ldr	r5, [r1, #16]
 80067ee:	4607      	mov	r7, r0
 80067f0:	460c      	mov	r4, r1
 80067f2:	461e      	mov	r6, r3
 80067f4:	f101 0c14 	add.w	ip, r1, #20
 80067f8:	2000      	movs	r0, #0
 80067fa:	f8dc 3000 	ldr.w	r3, [ip]
 80067fe:	b299      	uxth	r1, r3
 8006800:	fb02 6101 	mla	r1, r2, r1, r6
 8006804:	0c1e      	lsrs	r6, r3, #16
 8006806:	0c0b      	lsrs	r3, r1, #16
 8006808:	fb02 3306 	mla	r3, r2, r6, r3
 800680c:	b289      	uxth	r1, r1
 800680e:	3001      	adds	r0, #1
 8006810:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006814:	4285      	cmp	r5, r0
 8006816:	f84c 1b04 	str.w	r1, [ip], #4
 800681a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800681e:	dcec      	bgt.n	80067fa <__multadd+0x12>
 8006820:	b30e      	cbz	r6, 8006866 <__multadd+0x7e>
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	42ab      	cmp	r3, r5
 8006826:	dc19      	bgt.n	800685c <__multadd+0x74>
 8006828:	6861      	ldr	r1, [r4, #4]
 800682a:	4638      	mov	r0, r7
 800682c:	3101      	adds	r1, #1
 800682e:	f7ff ff79 	bl	8006724 <_Balloc>
 8006832:	4680      	mov	r8, r0
 8006834:	b928      	cbnz	r0, 8006842 <__multadd+0x5a>
 8006836:	4602      	mov	r2, r0
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <__multadd+0x84>)
 800683a:	480d      	ldr	r0, [pc, #52]	; (8006870 <__multadd+0x88>)
 800683c:	21b5      	movs	r1, #181	; 0xb5
 800683e:	f000 fe6b 	bl	8007518 <__assert_func>
 8006842:	6922      	ldr	r2, [r4, #16]
 8006844:	3202      	adds	r2, #2
 8006846:	f104 010c 	add.w	r1, r4, #12
 800684a:	0092      	lsls	r2, r2, #2
 800684c:	300c      	adds	r0, #12
 800684e:	f7ff ff5b 	bl	8006708 <memcpy>
 8006852:	4621      	mov	r1, r4
 8006854:	4638      	mov	r0, r7
 8006856:	f7ff ffa5 	bl	80067a4 <_Bfree>
 800685a:	4644      	mov	r4, r8
 800685c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006860:	3501      	adds	r5, #1
 8006862:	615e      	str	r6, [r3, #20]
 8006864:	6125      	str	r5, [r4, #16]
 8006866:	4620      	mov	r0, r4
 8006868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686c:	0801aa8f 	.word	0x0801aa8f
 8006870:	0801ab00 	.word	0x0801ab00

08006874 <__hi0bits>:
 8006874:	0c03      	lsrs	r3, r0, #16
 8006876:	041b      	lsls	r3, r3, #16
 8006878:	b9d3      	cbnz	r3, 80068b0 <__hi0bits+0x3c>
 800687a:	0400      	lsls	r0, r0, #16
 800687c:	2310      	movs	r3, #16
 800687e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006882:	bf04      	itt	eq
 8006884:	0200      	lsleq	r0, r0, #8
 8006886:	3308      	addeq	r3, #8
 8006888:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800688c:	bf04      	itt	eq
 800688e:	0100      	lsleq	r0, r0, #4
 8006890:	3304      	addeq	r3, #4
 8006892:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006896:	bf04      	itt	eq
 8006898:	0080      	lsleq	r0, r0, #2
 800689a:	3302      	addeq	r3, #2
 800689c:	2800      	cmp	r0, #0
 800689e:	db05      	blt.n	80068ac <__hi0bits+0x38>
 80068a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068a4:	f103 0301 	add.w	r3, r3, #1
 80068a8:	bf08      	it	eq
 80068aa:	2320      	moveq	r3, #32
 80068ac:	4618      	mov	r0, r3
 80068ae:	4770      	bx	lr
 80068b0:	2300      	movs	r3, #0
 80068b2:	e7e4      	b.n	800687e <__hi0bits+0xa>

080068b4 <__lo0bits>:
 80068b4:	6803      	ldr	r3, [r0, #0]
 80068b6:	f013 0207 	ands.w	r2, r3, #7
 80068ba:	4601      	mov	r1, r0
 80068bc:	d00b      	beq.n	80068d6 <__lo0bits+0x22>
 80068be:	07da      	lsls	r2, r3, #31
 80068c0:	d423      	bmi.n	800690a <__lo0bits+0x56>
 80068c2:	0798      	lsls	r0, r3, #30
 80068c4:	bf49      	itett	mi
 80068c6:	085b      	lsrmi	r3, r3, #1
 80068c8:	089b      	lsrpl	r3, r3, #2
 80068ca:	2001      	movmi	r0, #1
 80068cc:	600b      	strmi	r3, [r1, #0]
 80068ce:	bf5c      	itt	pl
 80068d0:	600b      	strpl	r3, [r1, #0]
 80068d2:	2002      	movpl	r0, #2
 80068d4:	4770      	bx	lr
 80068d6:	b298      	uxth	r0, r3
 80068d8:	b9a8      	cbnz	r0, 8006906 <__lo0bits+0x52>
 80068da:	0c1b      	lsrs	r3, r3, #16
 80068dc:	2010      	movs	r0, #16
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	b90a      	cbnz	r2, 80068e6 <__lo0bits+0x32>
 80068e2:	3008      	adds	r0, #8
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	071a      	lsls	r2, r3, #28
 80068e8:	bf04      	itt	eq
 80068ea:	091b      	lsreq	r3, r3, #4
 80068ec:	3004      	addeq	r0, #4
 80068ee:	079a      	lsls	r2, r3, #30
 80068f0:	bf04      	itt	eq
 80068f2:	089b      	lsreq	r3, r3, #2
 80068f4:	3002      	addeq	r0, #2
 80068f6:	07da      	lsls	r2, r3, #31
 80068f8:	d403      	bmi.n	8006902 <__lo0bits+0x4e>
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	f100 0001 	add.w	r0, r0, #1
 8006900:	d005      	beq.n	800690e <__lo0bits+0x5a>
 8006902:	600b      	str	r3, [r1, #0]
 8006904:	4770      	bx	lr
 8006906:	4610      	mov	r0, r2
 8006908:	e7e9      	b.n	80068de <__lo0bits+0x2a>
 800690a:	2000      	movs	r0, #0
 800690c:	4770      	bx	lr
 800690e:	2020      	movs	r0, #32
 8006910:	4770      	bx	lr
	...

08006914 <__i2b>:
 8006914:	b510      	push	{r4, lr}
 8006916:	460c      	mov	r4, r1
 8006918:	2101      	movs	r1, #1
 800691a:	f7ff ff03 	bl	8006724 <_Balloc>
 800691e:	4602      	mov	r2, r0
 8006920:	b928      	cbnz	r0, 800692e <__i2b+0x1a>
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <__i2b+0x24>)
 8006924:	4805      	ldr	r0, [pc, #20]	; (800693c <__i2b+0x28>)
 8006926:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800692a:	f000 fdf5 	bl	8007518 <__assert_func>
 800692e:	2301      	movs	r3, #1
 8006930:	6144      	str	r4, [r0, #20]
 8006932:	6103      	str	r3, [r0, #16]
 8006934:	bd10      	pop	{r4, pc}
 8006936:	bf00      	nop
 8006938:	0801aa8f 	.word	0x0801aa8f
 800693c:	0801ab00 	.word	0x0801ab00

08006940 <__multiply>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	4691      	mov	r9, r2
 8006946:	690a      	ldr	r2, [r1, #16]
 8006948:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800694c:	429a      	cmp	r2, r3
 800694e:	bfb8      	it	lt
 8006950:	460b      	movlt	r3, r1
 8006952:	460c      	mov	r4, r1
 8006954:	bfbc      	itt	lt
 8006956:	464c      	movlt	r4, r9
 8006958:	4699      	movlt	r9, r3
 800695a:	6927      	ldr	r7, [r4, #16]
 800695c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006960:	68a3      	ldr	r3, [r4, #8]
 8006962:	6861      	ldr	r1, [r4, #4]
 8006964:	eb07 060a 	add.w	r6, r7, sl
 8006968:	42b3      	cmp	r3, r6
 800696a:	b085      	sub	sp, #20
 800696c:	bfb8      	it	lt
 800696e:	3101      	addlt	r1, #1
 8006970:	f7ff fed8 	bl	8006724 <_Balloc>
 8006974:	b930      	cbnz	r0, 8006984 <__multiply+0x44>
 8006976:	4602      	mov	r2, r0
 8006978:	4b44      	ldr	r3, [pc, #272]	; (8006a8c <__multiply+0x14c>)
 800697a:	4845      	ldr	r0, [pc, #276]	; (8006a90 <__multiply+0x150>)
 800697c:	f240 115d 	movw	r1, #349	; 0x15d
 8006980:	f000 fdca 	bl	8007518 <__assert_func>
 8006984:	f100 0514 	add.w	r5, r0, #20
 8006988:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800698c:	462b      	mov	r3, r5
 800698e:	2200      	movs	r2, #0
 8006990:	4543      	cmp	r3, r8
 8006992:	d321      	bcc.n	80069d8 <__multiply+0x98>
 8006994:	f104 0314 	add.w	r3, r4, #20
 8006998:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800699c:	f109 0314 	add.w	r3, r9, #20
 80069a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069a4:	9202      	str	r2, [sp, #8]
 80069a6:	1b3a      	subs	r2, r7, r4
 80069a8:	3a15      	subs	r2, #21
 80069aa:	f022 0203 	bic.w	r2, r2, #3
 80069ae:	3204      	adds	r2, #4
 80069b0:	f104 0115 	add.w	r1, r4, #21
 80069b4:	428f      	cmp	r7, r1
 80069b6:	bf38      	it	cc
 80069b8:	2204      	movcc	r2, #4
 80069ba:	9201      	str	r2, [sp, #4]
 80069bc:	9a02      	ldr	r2, [sp, #8]
 80069be:	9303      	str	r3, [sp, #12]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d80c      	bhi.n	80069de <__multiply+0x9e>
 80069c4:	2e00      	cmp	r6, #0
 80069c6:	dd03      	ble.n	80069d0 <__multiply+0x90>
 80069c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d05a      	beq.n	8006a86 <__multiply+0x146>
 80069d0:	6106      	str	r6, [r0, #16]
 80069d2:	b005      	add	sp, #20
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d8:	f843 2b04 	str.w	r2, [r3], #4
 80069dc:	e7d8      	b.n	8006990 <__multiply+0x50>
 80069de:	f8b3 a000 	ldrh.w	sl, [r3]
 80069e2:	f1ba 0f00 	cmp.w	sl, #0
 80069e6:	d024      	beq.n	8006a32 <__multiply+0xf2>
 80069e8:	f104 0e14 	add.w	lr, r4, #20
 80069ec:	46a9      	mov	r9, r5
 80069ee:	f04f 0c00 	mov.w	ip, #0
 80069f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80069f6:	f8d9 1000 	ldr.w	r1, [r9]
 80069fa:	fa1f fb82 	uxth.w	fp, r2
 80069fe:	b289      	uxth	r1, r1
 8006a00:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a08:	f8d9 2000 	ldr.w	r2, [r9]
 8006a0c:	4461      	add	r1, ip
 8006a0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a12:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a1a:	b289      	uxth	r1, r1
 8006a1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a20:	4577      	cmp	r7, lr
 8006a22:	f849 1b04 	str.w	r1, [r9], #4
 8006a26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a2a:	d8e2      	bhi.n	80069f2 <__multiply+0xb2>
 8006a2c:	9a01      	ldr	r2, [sp, #4]
 8006a2e:	f845 c002 	str.w	ip, [r5, r2]
 8006a32:	9a03      	ldr	r2, [sp, #12]
 8006a34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	f1b9 0f00 	cmp.w	r9, #0
 8006a3e:	d020      	beq.n	8006a82 <__multiply+0x142>
 8006a40:	6829      	ldr	r1, [r5, #0]
 8006a42:	f104 0c14 	add.w	ip, r4, #20
 8006a46:	46ae      	mov	lr, r5
 8006a48:	f04f 0a00 	mov.w	sl, #0
 8006a4c:	f8bc b000 	ldrh.w	fp, [ip]
 8006a50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a54:	fb09 220b 	mla	r2, r9, fp, r2
 8006a58:	4492      	add	sl, r2
 8006a5a:	b289      	uxth	r1, r1
 8006a5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a60:	f84e 1b04 	str.w	r1, [lr], #4
 8006a64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a68:	f8be 1000 	ldrh.w	r1, [lr]
 8006a6c:	0c12      	lsrs	r2, r2, #16
 8006a6e:	fb09 1102 	mla	r1, r9, r2, r1
 8006a72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a76:	4567      	cmp	r7, ip
 8006a78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a7c:	d8e6      	bhi.n	8006a4c <__multiply+0x10c>
 8006a7e:	9a01      	ldr	r2, [sp, #4]
 8006a80:	50a9      	str	r1, [r5, r2]
 8006a82:	3504      	adds	r5, #4
 8006a84:	e79a      	b.n	80069bc <__multiply+0x7c>
 8006a86:	3e01      	subs	r6, #1
 8006a88:	e79c      	b.n	80069c4 <__multiply+0x84>
 8006a8a:	bf00      	nop
 8006a8c:	0801aa8f 	.word	0x0801aa8f
 8006a90:	0801ab00 	.word	0x0801ab00

08006a94 <__pow5mult>:
 8006a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a98:	4615      	mov	r5, r2
 8006a9a:	f012 0203 	ands.w	r2, r2, #3
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	d007      	beq.n	8006ab4 <__pow5mult+0x20>
 8006aa4:	4c25      	ldr	r4, [pc, #148]	; (8006b3c <__pow5mult+0xa8>)
 8006aa6:	3a01      	subs	r2, #1
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aae:	f7ff fe9b 	bl	80067e8 <__multadd>
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	10ad      	asrs	r5, r5, #2
 8006ab6:	d03d      	beq.n	8006b34 <__pow5mult+0xa0>
 8006ab8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006aba:	b97c      	cbnz	r4, 8006adc <__pow5mult+0x48>
 8006abc:	2010      	movs	r0, #16
 8006abe:	f7ff fe1b 	bl	80066f8 <malloc>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ac6:	b928      	cbnz	r0, 8006ad4 <__pow5mult+0x40>
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <__pow5mult+0xac>)
 8006aca:	481e      	ldr	r0, [pc, #120]	; (8006b44 <__pow5mult+0xb0>)
 8006acc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ad0:	f000 fd22 	bl	8007518 <__assert_func>
 8006ad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ad8:	6004      	str	r4, [r0, #0]
 8006ada:	60c4      	str	r4, [r0, #12]
 8006adc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ae4:	b94c      	cbnz	r4, 8006afa <__pow5mult+0x66>
 8006ae6:	f240 2171 	movw	r1, #625	; 0x271
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7ff ff12 	bl	8006914 <__i2b>
 8006af0:	2300      	movs	r3, #0
 8006af2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006af6:	4604      	mov	r4, r0
 8006af8:	6003      	str	r3, [r0, #0]
 8006afa:	f04f 0900 	mov.w	r9, #0
 8006afe:	07eb      	lsls	r3, r5, #31
 8006b00:	d50a      	bpl.n	8006b18 <__pow5mult+0x84>
 8006b02:	4639      	mov	r1, r7
 8006b04:	4622      	mov	r2, r4
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff ff1a 	bl	8006940 <__multiply>
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff fe47 	bl	80067a4 <_Bfree>
 8006b16:	4647      	mov	r7, r8
 8006b18:	106d      	asrs	r5, r5, #1
 8006b1a:	d00b      	beq.n	8006b34 <__pow5mult+0xa0>
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	b938      	cbnz	r0, 8006b30 <__pow5mult+0x9c>
 8006b20:	4622      	mov	r2, r4
 8006b22:	4621      	mov	r1, r4
 8006b24:	4630      	mov	r0, r6
 8006b26:	f7ff ff0b 	bl	8006940 <__multiply>
 8006b2a:	6020      	str	r0, [r4, #0]
 8006b2c:	f8c0 9000 	str.w	r9, [r0]
 8006b30:	4604      	mov	r4, r0
 8006b32:	e7e4      	b.n	8006afe <__pow5mult+0x6a>
 8006b34:	4638      	mov	r0, r7
 8006b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3a:	bf00      	nop
 8006b3c:	0801ac50 	.word	0x0801ac50
 8006b40:	0801aa1d 	.word	0x0801aa1d
 8006b44:	0801ab00 	.word	0x0801ab00

08006b48 <__lshift>:
 8006b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	6849      	ldr	r1, [r1, #4]
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	4607      	mov	r7, r0
 8006b5a:	4691      	mov	r9, r2
 8006b5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b60:	f108 0601 	add.w	r6, r8, #1
 8006b64:	42b3      	cmp	r3, r6
 8006b66:	db0b      	blt.n	8006b80 <__lshift+0x38>
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f7ff fddb 	bl	8006724 <_Balloc>
 8006b6e:	4605      	mov	r5, r0
 8006b70:	b948      	cbnz	r0, 8006b86 <__lshift+0x3e>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4b2a      	ldr	r3, [pc, #168]	; (8006c20 <__lshift+0xd8>)
 8006b76:	482b      	ldr	r0, [pc, #172]	; (8006c24 <__lshift+0xdc>)
 8006b78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b7c:	f000 fccc 	bl	8007518 <__assert_func>
 8006b80:	3101      	adds	r1, #1
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	e7ee      	b.n	8006b64 <__lshift+0x1c>
 8006b86:	2300      	movs	r3, #0
 8006b88:	f100 0114 	add.w	r1, r0, #20
 8006b8c:	f100 0210 	add.w	r2, r0, #16
 8006b90:	4618      	mov	r0, r3
 8006b92:	4553      	cmp	r3, sl
 8006b94:	db37      	blt.n	8006c06 <__lshift+0xbe>
 8006b96:	6920      	ldr	r0, [r4, #16]
 8006b98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b9c:	f104 0314 	add.w	r3, r4, #20
 8006ba0:	f019 091f 	ands.w	r9, r9, #31
 8006ba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ba8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006bac:	d02f      	beq.n	8006c0e <__lshift+0xc6>
 8006bae:	f1c9 0e20 	rsb	lr, r9, #32
 8006bb2:	468a      	mov	sl, r1
 8006bb4:	f04f 0c00 	mov.w	ip, #0
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	fa02 f209 	lsl.w	r2, r2, r9
 8006bbe:	ea42 020c 	orr.w	r2, r2, ip
 8006bc2:	f84a 2b04 	str.w	r2, [sl], #4
 8006bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bca:	4298      	cmp	r0, r3
 8006bcc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006bd0:	d8f2      	bhi.n	8006bb8 <__lshift+0x70>
 8006bd2:	1b03      	subs	r3, r0, r4
 8006bd4:	3b15      	subs	r3, #21
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	3304      	adds	r3, #4
 8006bdc:	f104 0215 	add.w	r2, r4, #21
 8006be0:	4290      	cmp	r0, r2
 8006be2:	bf38      	it	cc
 8006be4:	2304      	movcc	r3, #4
 8006be6:	f841 c003 	str.w	ip, [r1, r3]
 8006bea:	f1bc 0f00 	cmp.w	ip, #0
 8006bee:	d001      	beq.n	8006bf4 <__lshift+0xac>
 8006bf0:	f108 0602 	add.w	r6, r8, #2
 8006bf4:	3e01      	subs	r6, #1
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	612e      	str	r6, [r5, #16]
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	f7ff fdd2 	bl	80067a4 <_Bfree>
 8006c00:	4628      	mov	r0, r5
 8006c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c06:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	e7c1      	b.n	8006b92 <__lshift+0x4a>
 8006c0e:	3904      	subs	r1, #4
 8006c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c14:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c18:	4298      	cmp	r0, r3
 8006c1a:	d8f9      	bhi.n	8006c10 <__lshift+0xc8>
 8006c1c:	e7ea      	b.n	8006bf4 <__lshift+0xac>
 8006c1e:	bf00      	nop
 8006c20:	0801aa8f 	.word	0x0801aa8f
 8006c24:	0801ab00 	.word	0x0801ab00

08006c28 <__mcmp>:
 8006c28:	b530      	push	{r4, r5, lr}
 8006c2a:	6902      	ldr	r2, [r0, #16]
 8006c2c:	690c      	ldr	r4, [r1, #16]
 8006c2e:	1b12      	subs	r2, r2, r4
 8006c30:	d10e      	bne.n	8006c50 <__mcmp+0x28>
 8006c32:	f100 0314 	add.w	r3, r0, #20
 8006c36:	3114      	adds	r1, #20
 8006c38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c48:	42a5      	cmp	r5, r4
 8006c4a:	d003      	beq.n	8006c54 <__mcmp+0x2c>
 8006c4c:	d305      	bcc.n	8006c5a <__mcmp+0x32>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	4610      	mov	r0, r2
 8006c52:	bd30      	pop	{r4, r5, pc}
 8006c54:	4283      	cmp	r3, r0
 8006c56:	d3f3      	bcc.n	8006c40 <__mcmp+0x18>
 8006c58:	e7fa      	b.n	8006c50 <__mcmp+0x28>
 8006c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5e:	e7f7      	b.n	8006c50 <__mcmp+0x28>

08006c60 <__mdiff>:
 8006c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	460c      	mov	r4, r1
 8006c66:	4606      	mov	r6, r0
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4690      	mov	r8, r2
 8006c6e:	f7ff ffdb 	bl	8006c28 <__mcmp>
 8006c72:	1e05      	subs	r5, r0, #0
 8006c74:	d110      	bne.n	8006c98 <__mdiff+0x38>
 8006c76:	4629      	mov	r1, r5
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f7ff fd53 	bl	8006724 <_Balloc>
 8006c7e:	b930      	cbnz	r0, 8006c8e <__mdiff+0x2e>
 8006c80:	4b3a      	ldr	r3, [pc, #232]	; (8006d6c <__mdiff+0x10c>)
 8006c82:	4602      	mov	r2, r0
 8006c84:	f240 2132 	movw	r1, #562	; 0x232
 8006c88:	4839      	ldr	r0, [pc, #228]	; (8006d70 <__mdiff+0x110>)
 8006c8a:	f000 fc45 	bl	8007518 <__assert_func>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c98:	bfa4      	itt	ge
 8006c9a:	4643      	movge	r3, r8
 8006c9c:	46a0      	movge	r8, r4
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ca4:	bfa6      	itte	ge
 8006ca6:	461c      	movge	r4, r3
 8006ca8:	2500      	movge	r5, #0
 8006caa:	2501      	movlt	r5, #1
 8006cac:	f7ff fd3a 	bl	8006724 <_Balloc>
 8006cb0:	b920      	cbnz	r0, 8006cbc <__mdiff+0x5c>
 8006cb2:	4b2e      	ldr	r3, [pc, #184]	; (8006d6c <__mdiff+0x10c>)
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cba:	e7e5      	b.n	8006c88 <__mdiff+0x28>
 8006cbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cc0:	6926      	ldr	r6, [r4, #16]
 8006cc2:	60c5      	str	r5, [r0, #12]
 8006cc4:	f104 0914 	add.w	r9, r4, #20
 8006cc8:	f108 0514 	add.w	r5, r8, #20
 8006ccc:	f100 0e14 	add.w	lr, r0, #20
 8006cd0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006cd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006cd8:	f108 0210 	add.w	r2, r8, #16
 8006cdc:	46f2      	mov	sl, lr
 8006cde:	2100      	movs	r1, #0
 8006ce0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ce4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ce8:	fa1f f883 	uxth.w	r8, r3
 8006cec:	fa11 f18b 	uxtah	r1, r1, fp
 8006cf0:	0c1b      	lsrs	r3, r3, #16
 8006cf2:	eba1 0808 	sub.w	r8, r1, r8
 8006cf6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cfa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006cfe:	fa1f f888 	uxth.w	r8, r8
 8006d02:	1419      	asrs	r1, r3, #16
 8006d04:	454e      	cmp	r6, r9
 8006d06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d0a:	f84a 3b04 	str.w	r3, [sl], #4
 8006d0e:	d8e7      	bhi.n	8006ce0 <__mdiff+0x80>
 8006d10:	1b33      	subs	r3, r6, r4
 8006d12:	3b15      	subs	r3, #21
 8006d14:	f023 0303 	bic.w	r3, r3, #3
 8006d18:	3304      	adds	r3, #4
 8006d1a:	3415      	adds	r4, #21
 8006d1c:	42a6      	cmp	r6, r4
 8006d1e:	bf38      	it	cc
 8006d20:	2304      	movcc	r3, #4
 8006d22:	441d      	add	r5, r3
 8006d24:	4473      	add	r3, lr
 8006d26:	469e      	mov	lr, r3
 8006d28:	462e      	mov	r6, r5
 8006d2a:	4566      	cmp	r6, ip
 8006d2c:	d30e      	bcc.n	8006d4c <__mdiff+0xec>
 8006d2e:	f10c 0203 	add.w	r2, ip, #3
 8006d32:	1b52      	subs	r2, r2, r5
 8006d34:	f022 0203 	bic.w	r2, r2, #3
 8006d38:	3d03      	subs	r5, #3
 8006d3a:	45ac      	cmp	ip, r5
 8006d3c:	bf38      	it	cc
 8006d3e:	2200      	movcc	r2, #0
 8006d40:	441a      	add	r2, r3
 8006d42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006d46:	b17b      	cbz	r3, 8006d68 <__mdiff+0x108>
 8006d48:	6107      	str	r7, [r0, #16]
 8006d4a:	e7a3      	b.n	8006c94 <__mdiff+0x34>
 8006d4c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d50:	fa11 f288 	uxtah	r2, r1, r8
 8006d54:	1414      	asrs	r4, r2, #16
 8006d56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d5a:	b292      	uxth	r2, r2
 8006d5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d60:	f84e 2b04 	str.w	r2, [lr], #4
 8006d64:	1421      	asrs	r1, r4, #16
 8006d66:	e7e0      	b.n	8006d2a <__mdiff+0xca>
 8006d68:	3f01      	subs	r7, #1
 8006d6a:	e7ea      	b.n	8006d42 <__mdiff+0xe2>
 8006d6c:	0801aa8f 	.word	0x0801aa8f
 8006d70:	0801ab00 	.word	0x0801ab00

08006d74 <__d2b>:
 8006d74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d78:	4689      	mov	r9, r1
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	ec57 6b10 	vmov	r6, r7, d0
 8006d80:	4690      	mov	r8, r2
 8006d82:	f7ff fccf 	bl	8006724 <_Balloc>
 8006d86:	4604      	mov	r4, r0
 8006d88:	b930      	cbnz	r0, 8006d98 <__d2b+0x24>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <__d2b+0xb0>)
 8006d8e:	4826      	ldr	r0, [pc, #152]	; (8006e28 <__d2b+0xb4>)
 8006d90:	f240 310a 	movw	r1, #778	; 0x30a
 8006d94:	f000 fbc0 	bl	8007518 <__assert_func>
 8006d98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006da0:	bb35      	cbnz	r5, 8006df0 <__d2b+0x7c>
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	d028      	beq.n	8006dfa <__d2b+0x86>
 8006da8:	4668      	mov	r0, sp
 8006daa:	9600      	str	r6, [sp, #0]
 8006dac:	f7ff fd82 	bl	80068b4 <__lo0bits>
 8006db0:	9900      	ldr	r1, [sp, #0]
 8006db2:	b300      	cbz	r0, 8006df6 <__d2b+0x82>
 8006db4:	9a01      	ldr	r2, [sp, #4]
 8006db6:	f1c0 0320 	rsb	r3, r0, #32
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	40c2      	lsrs	r2, r0
 8006dc2:	6163      	str	r3, [r4, #20]
 8006dc4:	9201      	str	r2, [sp, #4]
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	61a3      	str	r3, [r4, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2202      	movne	r2, #2
 8006dd0:	2201      	moveq	r2, #1
 8006dd2:	6122      	str	r2, [r4, #16]
 8006dd4:	b1d5      	cbz	r5, 8006e0c <__d2b+0x98>
 8006dd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dda:	4405      	add	r5, r0
 8006ddc:	f8c9 5000 	str.w	r5, [r9]
 8006de0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006de4:	f8c8 0000 	str.w	r0, [r8]
 8006de8:	4620      	mov	r0, r4
 8006dea:	b003      	add	sp, #12
 8006dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006df4:	e7d5      	b.n	8006da2 <__d2b+0x2e>
 8006df6:	6161      	str	r1, [r4, #20]
 8006df8:	e7e5      	b.n	8006dc6 <__d2b+0x52>
 8006dfa:	a801      	add	r0, sp, #4
 8006dfc:	f7ff fd5a 	bl	80068b4 <__lo0bits>
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	6163      	str	r3, [r4, #20]
 8006e04:	2201      	movs	r2, #1
 8006e06:	6122      	str	r2, [r4, #16]
 8006e08:	3020      	adds	r0, #32
 8006e0a:	e7e3      	b.n	8006dd4 <__d2b+0x60>
 8006e0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e14:	f8c9 0000 	str.w	r0, [r9]
 8006e18:	6918      	ldr	r0, [r3, #16]
 8006e1a:	f7ff fd2b 	bl	8006874 <__hi0bits>
 8006e1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e22:	e7df      	b.n	8006de4 <__d2b+0x70>
 8006e24:	0801aa8f 	.word	0x0801aa8f
 8006e28:	0801ab00 	.word	0x0801ab00

08006e2c <_calloc_r>:
 8006e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e2e:	fba1 2402 	umull	r2, r4, r1, r2
 8006e32:	b94c      	cbnz	r4, 8006e48 <_calloc_r+0x1c>
 8006e34:	4611      	mov	r1, r2
 8006e36:	9201      	str	r2, [sp, #4]
 8006e38:	f000 f87a 	bl	8006f30 <_malloc_r>
 8006e3c:	9a01      	ldr	r2, [sp, #4]
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b930      	cbnz	r0, 8006e50 <_calloc_r+0x24>
 8006e42:	4628      	mov	r0, r5
 8006e44:	b003      	add	sp, #12
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	220c      	movs	r2, #12
 8006e4a:	6002      	str	r2, [r0, #0]
 8006e4c:	2500      	movs	r5, #0
 8006e4e:	e7f8      	b.n	8006e42 <_calloc_r+0x16>
 8006e50:	4621      	mov	r1, r4
 8006e52:	f7fe f84d 	bl	8004ef0 <memset>
 8006e56:	e7f4      	b.n	8006e42 <_calloc_r+0x16>

08006e58 <_free_r>:
 8006e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e5a:	2900      	cmp	r1, #0
 8006e5c:	d044      	beq.n	8006ee8 <_free_r+0x90>
 8006e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e62:	9001      	str	r0, [sp, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f1a1 0404 	sub.w	r4, r1, #4
 8006e6a:	bfb8      	it	lt
 8006e6c:	18e4      	addlt	r4, r4, r3
 8006e6e:	f000 fcdf 	bl	8007830 <__malloc_lock>
 8006e72:	4a1e      	ldr	r2, [pc, #120]	; (8006eec <_free_r+0x94>)
 8006e74:	9801      	ldr	r0, [sp, #4]
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	b933      	cbnz	r3, 8006e88 <_free_r+0x30>
 8006e7a:	6063      	str	r3, [r4, #4]
 8006e7c:	6014      	str	r4, [r2, #0]
 8006e7e:	b003      	add	sp, #12
 8006e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e84:	f000 bcda 	b.w	800783c <__malloc_unlock>
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	d908      	bls.n	8006e9e <_free_r+0x46>
 8006e8c:	6825      	ldr	r5, [r4, #0]
 8006e8e:	1961      	adds	r1, r4, r5
 8006e90:	428b      	cmp	r3, r1
 8006e92:	bf01      	itttt	eq
 8006e94:	6819      	ldreq	r1, [r3, #0]
 8006e96:	685b      	ldreq	r3, [r3, #4]
 8006e98:	1949      	addeq	r1, r1, r5
 8006e9a:	6021      	streq	r1, [r4, #0]
 8006e9c:	e7ed      	b.n	8006e7a <_free_r+0x22>
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	b10b      	cbz	r3, 8006ea8 <_free_r+0x50>
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	d9fa      	bls.n	8006e9e <_free_r+0x46>
 8006ea8:	6811      	ldr	r1, [r2, #0]
 8006eaa:	1855      	adds	r5, r2, r1
 8006eac:	42a5      	cmp	r5, r4
 8006eae:	d10b      	bne.n	8006ec8 <_free_r+0x70>
 8006eb0:	6824      	ldr	r4, [r4, #0]
 8006eb2:	4421      	add	r1, r4
 8006eb4:	1854      	adds	r4, r2, r1
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	6011      	str	r1, [r2, #0]
 8006eba:	d1e0      	bne.n	8006e7e <_free_r+0x26>
 8006ebc:	681c      	ldr	r4, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	6053      	str	r3, [r2, #4]
 8006ec2:	4421      	add	r1, r4
 8006ec4:	6011      	str	r1, [r2, #0]
 8006ec6:	e7da      	b.n	8006e7e <_free_r+0x26>
 8006ec8:	d902      	bls.n	8006ed0 <_free_r+0x78>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	e7d6      	b.n	8006e7e <_free_r+0x26>
 8006ed0:	6825      	ldr	r5, [r4, #0]
 8006ed2:	1961      	adds	r1, r4, r5
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	bf04      	itt	eq
 8006ed8:	6819      	ldreq	r1, [r3, #0]
 8006eda:	685b      	ldreq	r3, [r3, #4]
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	bf04      	itt	eq
 8006ee0:	1949      	addeq	r1, r1, r5
 8006ee2:	6021      	streq	r1, [r4, #0]
 8006ee4:	6054      	str	r4, [r2, #4]
 8006ee6:	e7ca      	b.n	8006e7e <_free_r+0x26>
 8006ee8:	b003      	add	sp, #12
 8006eea:	bd30      	pop	{r4, r5, pc}
 8006eec:	20002b1c 	.word	0x20002b1c

08006ef0 <sbrk_aligned>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	4e0e      	ldr	r6, [pc, #56]	; (8006f2c <sbrk_aligned+0x3c>)
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	6831      	ldr	r1, [r6, #0]
 8006ef8:	4605      	mov	r5, r0
 8006efa:	b911      	cbnz	r1, 8006f02 <sbrk_aligned+0x12>
 8006efc:	f000 f9e6 	bl	80072cc <_sbrk_r>
 8006f00:	6030      	str	r0, [r6, #0]
 8006f02:	4621      	mov	r1, r4
 8006f04:	4628      	mov	r0, r5
 8006f06:	f000 f9e1 	bl	80072cc <_sbrk_r>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d00a      	beq.n	8006f24 <sbrk_aligned+0x34>
 8006f0e:	1cc4      	adds	r4, r0, #3
 8006f10:	f024 0403 	bic.w	r4, r4, #3
 8006f14:	42a0      	cmp	r0, r4
 8006f16:	d007      	beq.n	8006f28 <sbrk_aligned+0x38>
 8006f18:	1a21      	subs	r1, r4, r0
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 f9d6 	bl	80072cc <_sbrk_r>
 8006f20:	3001      	adds	r0, #1
 8006f22:	d101      	bne.n	8006f28 <sbrk_aligned+0x38>
 8006f24:	f04f 34ff 	mov.w	r4, #4294967295
 8006f28:	4620      	mov	r0, r4
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	20002b20 	.word	0x20002b20

08006f30 <_malloc_r>:
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	1ccd      	adds	r5, r1, #3
 8006f36:	f025 0503 	bic.w	r5, r5, #3
 8006f3a:	3508      	adds	r5, #8
 8006f3c:	2d0c      	cmp	r5, #12
 8006f3e:	bf38      	it	cc
 8006f40:	250c      	movcc	r5, #12
 8006f42:	2d00      	cmp	r5, #0
 8006f44:	4607      	mov	r7, r0
 8006f46:	db01      	blt.n	8006f4c <_malloc_r+0x1c>
 8006f48:	42a9      	cmp	r1, r5
 8006f4a:	d905      	bls.n	8006f58 <_malloc_r+0x28>
 8006f4c:	230c      	movs	r3, #12
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	2600      	movs	r6, #0
 8006f52:	4630      	mov	r0, r6
 8006f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f58:	4e2e      	ldr	r6, [pc, #184]	; (8007014 <_malloc_r+0xe4>)
 8006f5a:	f000 fc69 	bl	8007830 <__malloc_lock>
 8006f5e:	6833      	ldr	r3, [r6, #0]
 8006f60:	461c      	mov	r4, r3
 8006f62:	bb34      	cbnz	r4, 8006fb2 <_malloc_r+0x82>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4638      	mov	r0, r7
 8006f68:	f7ff ffc2 	bl	8006ef0 <sbrk_aligned>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	4604      	mov	r4, r0
 8006f70:	d14d      	bne.n	800700e <_malloc_r+0xde>
 8006f72:	6834      	ldr	r4, [r6, #0]
 8006f74:	4626      	mov	r6, r4
 8006f76:	2e00      	cmp	r6, #0
 8006f78:	d140      	bne.n	8006ffc <_malloc_r+0xcc>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4638      	mov	r0, r7
 8006f80:	eb04 0803 	add.w	r8, r4, r3
 8006f84:	f000 f9a2 	bl	80072cc <_sbrk_r>
 8006f88:	4580      	cmp	r8, r0
 8006f8a:	d13a      	bne.n	8007002 <_malloc_r+0xd2>
 8006f8c:	6821      	ldr	r1, [r4, #0]
 8006f8e:	3503      	adds	r5, #3
 8006f90:	1a6d      	subs	r5, r5, r1
 8006f92:	f025 0503 	bic.w	r5, r5, #3
 8006f96:	3508      	adds	r5, #8
 8006f98:	2d0c      	cmp	r5, #12
 8006f9a:	bf38      	it	cc
 8006f9c:	250c      	movcc	r5, #12
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7ff ffa5 	bl	8006ef0 <sbrk_aligned>
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d02b      	beq.n	8007002 <_malloc_r+0xd2>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	442b      	add	r3, r5
 8006fae:	6023      	str	r3, [r4, #0]
 8006fb0:	e00e      	b.n	8006fd0 <_malloc_r+0xa0>
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	1b52      	subs	r2, r2, r5
 8006fb6:	d41e      	bmi.n	8006ff6 <_malloc_r+0xc6>
 8006fb8:	2a0b      	cmp	r2, #11
 8006fba:	d916      	bls.n	8006fea <_malloc_r+0xba>
 8006fbc:	1961      	adds	r1, r4, r5
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	6025      	str	r5, [r4, #0]
 8006fc2:	bf18      	it	ne
 8006fc4:	6059      	strne	r1, [r3, #4]
 8006fc6:	6863      	ldr	r3, [r4, #4]
 8006fc8:	bf08      	it	eq
 8006fca:	6031      	streq	r1, [r6, #0]
 8006fcc:	5162      	str	r2, [r4, r5]
 8006fce:	604b      	str	r3, [r1, #4]
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f104 060b 	add.w	r6, r4, #11
 8006fd6:	f000 fc31 	bl	800783c <__malloc_unlock>
 8006fda:	f026 0607 	bic.w	r6, r6, #7
 8006fde:	1d23      	adds	r3, r4, #4
 8006fe0:	1af2      	subs	r2, r6, r3
 8006fe2:	d0b6      	beq.n	8006f52 <_malloc_r+0x22>
 8006fe4:	1b9b      	subs	r3, r3, r6
 8006fe6:	50a3      	str	r3, [r4, r2]
 8006fe8:	e7b3      	b.n	8006f52 <_malloc_r+0x22>
 8006fea:	6862      	ldr	r2, [r4, #4]
 8006fec:	42a3      	cmp	r3, r4
 8006fee:	bf0c      	ite	eq
 8006ff0:	6032      	streq	r2, [r6, #0]
 8006ff2:	605a      	strne	r2, [r3, #4]
 8006ff4:	e7ec      	b.n	8006fd0 <_malloc_r+0xa0>
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	6864      	ldr	r4, [r4, #4]
 8006ffa:	e7b2      	b.n	8006f62 <_malloc_r+0x32>
 8006ffc:	4634      	mov	r4, r6
 8006ffe:	6876      	ldr	r6, [r6, #4]
 8007000:	e7b9      	b.n	8006f76 <_malloc_r+0x46>
 8007002:	230c      	movs	r3, #12
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4638      	mov	r0, r7
 8007008:	f000 fc18 	bl	800783c <__malloc_unlock>
 800700c:	e7a1      	b.n	8006f52 <_malloc_r+0x22>
 800700e:	6025      	str	r5, [r4, #0]
 8007010:	e7de      	b.n	8006fd0 <_malloc_r+0xa0>
 8007012:	bf00      	nop
 8007014:	20002b1c 	.word	0x20002b1c

08007018 <__sfputc_r>:
 8007018:	6893      	ldr	r3, [r2, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	b410      	push	{r4}
 8007020:	6093      	str	r3, [r2, #8]
 8007022:	da08      	bge.n	8007036 <__sfputc_r+0x1e>
 8007024:	6994      	ldr	r4, [r2, #24]
 8007026:	42a3      	cmp	r3, r4
 8007028:	db01      	blt.n	800702e <__sfputc_r+0x16>
 800702a:	290a      	cmp	r1, #10
 800702c:	d103      	bne.n	8007036 <__sfputc_r+0x1e>
 800702e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007032:	f000 b99f 	b.w	8007374 <__swbuf_r>
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	1c58      	adds	r0, r3, #1
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	7019      	strb	r1, [r3, #0]
 800703e:	4608      	mov	r0, r1
 8007040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007044:	4770      	bx	lr

08007046 <__sfputs_r>:
 8007046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007048:	4606      	mov	r6, r0
 800704a:	460f      	mov	r7, r1
 800704c:	4614      	mov	r4, r2
 800704e:	18d5      	adds	r5, r2, r3
 8007050:	42ac      	cmp	r4, r5
 8007052:	d101      	bne.n	8007058 <__sfputs_r+0x12>
 8007054:	2000      	movs	r0, #0
 8007056:	e007      	b.n	8007068 <__sfputs_r+0x22>
 8007058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705c:	463a      	mov	r2, r7
 800705e:	4630      	mov	r0, r6
 8007060:	f7ff ffda 	bl	8007018 <__sfputc_r>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d1f3      	bne.n	8007050 <__sfputs_r+0xa>
 8007068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800706c <_vfiprintf_r>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	460d      	mov	r5, r1
 8007072:	b09d      	sub	sp, #116	; 0x74
 8007074:	4614      	mov	r4, r2
 8007076:	4698      	mov	r8, r3
 8007078:	4606      	mov	r6, r0
 800707a:	b118      	cbz	r0, 8007084 <_vfiprintf_r+0x18>
 800707c:	6983      	ldr	r3, [r0, #24]
 800707e:	b90b      	cbnz	r3, 8007084 <_vfiprintf_r+0x18>
 8007080:	f7ff fa94 	bl	80065ac <__sinit>
 8007084:	4b89      	ldr	r3, [pc, #548]	; (80072ac <_vfiprintf_r+0x240>)
 8007086:	429d      	cmp	r5, r3
 8007088:	d11b      	bne.n	80070c2 <_vfiprintf_r+0x56>
 800708a:	6875      	ldr	r5, [r6, #4]
 800708c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800708e:	07d9      	lsls	r1, r3, #31
 8007090:	d405      	bmi.n	800709e <_vfiprintf_r+0x32>
 8007092:	89ab      	ldrh	r3, [r5, #12]
 8007094:	059a      	lsls	r2, r3, #22
 8007096:	d402      	bmi.n	800709e <_vfiprintf_r+0x32>
 8007098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800709a:	f7ff fb2a 	bl	80066f2 <__retarget_lock_acquire_recursive>
 800709e:	89ab      	ldrh	r3, [r5, #12]
 80070a0:	071b      	lsls	r3, r3, #28
 80070a2:	d501      	bpl.n	80070a8 <_vfiprintf_r+0x3c>
 80070a4:	692b      	ldr	r3, [r5, #16]
 80070a6:	b9eb      	cbnz	r3, 80070e4 <_vfiprintf_r+0x78>
 80070a8:	4629      	mov	r1, r5
 80070aa:	4630      	mov	r0, r6
 80070ac:	f000 f9c6 	bl	800743c <__swsetup_r>
 80070b0:	b1c0      	cbz	r0, 80070e4 <_vfiprintf_r+0x78>
 80070b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070b4:	07dc      	lsls	r4, r3, #31
 80070b6:	d50e      	bpl.n	80070d6 <_vfiprintf_r+0x6a>
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	b01d      	add	sp, #116	; 0x74
 80070be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	4b7b      	ldr	r3, [pc, #492]	; (80072b0 <_vfiprintf_r+0x244>)
 80070c4:	429d      	cmp	r5, r3
 80070c6:	d101      	bne.n	80070cc <_vfiprintf_r+0x60>
 80070c8:	68b5      	ldr	r5, [r6, #8]
 80070ca:	e7df      	b.n	800708c <_vfiprintf_r+0x20>
 80070cc:	4b79      	ldr	r3, [pc, #484]	; (80072b4 <_vfiprintf_r+0x248>)
 80070ce:	429d      	cmp	r5, r3
 80070d0:	bf08      	it	eq
 80070d2:	68f5      	ldreq	r5, [r6, #12]
 80070d4:	e7da      	b.n	800708c <_vfiprintf_r+0x20>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	0598      	lsls	r0, r3, #22
 80070da:	d4ed      	bmi.n	80070b8 <_vfiprintf_r+0x4c>
 80070dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070de:	f7ff fb09 	bl	80066f4 <__retarget_lock_release_recursive>
 80070e2:	e7e9      	b.n	80070b8 <_vfiprintf_r+0x4c>
 80070e4:	2300      	movs	r3, #0
 80070e6:	9309      	str	r3, [sp, #36]	; 0x24
 80070e8:	2320      	movs	r3, #32
 80070ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80070f2:	2330      	movs	r3, #48	; 0x30
 80070f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072b8 <_vfiprintf_r+0x24c>
 80070f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070fc:	f04f 0901 	mov.w	r9, #1
 8007100:	4623      	mov	r3, r4
 8007102:	469a      	mov	sl, r3
 8007104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007108:	b10a      	cbz	r2, 800710e <_vfiprintf_r+0xa2>
 800710a:	2a25      	cmp	r2, #37	; 0x25
 800710c:	d1f9      	bne.n	8007102 <_vfiprintf_r+0x96>
 800710e:	ebba 0b04 	subs.w	fp, sl, r4
 8007112:	d00b      	beq.n	800712c <_vfiprintf_r+0xc0>
 8007114:	465b      	mov	r3, fp
 8007116:	4622      	mov	r2, r4
 8007118:	4629      	mov	r1, r5
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ff93 	bl	8007046 <__sfputs_r>
 8007120:	3001      	adds	r0, #1
 8007122:	f000 80aa 	beq.w	800727a <_vfiprintf_r+0x20e>
 8007126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007128:	445a      	add	r2, fp
 800712a:	9209      	str	r2, [sp, #36]	; 0x24
 800712c:	f89a 3000 	ldrb.w	r3, [sl]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 80a2 	beq.w	800727a <_vfiprintf_r+0x20e>
 8007136:	2300      	movs	r3, #0
 8007138:	f04f 32ff 	mov.w	r2, #4294967295
 800713c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007140:	f10a 0a01 	add.w	sl, sl, #1
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	9307      	str	r3, [sp, #28]
 8007148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800714c:	931a      	str	r3, [sp, #104]	; 0x68
 800714e:	4654      	mov	r4, sl
 8007150:	2205      	movs	r2, #5
 8007152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007156:	4858      	ldr	r0, [pc, #352]	; (80072b8 <_vfiprintf_r+0x24c>)
 8007158:	f7f9 f842 	bl	80001e0 <memchr>
 800715c:	9a04      	ldr	r2, [sp, #16]
 800715e:	b9d8      	cbnz	r0, 8007198 <_vfiprintf_r+0x12c>
 8007160:	06d1      	lsls	r1, r2, #27
 8007162:	bf44      	itt	mi
 8007164:	2320      	movmi	r3, #32
 8007166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800716a:	0713      	lsls	r3, r2, #28
 800716c:	bf44      	itt	mi
 800716e:	232b      	movmi	r3, #43	; 0x2b
 8007170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007174:	f89a 3000 	ldrb.w	r3, [sl]
 8007178:	2b2a      	cmp	r3, #42	; 0x2a
 800717a:	d015      	beq.n	80071a8 <_vfiprintf_r+0x13c>
 800717c:	9a07      	ldr	r2, [sp, #28]
 800717e:	4654      	mov	r4, sl
 8007180:	2000      	movs	r0, #0
 8007182:	f04f 0c0a 	mov.w	ip, #10
 8007186:	4621      	mov	r1, r4
 8007188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800718c:	3b30      	subs	r3, #48	; 0x30
 800718e:	2b09      	cmp	r3, #9
 8007190:	d94e      	bls.n	8007230 <_vfiprintf_r+0x1c4>
 8007192:	b1b0      	cbz	r0, 80071c2 <_vfiprintf_r+0x156>
 8007194:	9207      	str	r2, [sp, #28]
 8007196:	e014      	b.n	80071c2 <_vfiprintf_r+0x156>
 8007198:	eba0 0308 	sub.w	r3, r0, r8
 800719c:	fa09 f303 	lsl.w	r3, r9, r3
 80071a0:	4313      	orrs	r3, r2
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	46a2      	mov	sl, r4
 80071a6:	e7d2      	b.n	800714e <_vfiprintf_r+0xe2>
 80071a8:	9b03      	ldr	r3, [sp, #12]
 80071aa:	1d19      	adds	r1, r3, #4
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	9103      	str	r1, [sp, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bfbb      	ittet	lt
 80071b4:	425b      	neglt	r3, r3
 80071b6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ba:	9307      	strge	r3, [sp, #28]
 80071bc:	9307      	strlt	r3, [sp, #28]
 80071be:	bfb8      	it	lt
 80071c0:	9204      	strlt	r2, [sp, #16]
 80071c2:	7823      	ldrb	r3, [r4, #0]
 80071c4:	2b2e      	cmp	r3, #46	; 0x2e
 80071c6:	d10c      	bne.n	80071e2 <_vfiprintf_r+0x176>
 80071c8:	7863      	ldrb	r3, [r4, #1]
 80071ca:	2b2a      	cmp	r3, #42	; 0x2a
 80071cc:	d135      	bne.n	800723a <_vfiprintf_r+0x1ce>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	1d1a      	adds	r2, r3, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	9203      	str	r2, [sp, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfb8      	it	lt
 80071da:	f04f 33ff 	movlt.w	r3, #4294967295
 80071de:	3402      	adds	r4, #2
 80071e0:	9305      	str	r3, [sp, #20]
 80071e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072c8 <_vfiprintf_r+0x25c>
 80071e6:	7821      	ldrb	r1, [r4, #0]
 80071e8:	2203      	movs	r2, #3
 80071ea:	4650      	mov	r0, sl
 80071ec:	f7f8 fff8 	bl	80001e0 <memchr>
 80071f0:	b140      	cbz	r0, 8007204 <_vfiprintf_r+0x198>
 80071f2:	2340      	movs	r3, #64	; 0x40
 80071f4:	eba0 000a 	sub.w	r0, r0, sl
 80071f8:	fa03 f000 	lsl.w	r0, r3, r0
 80071fc:	9b04      	ldr	r3, [sp, #16]
 80071fe:	4303      	orrs	r3, r0
 8007200:	3401      	adds	r4, #1
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007208:	482c      	ldr	r0, [pc, #176]	; (80072bc <_vfiprintf_r+0x250>)
 800720a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800720e:	2206      	movs	r2, #6
 8007210:	f7f8 ffe6 	bl	80001e0 <memchr>
 8007214:	2800      	cmp	r0, #0
 8007216:	d03f      	beq.n	8007298 <_vfiprintf_r+0x22c>
 8007218:	4b29      	ldr	r3, [pc, #164]	; (80072c0 <_vfiprintf_r+0x254>)
 800721a:	bb1b      	cbnz	r3, 8007264 <_vfiprintf_r+0x1f8>
 800721c:	9b03      	ldr	r3, [sp, #12]
 800721e:	3307      	adds	r3, #7
 8007220:	f023 0307 	bic.w	r3, r3, #7
 8007224:	3308      	adds	r3, #8
 8007226:	9303      	str	r3, [sp, #12]
 8007228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722a:	443b      	add	r3, r7
 800722c:	9309      	str	r3, [sp, #36]	; 0x24
 800722e:	e767      	b.n	8007100 <_vfiprintf_r+0x94>
 8007230:	fb0c 3202 	mla	r2, ip, r2, r3
 8007234:	460c      	mov	r4, r1
 8007236:	2001      	movs	r0, #1
 8007238:	e7a5      	b.n	8007186 <_vfiprintf_r+0x11a>
 800723a:	2300      	movs	r3, #0
 800723c:	3401      	adds	r4, #1
 800723e:	9305      	str	r3, [sp, #20]
 8007240:	4619      	mov	r1, r3
 8007242:	f04f 0c0a 	mov.w	ip, #10
 8007246:	4620      	mov	r0, r4
 8007248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800724c:	3a30      	subs	r2, #48	; 0x30
 800724e:	2a09      	cmp	r2, #9
 8007250:	d903      	bls.n	800725a <_vfiprintf_r+0x1ee>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0c5      	beq.n	80071e2 <_vfiprintf_r+0x176>
 8007256:	9105      	str	r1, [sp, #20]
 8007258:	e7c3      	b.n	80071e2 <_vfiprintf_r+0x176>
 800725a:	fb0c 2101 	mla	r1, ip, r1, r2
 800725e:	4604      	mov	r4, r0
 8007260:	2301      	movs	r3, #1
 8007262:	e7f0      	b.n	8007246 <_vfiprintf_r+0x1da>
 8007264:	ab03      	add	r3, sp, #12
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	462a      	mov	r2, r5
 800726a:	4b16      	ldr	r3, [pc, #88]	; (80072c4 <_vfiprintf_r+0x258>)
 800726c:	a904      	add	r1, sp, #16
 800726e:	4630      	mov	r0, r6
 8007270:	f7fd fee6 	bl	8005040 <_printf_float>
 8007274:	4607      	mov	r7, r0
 8007276:	1c78      	adds	r0, r7, #1
 8007278:	d1d6      	bne.n	8007228 <_vfiprintf_r+0x1bc>
 800727a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800727c:	07d9      	lsls	r1, r3, #31
 800727e:	d405      	bmi.n	800728c <_vfiprintf_r+0x220>
 8007280:	89ab      	ldrh	r3, [r5, #12]
 8007282:	059a      	lsls	r2, r3, #22
 8007284:	d402      	bmi.n	800728c <_vfiprintf_r+0x220>
 8007286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007288:	f7ff fa34 	bl	80066f4 <__retarget_lock_release_recursive>
 800728c:	89ab      	ldrh	r3, [r5, #12]
 800728e:	065b      	lsls	r3, r3, #25
 8007290:	f53f af12 	bmi.w	80070b8 <_vfiprintf_r+0x4c>
 8007294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007296:	e711      	b.n	80070bc <_vfiprintf_r+0x50>
 8007298:	ab03      	add	r3, sp, #12
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	462a      	mov	r2, r5
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <_vfiprintf_r+0x258>)
 80072a0:	a904      	add	r1, sp, #16
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7fe f970 	bl	8005588 <_printf_i>
 80072a8:	e7e4      	b.n	8007274 <_vfiprintf_r+0x208>
 80072aa:	bf00      	nop
 80072ac:	0801aac0 	.word	0x0801aac0
 80072b0:	0801aae0 	.word	0x0801aae0
 80072b4:	0801aaa0 	.word	0x0801aaa0
 80072b8:	0801ac5c 	.word	0x0801ac5c
 80072bc:	0801ac66 	.word	0x0801ac66
 80072c0:	08005041 	.word	0x08005041
 80072c4:	08007047 	.word	0x08007047
 80072c8:	0801ac62 	.word	0x0801ac62

080072cc <_sbrk_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d06      	ldr	r5, [pc, #24]	; (80072e8 <_sbrk_r+0x1c>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	602b      	str	r3, [r5, #0]
 80072d8:	f7fa fb22 	bl	8001920 <_sbrk>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_sbrk_r+0x1a>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_sbrk_r+0x1a>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	20002b24 	.word	0x20002b24

080072ec <__sread>:
 80072ec:	b510      	push	{r4, lr}
 80072ee:	460c      	mov	r4, r1
 80072f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f4:	f000 faa8 	bl	8007848 <_read_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	bfab      	itete	ge
 80072fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007300:	181b      	addge	r3, r3, r0
 8007302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007306:	bfac      	ite	ge
 8007308:	6563      	strge	r3, [r4, #84]	; 0x54
 800730a:	81a3      	strhlt	r3, [r4, #12]
 800730c:	bd10      	pop	{r4, pc}

0800730e <__swrite>:
 800730e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007312:	461f      	mov	r7, r3
 8007314:	898b      	ldrh	r3, [r1, #12]
 8007316:	05db      	lsls	r3, r3, #23
 8007318:	4605      	mov	r5, r0
 800731a:	460c      	mov	r4, r1
 800731c:	4616      	mov	r6, r2
 800731e:	d505      	bpl.n	800732c <__swrite+0x1e>
 8007320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007324:	2302      	movs	r3, #2
 8007326:	2200      	movs	r2, #0
 8007328:	f000 f9f8 	bl	800771c <_lseek_r>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	4632      	mov	r2, r6
 800733a:	463b      	mov	r3, r7
 800733c:	4628      	mov	r0, r5
 800733e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007342:	f000 b869 	b.w	8007418 <_write_r>

08007346 <__sseek>:
 8007346:	b510      	push	{r4, lr}
 8007348:	460c      	mov	r4, r1
 800734a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734e:	f000 f9e5 	bl	800771c <_lseek_r>
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	bf15      	itete	ne
 8007358:	6560      	strne	r0, [r4, #84]	; 0x54
 800735a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800735e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007362:	81a3      	strheq	r3, [r4, #12]
 8007364:	bf18      	it	ne
 8007366:	81a3      	strhne	r3, [r4, #12]
 8007368:	bd10      	pop	{r4, pc}

0800736a <__sclose>:
 800736a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736e:	f000 b8f1 	b.w	8007554 <_close_r>
	...

08007374 <__swbuf_r>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	460e      	mov	r6, r1
 8007378:	4614      	mov	r4, r2
 800737a:	4605      	mov	r5, r0
 800737c:	b118      	cbz	r0, 8007386 <__swbuf_r+0x12>
 800737e:	6983      	ldr	r3, [r0, #24]
 8007380:	b90b      	cbnz	r3, 8007386 <__swbuf_r+0x12>
 8007382:	f7ff f913 	bl	80065ac <__sinit>
 8007386:	4b21      	ldr	r3, [pc, #132]	; (800740c <__swbuf_r+0x98>)
 8007388:	429c      	cmp	r4, r3
 800738a:	d12b      	bne.n	80073e4 <__swbuf_r+0x70>
 800738c:	686c      	ldr	r4, [r5, #4]
 800738e:	69a3      	ldr	r3, [r4, #24]
 8007390:	60a3      	str	r3, [r4, #8]
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	071a      	lsls	r2, r3, #28
 8007396:	d52f      	bpl.n	80073f8 <__swbuf_r+0x84>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	b36b      	cbz	r3, 80073f8 <__swbuf_r+0x84>
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	6820      	ldr	r0, [r4, #0]
 80073a0:	1ac0      	subs	r0, r0, r3
 80073a2:	6963      	ldr	r3, [r4, #20]
 80073a4:	b2f6      	uxtb	r6, r6
 80073a6:	4283      	cmp	r3, r0
 80073a8:	4637      	mov	r7, r6
 80073aa:	dc04      	bgt.n	80073b6 <__swbuf_r+0x42>
 80073ac:	4621      	mov	r1, r4
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 f966 	bl	8007680 <_fflush_r>
 80073b4:	bb30      	cbnz	r0, 8007404 <__swbuf_r+0x90>
 80073b6:	68a3      	ldr	r3, [r4, #8]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	60a3      	str	r3, [r4, #8]
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	6022      	str	r2, [r4, #0]
 80073c2:	701e      	strb	r6, [r3, #0]
 80073c4:	6963      	ldr	r3, [r4, #20]
 80073c6:	3001      	adds	r0, #1
 80073c8:	4283      	cmp	r3, r0
 80073ca:	d004      	beq.n	80073d6 <__swbuf_r+0x62>
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	07db      	lsls	r3, r3, #31
 80073d0:	d506      	bpl.n	80073e0 <__swbuf_r+0x6c>
 80073d2:	2e0a      	cmp	r6, #10
 80073d4:	d104      	bne.n	80073e0 <__swbuf_r+0x6c>
 80073d6:	4621      	mov	r1, r4
 80073d8:	4628      	mov	r0, r5
 80073da:	f000 f951 	bl	8007680 <_fflush_r>
 80073de:	b988      	cbnz	r0, 8007404 <__swbuf_r+0x90>
 80073e0:	4638      	mov	r0, r7
 80073e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <__swbuf_r+0x9c>)
 80073e6:	429c      	cmp	r4, r3
 80073e8:	d101      	bne.n	80073ee <__swbuf_r+0x7a>
 80073ea:	68ac      	ldr	r4, [r5, #8]
 80073ec:	e7cf      	b.n	800738e <__swbuf_r+0x1a>
 80073ee:	4b09      	ldr	r3, [pc, #36]	; (8007414 <__swbuf_r+0xa0>)
 80073f0:	429c      	cmp	r4, r3
 80073f2:	bf08      	it	eq
 80073f4:	68ec      	ldreq	r4, [r5, #12]
 80073f6:	e7ca      	b.n	800738e <__swbuf_r+0x1a>
 80073f8:	4621      	mov	r1, r4
 80073fa:	4628      	mov	r0, r5
 80073fc:	f000 f81e 	bl	800743c <__swsetup_r>
 8007400:	2800      	cmp	r0, #0
 8007402:	d0cb      	beq.n	800739c <__swbuf_r+0x28>
 8007404:	f04f 37ff 	mov.w	r7, #4294967295
 8007408:	e7ea      	b.n	80073e0 <__swbuf_r+0x6c>
 800740a:	bf00      	nop
 800740c:	0801aac0 	.word	0x0801aac0
 8007410:	0801aae0 	.word	0x0801aae0
 8007414:	0801aaa0 	.word	0x0801aaa0

08007418 <_write_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d07      	ldr	r5, [pc, #28]	; (8007438 <_write_r+0x20>)
 800741c:	4604      	mov	r4, r0
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	2200      	movs	r2, #0
 8007424:	602a      	str	r2, [r5, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7fa fa29 	bl	800187e <_write>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_write_r+0x1e>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_write_r+0x1e>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20002b24 	.word	0x20002b24

0800743c <__swsetup_r>:
 800743c:	4b32      	ldr	r3, [pc, #200]	; (8007508 <__swsetup_r+0xcc>)
 800743e:	b570      	push	{r4, r5, r6, lr}
 8007440:	681d      	ldr	r5, [r3, #0]
 8007442:	4606      	mov	r6, r0
 8007444:	460c      	mov	r4, r1
 8007446:	b125      	cbz	r5, 8007452 <__swsetup_r+0x16>
 8007448:	69ab      	ldr	r3, [r5, #24]
 800744a:	b913      	cbnz	r3, 8007452 <__swsetup_r+0x16>
 800744c:	4628      	mov	r0, r5
 800744e:	f7ff f8ad 	bl	80065ac <__sinit>
 8007452:	4b2e      	ldr	r3, [pc, #184]	; (800750c <__swsetup_r+0xd0>)
 8007454:	429c      	cmp	r4, r3
 8007456:	d10f      	bne.n	8007478 <__swsetup_r+0x3c>
 8007458:	686c      	ldr	r4, [r5, #4]
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007460:	0719      	lsls	r1, r3, #28
 8007462:	d42c      	bmi.n	80074be <__swsetup_r+0x82>
 8007464:	06dd      	lsls	r5, r3, #27
 8007466:	d411      	bmi.n	800748c <__swsetup_r+0x50>
 8007468:	2309      	movs	r3, #9
 800746a:	6033      	str	r3, [r6, #0]
 800746c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	e03e      	b.n	80074f6 <__swsetup_r+0xba>
 8007478:	4b25      	ldr	r3, [pc, #148]	; (8007510 <__swsetup_r+0xd4>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d101      	bne.n	8007482 <__swsetup_r+0x46>
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	e7eb      	b.n	800745a <__swsetup_r+0x1e>
 8007482:	4b24      	ldr	r3, [pc, #144]	; (8007514 <__swsetup_r+0xd8>)
 8007484:	429c      	cmp	r4, r3
 8007486:	bf08      	it	eq
 8007488:	68ec      	ldreq	r4, [r5, #12]
 800748a:	e7e6      	b.n	800745a <__swsetup_r+0x1e>
 800748c:	0758      	lsls	r0, r3, #29
 800748e:	d512      	bpl.n	80074b6 <__swsetup_r+0x7a>
 8007490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007492:	b141      	cbz	r1, 80074a6 <__swsetup_r+0x6a>
 8007494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007498:	4299      	cmp	r1, r3
 800749a:	d002      	beq.n	80074a2 <__swsetup_r+0x66>
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff fcdb 	bl	8006e58 <_free_r>
 80074a2:	2300      	movs	r3, #0
 80074a4:	6363      	str	r3, [r4, #52]	; 0x34
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	2300      	movs	r3, #0
 80074b0:	6063      	str	r3, [r4, #4]
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f043 0308 	orr.w	r3, r3, #8
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	b94b      	cbnz	r3, 80074d6 <__swsetup_r+0x9a>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074cc:	d003      	beq.n	80074d6 <__swsetup_r+0x9a>
 80074ce:	4621      	mov	r1, r4
 80074d0:	4630      	mov	r0, r6
 80074d2:	f000 f95b 	bl	800778c <__smakebuf_r>
 80074d6:	89a0      	ldrh	r0, [r4, #12]
 80074d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074dc:	f010 0301 	ands.w	r3, r0, #1
 80074e0:	d00a      	beq.n	80074f8 <__swsetup_r+0xbc>
 80074e2:	2300      	movs	r3, #0
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	6963      	ldr	r3, [r4, #20]
 80074e8:	425b      	negs	r3, r3
 80074ea:	61a3      	str	r3, [r4, #24]
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	b943      	cbnz	r3, 8007502 <__swsetup_r+0xc6>
 80074f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074f4:	d1ba      	bne.n	800746c <__swsetup_r+0x30>
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	0781      	lsls	r1, r0, #30
 80074fa:	bf58      	it	pl
 80074fc:	6963      	ldrpl	r3, [r4, #20]
 80074fe:	60a3      	str	r3, [r4, #8]
 8007500:	e7f4      	b.n	80074ec <__swsetup_r+0xb0>
 8007502:	2000      	movs	r0, #0
 8007504:	e7f7      	b.n	80074f6 <__swsetup_r+0xba>
 8007506:	bf00      	nop
 8007508:	2000000c 	.word	0x2000000c
 800750c:	0801aac0 	.word	0x0801aac0
 8007510:	0801aae0 	.word	0x0801aae0
 8007514:	0801aaa0 	.word	0x0801aaa0

08007518 <__assert_func>:
 8007518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800751a:	4614      	mov	r4, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <__assert_func+0x2c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4605      	mov	r5, r0
 8007524:	68d8      	ldr	r0, [r3, #12]
 8007526:	b14c      	cbz	r4, 800753c <__assert_func+0x24>
 8007528:	4b07      	ldr	r3, [pc, #28]	; (8007548 <__assert_func+0x30>)
 800752a:	9100      	str	r1, [sp, #0]
 800752c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007530:	4906      	ldr	r1, [pc, #24]	; (800754c <__assert_func+0x34>)
 8007532:	462b      	mov	r3, r5
 8007534:	f000 f8e0 	bl	80076f8 <fiprintf>
 8007538:	f000 f9a5 	bl	8007886 <abort>
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <__assert_func+0x38>)
 800753e:	461c      	mov	r4, r3
 8007540:	e7f3      	b.n	800752a <__assert_func+0x12>
 8007542:	bf00      	nop
 8007544:	2000000c 	.word	0x2000000c
 8007548:	0801ac6d 	.word	0x0801ac6d
 800754c:	0801ac7a 	.word	0x0801ac7a
 8007550:	0801aca8 	.word	0x0801aca8

08007554 <_close_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d06      	ldr	r5, [pc, #24]	; (8007570 <_close_r+0x1c>)
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	f7fa f9a9 	bl	80018b6 <_close>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_close_r+0x1a>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_close_r+0x1a>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20002b24 	.word	0x20002b24

08007574 <__sflush_r>:
 8007574:	898a      	ldrh	r2, [r1, #12]
 8007576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757a:	4605      	mov	r5, r0
 800757c:	0710      	lsls	r0, r2, #28
 800757e:	460c      	mov	r4, r1
 8007580:	d458      	bmi.n	8007634 <__sflush_r+0xc0>
 8007582:	684b      	ldr	r3, [r1, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	dc05      	bgt.n	8007594 <__sflush_r+0x20>
 8007588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	dc02      	bgt.n	8007594 <__sflush_r+0x20>
 800758e:	2000      	movs	r0, #0
 8007590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007596:	2e00      	cmp	r6, #0
 8007598:	d0f9      	beq.n	800758e <__sflush_r+0x1a>
 800759a:	2300      	movs	r3, #0
 800759c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075a0:	682f      	ldr	r7, [r5, #0]
 80075a2:	602b      	str	r3, [r5, #0]
 80075a4:	d032      	beq.n	800760c <__sflush_r+0x98>
 80075a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	075a      	lsls	r2, r3, #29
 80075ac:	d505      	bpl.n	80075ba <__sflush_r+0x46>
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	1ac0      	subs	r0, r0, r3
 80075b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075b4:	b10b      	cbz	r3, 80075ba <__sflush_r+0x46>
 80075b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075b8:	1ac0      	subs	r0, r0, r3
 80075ba:	2300      	movs	r3, #0
 80075bc:	4602      	mov	r2, r0
 80075be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075c0:	6a21      	ldr	r1, [r4, #32]
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b0      	blx	r6
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	d106      	bne.n	80075da <__sflush_r+0x66>
 80075cc:	6829      	ldr	r1, [r5, #0]
 80075ce:	291d      	cmp	r1, #29
 80075d0:	d82c      	bhi.n	800762c <__sflush_r+0xb8>
 80075d2:	4a2a      	ldr	r2, [pc, #168]	; (800767c <__sflush_r+0x108>)
 80075d4:	40ca      	lsrs	r2, r1
 80075d6:	07d6      	lsls	r6, r2, #31
 80075d8:	d528      	bpl.n	800762c <__sflush_r+0xb8>
 80075da:	2200      	movs	r2, #0
 80075dc:	6062      	str	r2, [r4, #4]
 80075de:	04d9      	lsls	r1, r3, #19
 80075e0:	6922      	ldr	r2, [r4, #16]
 80075e2:	6022      	str	r2, [r4, #0]
 80075e4:	d504      	bpl.n	80075f0 <__sflush_r+0x7c>
 80075e6:	1c42      	adds	r2, r0, #1
 80075e8:	d101      	bne.n	80075ee <__sflush_r+0x7a>
 80075ea:	682b      	ldr	r3, [r5, #0]
 80075ec:	b903      	cbnz	r3, 80075f0 <__sflush_r+0x7c>
 80075ee:	6560      	str	r0, [r4, #84]	; 0x54
 80075f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075f2:	602f      	str	r7, [r5, #0]
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d0ca      	beq.n	800758e <__sflush_r+0x1a>
 80075f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075fc:	4299      	cmp	r1, r3
 80075fe:	d002      	beq.n	8007606 <__sflush_r+0x92>
 8007600:	4628      	mov	r0, r5
 8007602:	f7ff fc29 	bl	8006e58 <_free_r>
 8007606:	2000      	movs	r0, #0
 8007608:	6360      	str	r0, [r4, #52]	; 0x34
 800760a:	e7c1      	b.n	8007590 <__sflush_r+0x1c>
 800760c:	6a21      	ldr	r1, [r4, #32]
 800760e:	2301      	movs	r3, #1
 8007610:	4628      	mov	r0, r5
 8007612:	47b0      	blx	r6
 8007614:	1c41      	adds	r1, r0, #1
 8007616:	d1c7      	bne.n	80075a8 <__sflush_r+0x34>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0c4      	beq.n	80075a8 <__sflush_r+0x34>
 800761e:	2b1d      	cmp	r3, #29
 8007620:	d001      	beq.n	8007626 <__sflush_r+0xb2>
 8007622:	2b16      	cmp	r3, #22
 8007624:	d101      	bne.n	800762a <__sflush_r+0xb6>
 8007626:	602f      	str	r7, [r5, #0]
 8007628:	e7b1      	b.n	800758e <__sflush_r+0x1a>
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	e7ad      	b.n	8007590 <__sflush_r+0x1c>
 8007634:	690f      	ldr	r7, [r1, #16]
 8007636:	2f00      	cmp	r7, #0
 8007638:	d0a9      	beq.n	800758e <__sflush_r+0x1a>
 800763a:	0793      	lsls	r3, r2, #30
 800763c:	680e      	ldr	r6, [r1, #0]
 800763e:	bf08      	it	eq
 8007640:	694b      	ldreq	r3, [r1, #20]
 8007642:	600f      	str	r7, [r1, #0]
 8007644:	bf18      	it	ne
 8007646:	2300      	movne	r3, #0
 8007648:	eba6 0807 	sub.w	r8, r6, r7
 800764c:	608b      	str	r3, [r1, #8]
 800764e:	f1b8 0f00 	cmp.w	r8, #0
 8007652:	dd9c      	ble.n	800758e <__sflush_r+0x1a>
 8007654:	6a21      	ldr	r1, [r4, #32]
 8007656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007658:	4643      	mov	r3, r8
 800765a:	463a      	mov	r2, r7
 800765c:	4628      	mov	r0, r5
 800765e:	47b0      	blx	r6
 8007660:	2800      	cmp	r0, #0
 8007662:	dc06      	bgt.n	8007672 <__sflush_r+0xfe>
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	f04f 30ff 	mov.w	r0, #4294967295
 8007670:	e78e      	b.n	8007590 <__sflush_r+0x1c>
 8007672:	4407      	add	r7, r0
 8007674:	eba8 0800 	sub.w	r8, r8, r0
 8007678:	e7e9      	b.n	800764e <__sflush_r+0xda>
 800767a:	bf00      	nop
 800767c:	20400001 	.word	0x20400001

08007680 <_fflush_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	690b      	ldr	r3, [r1, #16]
 8007684:	4605      	mov	r5, r0
 8007686:	460c      	mov	r4, r1
 8007688:	b913      	cbnz	r3, 8007690 <_fflush_r+0x10>
 800768a:	2500      	movs	r5, #0
 800768c:	4628      	mov	r0, r5
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	b118      	cbz	r0, 800769a <_fflush_r+0x1a>
 8007692:	6983      	ldr	r3, [r0, #24]
 8007694:	b90b      	cbnz	r3, 800769a <_fflush_r+0x1a>
 8007696:	f7fe ff89 	bl	80065ac <__sinit>
 800769a:	4b14      	ldr	r3, [pc, #80]	; (80076ec <_fflush_r+0x6c>)
 800769c:	429c      	cmp	r4, r3
 800769e:	d11b      	bne.n	80076d8 <_fflush_r+0x58>
 80076a0:	686c      	ldr	r4, [r5, #4]
 80076a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0ef      	beq.n	800768a <_fflush_r+0xa>
 80076aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076ac:	07d0      	lsls	r0, r2, #31
 80076ae:	d404      	bmi.n	80076ba <_fflush_r+0x3a>
 80076b0:	0599      	lsls	r1, r3, #22
 80076b2:	d402      	bmi.n	80076ba <_fflush_r+0x3a>
 80076b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076b6:	f7ff f81c 	bl	80066f2 <__retarget_lock_acquire_recursive>
 80076ba:	4628      	mov	r0, r5
 80076bc:	4621      	mov	r1, r4
 80076be:	f7ff ff59 	bl	8007574 <__sflush_r>
 80076c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076c4:	07da      	lsls	r2, r3, #31
 80076c6:	4605      	mov	r5, r0
 80076c8:	d4e0      	bmi.n	800768c <_fflush_r+0xc>
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	059b      	lsls	r3, r3, #22
 80076ce:	d4dd      	bmi.n	800768c <_fflush_r+0xc>
 80076d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076d2:	f7ff f80f 	bl	80066f4 <__retarget_lock_release_recursive>
 80076d6:	e7d9      	b.n	800768c <_fflush_r+0xc>
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <_fflush_r+0x70>)
 80076da:	429c      	cmp	r4, r3
 80076dc:	d101      	bne.n	80076e2 <_fflush_r+0x62>
 80076de:	68ac      	ldr	r4, [r5, #8]
 80076e0:	e7df      	b.n	80076a2 <_fflush_r+0x22>
 80076e2:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <_fflush_r+0x74>)
 80076e4:	429c      	cmp	r4, r3
 80076e6:	bf08      	it	eq
 80076e8:	68ec      	ldreq	r4, [r5, #12]
 80076ea:	e7da      	b.n	80076a2 <_fflush_r+0x22>
 80076ec:	0801aac0 	.word	0x0801aac0
 80076f0:	0801aae0 	.word	0x0801aae0
 80076f4:	0801aaa0 	.word	0x0801aaa0

080076f8 <fiprintf>:
 80076f8:	b40e      	push	{r1, r2, r3}
 80076fa:	b503      	push	{r0, r1, lr}
 80076fc:	4601      	mov	r1, r0
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	4805      	ldr	r0, [pc, #20]	; (8007718 <fiprintf+0x20>)
 8007702:	f853 2b04 	ldr.w	r2, [r3], #4
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	f7ff fcaf 	bl	800706c <_vfiprintf_r>
 800770e:	b002      	add	sp, #8
 8007710:	f85d eb04 	ldr.w	lr, [sp], #4
 8007714:	b003      	add	sp, #12
 8007716:	4770      	bx	lr
 8007718:	2000000c 	.word	0x2000000c

0800771c <_lseek_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	; (800773c <_lseek_r+0x20>)
 8007720:	4604      	mov	r4, r0
 8007722:	4608      	mov	r0, r1
 8007724:	4611      	mov	r1, r2
 8007726:	2200      	movs	r2, #0
 8007728:	602a      	str	r2, [r5, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	f7fa f8ea 	bl	8001904 <_lseek>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_lseek_r+0x1e>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_lseek_r+0x1e>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20002b24 	.word	0x20002b24

08007740 <__swhatbuf_r>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	460e      	mov	r6, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	2900      	cmp	r1, #0
 800774a:	b096      	sub	sp, #88	; 0x58
 800774c:	4614      	mov	r4, r2
 800774e:	461d      	mov	r5, r3
 8007750:	da08      	bge.n	8007764 <__swhatbuf_r+0x24>
 8007752:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	602a      	str	r2, [r5, #0]
 800775a:	061a      	lsls	r2, r3, #24
 800775c:	d410      	bmi.n	8007780 <__swhatbuf_r+0x40>
 800775e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007762:	e00e      	b.n	8007782 <__swhatbuf_r+0x42>
 8007764:	466a      	mov	r2, sp
 8007766:	f000 f895 	bl	8007894 <_fstat_r>
 800776a:	2800      	cmp	r0, #0
 800776c:	dbf1      	blt.n	8007752 <__swhatbuf_r+0x12>
 800776e:	9a01      	ldr	r2, [sp, #4]
 8007770:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007774:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007778:	425a      	negs	r2, r3
 800777a:	415a      	adcs	r2, r3
 800777c:	602a      	str	r2, [r5, #0]
 800777e:	e7ee      	b.n	800775e <__swhatbuf_r+0x1e>
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	2000      	movs	r0, #0
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	b016      	add	sp, #88	; 0x58
 8007788:	bd70      	pop	{r4, r5, r6, pc}
	...

0800778c <__smakebuf_r>:
 800778c:	898b      	ldrh	r3, [r1, #12]
 800778e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007790:	079d      	lsls	r5, r3, #30
 8007792:	4606      	mov	r6, r0
 8007794:	460c      	mov	r4, r1
 8007796:	d507      	bpl.n	80077a8 <__smakebuf_r+0x1c>
 8007798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	2301      	movs	r3, #1
 80077a2:	6163      	str	r3, [r4, #20]
 80077a4:	b002      	add	sp, #8
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	ab01      	add	r3, sp, #4
 80077aa:	466a      	mov	r2, sp
 80077ac:	f7ff ffc8 	bl	8007740 <__swhatbuf_r>
 80077b0:	9900      	ldr	r1, [sp, #0]
 80077b2:	4605      	mov	r5, r0
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7ff fbbb 	bl	8006f30 <_malloc_r>
 80077ba:	b948      	cbnz	r0, 80077d0 <__smakebuf_r+0x44>
 80077bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c0:	059a      	lsls	r2, r3, #22
 80077c2:	d4ef      	bmi.n	80077a4 <__smakebuf_r+0x18>
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	f043 0302 	orr.w	r3, r3, #2
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	e7e3      	b.n	8007798 <__smakebuf_r+0xc>
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <__smakebuf_r+0x7c>)
 80077d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	6020      	str	r0, [r4, #0]
 80077d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	9b00      	ldr	r3, [sp, #0]
 80077e0:	6163      	str	r3, [r4, #20]
 80077e2:	9b01      	ldr	r3, [sp, #4]
 80077e4:	6120      	str	r0, [r4, #16]
 80077e6:	b15b      	cbz	r3, 8007800 <__smakebuf_r+0x74>
 80077e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ec:	4630      	mov	r0, r6
 80077ee:	f000 f863 	bl	80078b8 <_isatty_r>
 80077f2:	b128      	cbz	r0, 8007800 <__smakebuf_r+0x74>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	f043 0301 	orr.w	r3, r3, #1
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	89a0      	ldrh	r0, [r4, #12]
 8007802:	4305      	orrs	r5, r0
 8007804:	81a5      	strh	r5, [r4, #12]
 8007806:	e7cd      	b.n	80077a4 <__smakebuf_r+0x18>
 8007808:	08006545 	.word	0x08006545

0800780c <__ascii_mbtowc>:
 800780c:	b082      	sub	sp, #8
 800780e:	b901      	cbnz	r1, 8007812 <__ascii_mbtowc+0x6>
 8007810:	a901      	add	r1, sp, #4
 8007812:	b142      	cbz	r2, 8007826 <__ascii_mbtowc+0x1a>
 8007814:	b14b      	cbz	r3, 800782a <__ascii_mbtowc+0x1e>
 8007816:	7813      	ldrb	r3, [r2, #0]
 8007818:	600b      	str	r3, [r1, #0]
 800781a:	7812      	ldrb	r2, [r2, #0]
 800781c:	1e10      	subs	r0, r2, #0
 800781e:	bf18      	it	ne
 8007820:	2001      	movne	r0, #1
 8007822:	b002      	add	sp, #8
 8007824:	4770      	bx	lr
 8007826:	4610      	mov	r0, r2
 8007828:	e7fb      	b.n	8007822 <__ascii_mbtowc+0x16>
 800782a:	f06f 0001 	mvn.w	r0, #1
 800782e:	e7f8      	b.n	8007822 <__ascii_mbtowc+0x16>

08007830 <__malloc_lock>:
 8007830:	4801      	ldr	r0, [pc, #4]	; (8007838 <__malloc_lock+0x8>)
 8007832:	f7fe bf5e 	b.w	80066f2 <__retarget_lock_acquire_recursive>
 8007836:	bf00      	nop
 8007838:	20002b18 	.word	0x20002b18

0800783c <__malloc_unlock>:
 800783c:	4801      	ldr	r0, [pc, #4]	; (8007844 <__malloc_unlock+0x8>)
 800783e:	f7fe bf59 	b.w	80066f4 <__retarget_lock_release_recursive>
 8007842:	bf00      	nop
 8007844:	20002b18 	.word	0x20002b18

08007848 <_read_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d07      	ldr	r5, [pc, #28]	; (8007868 <_read_r+0x20>)
 800784c:	4604      	mov	r4, r0
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	2200      	movs	r2, #0
 8007854:	602a      	str	r2, [r5, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	f7f9 fff4 	bl	8001844 <_read>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_read_r+0x1e>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_read_r+0x1e>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	20002b24 	.word	0x20002b24

0800786c <__ascii_wctomb>:
 800786c:	b149      	cbz	r1, 8007882 <__ascii_wctomb+0x16>
 800786e:	2aff      	cmp	r2, #255	; 0xff
 8007870:	bf85      	ittet	hi
 8007872:	238a      	movhi	r3, #138	; 0x8a
 8007874:	6003      	strhi	r3, [r0, #0]
 8007876:	700a      	strbls	r2, [r1, #0]
 8007878:	f04f 30ff 	movhi.w	r0, #4294967295
 800787c:	bf98      	it	ls
 800787e:	2001      	movls	r0, #1
 8007880:	4770      	bx	lr
 8007882:	4608      	mov	r0, r1
 8007884:	4770      	bx	lr

08007886 <abort>:
 8007886:	b508      	push	{r3, lr}
 8007888:	2006      	movs	r0, #6
 800788a:	f000 f84d 	bl	8007928 <raise>
 800788e:	2001      	movs	r0, #1
 8007890:	f7f9 ffce 	bl	8001830 <_exit>

08007894 <_fstat_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4d07      	ldr	r5, [pc, #28]	; (80078b4 <_fstat_r+0x20>)
 8007898:	2300      	movs	r3, #0
 800789a:	4604      	mov	r4, r0
 800789c:	4608      	mov	r0, r1
 800789e:	4611      	mov	r1, r2
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	f7fa f814 	bl	80018ce <_fstat>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	d102      	bne.n	80078b0 <_fstat_r+0x1c>
 80078aa:	682b      	ldr	r3, [r5, #0]
 80078ac:	b103      	cbz	r3, 80078b0 <_fstat_r+0x1c>
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	bd38      	pop	{r3, r4, r5, pc}
 80078b2:	bf00      	nop
 80078b4:	20002b24 	.word	0x20002b24

080078b8 <_isatty_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d06      	ldr	r5, [pc, #24]	; (80078d4 <_isatty_r+0x1c>)
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	f7fa f813 	bl	80018ee <_isatty>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_isatty_r+0x1a>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_isatty_r+0x1a>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	20002b24 	.word	0x20002b24

080078d8 <_raise_r>:
 80078d8:	291f      	cmp	r1, #31
 80078da:	b538      	push	{r3, r4, r5, lr}
 80078dc:	4604      	mov	r4, r0
 80078de:	460d      	mov	r5, r1
 80078e0:	d904      	bls.n	80078ec <_raise_r+0x14>
 80078e2:	2316      	movs	r3, #22
 80078e4:	6003      	str	r3, [r0, #0]
 80078e6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078ee:	b112      	cbz	r2, 80078f6 <_raise_r+0x1e>
 80078f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078f4:	b94b      	cbnz	r3, 800790a <_raise_r+0x32>
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 f830 	bl	800795c <_getpid_r>
 80078fc:	462a      	mov	r2, r5
 80078fe:	4601      	mov	r1, r0
 8007900:	4620      	mov	r0, r4
 8007902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007906:	f000 b817 	b.w	8007938 <_kill_r>
 800790a:	2b01      	cmp	r3, #1
 800790c:	d00a      	beq.n	8007924 <_raise_r+0x4c>
 800790e:	1c59      	adds	r1, r3, #1
 8007910:	d103      	bne.n	800791a <_raise_r+0x42>
 8007912:	2316      	movs	r3, #22
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	2001      	movs	r0, #1
 8007918:	e7e7      	b.n	80078ea <_raise_r+0x12>
 800791a:	2400      	movs	r4, #0
 800791c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007920:	4628      	mov	r0, r5
 8007922:	4798      	blx	r3
 8007924:	2000      	movs	r0, #0
 8007926:	e7e0      	b.n	80078ea <_raise_r+0x12>

08007928 <raise>:
 8007928:	4b02      	ldr	r3, [pc, #8]	; (8007934 <raise+0xc>)
 800792a:	4601      	mov	r1, r0
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	f7ff bfd3 	b.w	80078d8 <_raise_r>
 8007932:	bf00      	nop
 8007934:	2000000c 	.word	0x2000000c

08007938 <_kill_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d07      	ldr	r5, [pc, #28]	; (8007958 <_kill_r+0x20>)
 800793c:	2300      	movs	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	4608      	mov	r0, r1
 8007942:	4611      	mov	r1, r2
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	f7f9 ff63 	bl	8001810 <_kill>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d102      	bne.n	8007954 <_kill_r+0x1c>
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	b103      	cbz	r3, 8007954 <_kill_r+0x1c>
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	bd38      	pop	{r3, r4, r5, pc}
 8007956:	bf00      	nop
 8007958:	20002b24 	.word	0x20002b24

0800795c <_getpid_r>:
 800795c:	f7f9 bf50 	b.w	8001800 <_getpid>

08007960 <sqrtf>:
 8007960:	b508      	push	{r3, lr}
 8007962:	ed2d 8b02 	vpush	{d8}
 8007966:	eeb0 8a40 	vmov.f32	s16, s0
 800796a:	f000 f817 	bl	800799c <__ieee754_sqrtf>
 800796e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007976:	d60c      	bvs.n	8007992 <sqrtf+0x32>
 8007978:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007998 <sqrtf+0x38>
 800797c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007984:	d505      	bpl.n	8007992 <sqrtf+0x32>
 8007986:	f7fd fa89 	bl	8004e9c <__errno>
 800798a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800798e:	2321      	movs	r3, #33	; 0x21
 8007990:	6003      	str	r3, [r0, #0]
 8007992:	ecbd 8b02 	vpop	{d8}
 8007996:	bd08      	pop	{r3, pc}
 8007998:	00000000 	.word	0x00000000

0800799c <__ieee754_sqrtf>:
 800799c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80079a0:	4770      	bx	lr
	...

080079a4 <_init>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	bf00      	nop
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr

080079b0 <_fini>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr
